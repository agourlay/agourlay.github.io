<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="550" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="533.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="533.00"> </text><svg id="frames" x="10" width="1180" total_samples="208571"><g><title>sha1::compress::compress (103 samples, 0.05%)</title><rect x="0.0029%" y="453" width="0.0494%" height="15" fill="rgb(227,0,7)" fg:x="6" fg:w="103"/><text x="0.2529%" y="463.50"></text></g><g><title>[anon] (349 samples, 0.17%)</title><rect x="0.0024%" y="469" width="0.1673%" height="15" fill="rgb(217,0,24)" fg:x="5" fg:w="349"/><text x="0.2524%" y="479.50"></text></g><g><title>sha1::compress::soft::compress (245 samples, 0.12%)</title><rect x="0.0523%" y="453" width="0.1175%" height="15" fill="rgb(221,193,54)" fg:x="109" fg:w="245"/><text x="0.3023%" y="463.50"></text></g><g><title>sha1::compress::compress (110 samples, 0.05%)</title><rect x="0.1721%" y="453" width="0.0527%" height="15" fill="rgb(248,212,6)" fg:x="359" fg:w="110"/><text x="0.4221%" y="463.50"></text></g><g><title>sha1::compress::x86::compress (110 samples, 0.05%)</title><rect x="0.1721%" y="437" width="0.0527%" height="15" fill="rgb(208,68,35)" fg:x="359" fg:w="110"/><text x="0.4221%" y="447.50"></text></g><g><title>[unknown] (352 samples, 0.17%)</title><rect x="0.1697%" y="469" width="0.1688%" height="15" fill="rgb(232,128,0)" fg:x="354" fg:w="352"/><text x="0.4197%" y="479.50"></text></g><g><title>sha1::compress::soft::compress (237 samples, 0.11%)</title><rect x="0.2249%" y="453" width="0.1136%" height="15" fill="rgb(207,160,47)" fg:x="469" fg:w="237"/><text x="0.4749%" y="463.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as crypto_common::KeyInit&gt;::new_from_slice (30 samples, 0.01%)</title><rect x="0.3514%" y="229" width="0.0144%" height="15" fill="rgb(228,23,34)" fg:x="733" fg:w="30"/><text x="0.6014%" y="239.50"></text></g><g><title>&lt;hmac::optim::HmacCore&lt;D&gt; as crypto_common::KeyInit&gt;::new_from_slice (30 samples, 0.01%)</title><rect x="0.3514%" y="213" width="0.0144%" height="15" fill="rgb(218,30,26)" fg:x="733" fg:w="30"/><text x="0.6014%" y="223.50"></text></g><g><title>&lt;sha1::Sha1Core as digest::core_api::UpdateCore&gt;::update_blocks (28 samples, 0.01%)</title><rect x="0.3524%" y="197" width="0.0134%" height="15" fill="rgb(220,122,19)" fg:x="735" fg:w="28"/><text x="0.6024%" y="207.50"></text></g><g><title>sha1::compress::soft::compress (28 samples, 0.01%)</title><rect x="0.3524%" y="181" width="0.0134%" height="15" fill="rgb(250,228,42)" fg:x="735" fg:w="28"/><text x="0.6024%" y="191.50"></text></g><g><title>sha1::compress::soft::sha1_digest_block_u32 (28 samples, 0.01%)</title><rect x="0.3524%" y="165" width="0.0134%" height="15" fill="rgb(240,193,28)" fg:x="735" fg:w="28"/><text x="0.6024%" y="175.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as core::clone::Clone&gt;::clone (147 samples, 0.07%)</title><rect x="0.4061%" y="213" width="0.0705%" height="15" fill="rgb(216,20,37)" fg:x="847" fg:w="147"/><text x="0.6561%" y="223.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::Update&gt;::update (42 samples, 0.02%)</title><rect x="0.4766%" y="213" width="0.0201%" height="15" fill="rgb(206,188,39)" fg:x="994" fg:w="42"/><text x="0.7266%" y="223.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,Kind&gt;::digest_blocks (42 samples, 0.02%)</title><rect x="0.4766%" y="197" width="0.0201%" height="15" fill="rgb(217,207,13)" fg:x="994" fg:w="42"/><text x="0.7266%" y="207.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (40 samples, 0.02%)</title><rect x="0.4775%" y="181" width="0.0192%" height="15" fill="rgb(231,73,38)" fg:x="996" fg:w="40"/><text x="0.7275%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (40 samples, 0.02%)</title><rect x="0.4775%" y="165" width="0.0192%" height="15" fill="rgb(225,20,46)" fg:x="996" fg:w="40"/><text x="0.7275%" y="175.50"></text></g><g><title>sha1::compress::compress (342 samples, 0.16%)</title><rect x="1.3861%" y="101" width="0.1640%" height="15" fill="rgb(210,31,41)" fg:x="2891" fg:w="342"/><text x="1.6361%" y="111.50"></text></g><g><title>sha1::compress::x86::compress (240 samples, 0.12%)</title><rect x="1.4350%" y="85" width="0.1151%" height="15" fill="rgb(221,200,47)" fg:x="2993" fg:w="240"/><text x="1.6850%" y="95.50"></text></g><g><title>sha1::compress::x86::shani_cpuid::get (112 samples, 0.05%)</title><rect x="1.4964%" y="69" width="0.0537%" height="15" fill="rgb(226,26,5)" fg:x="3121" fg:w="112"/><text x="1.7464%" y="79.50"></text></g><g><title>sha1::compress::x86::shani_cpuid::init_get (112 samples, 0.05%)</title><rect x="1.4964%" y="53" width="0.0537%" height="15" fill="rgb(249,33,26)" fg:x="3121" fg:w="112"/><text x="1.7464%" y="63.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (511 samples, 0.25%)</title><rect x="2.1058%" y="85" width="0.2450%" height="15" fill="rgb(235,183,28)" fg:x="4392" fg:w="511"/><text x="2.3558%" y="95.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (511 samples, 0.25%)</title><rect x="2.1058%" y="69" width="0.2450%" height="15" fill="rgb(221,5,38)" fg:x="4392" fg:w="511"/><text x="2.3558%" y="79.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (511 samples, 0.25%)</title><rect x="2.1058%" y="53" width="0.2450%" height="15" fill="rgb(247,18,42)" fg:x="4392" fg:w="511"/><text x="2.3558%" y="63.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (233 samples, 0.11%)</title><rect x="2.3508%" y="85" width="0.1117%" height="15" fill="rgb(241,131,45)" fg:x="4903" fg:w="233"/><text x="2.6008%" y="95.50"></text></g><g><title>core::num::&lt;impl u32&gt;::from_be_bytes (1,062 samples, 0.51%)</title><rect x="2.4630%" y="85" width="0.5092%" height="15" fill="rgb(249,31,29)" fg:x="5137" fg:w="1062"/><text x="2.7130%" y="95.50"></text></g><g><title>core::num::&lt;impl u32&gt;::from_be (1,062 samples, 0.51%)</title><rect x="2.4630%" y="69" width="0.5092%" height="15" fill="rgb(225,111,53)" fg:x="5137" fg:w="1062"/><text x="2.7130%" y="79.50"></text></g><g><title>core::num::&lt;impl u32&gt;::swap_bytes (1,062 samples, 0.51%)</title><rect x="2.4630%" y="53" width="0.5092%" height="15" fill="rgb(238,160,17)" fg:x="5137" fg:w="1062"/><text x="2.7130%" y="63.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (232 samples, 0.11%)</title><rect x="2.9721%" y="69" width="0.1112%" height="15" fill="rgb(214,148,48)" fg:x="6199" fg:w="232"/><text x="3.2221%" y="79.50"></text></g><g><title>sha1::compress::soft::add (4,400 samples, 2.11%)</title><rect x="3.0834%" y="53" width="2.1096%" height="15" fill="rgb(232,36,49)" fg:x="6431" fg:w="4400"/><text x="3.3334%" y="63.50">s..</text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (4,400 samples, 2.11%)</title><rect x="3.0834%" y="37" width="2.1096%" height="15" fill="rgb(209,103,24)" fg:x="6431" fg:w="4400"/><text x="3.3334%" y="47.50">c..</text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (1,908 samples, 0.91%)</title><rect x="6.2895%" y="37" width="0.9148%" height="15" fill="rgb(229,88,8)" fg:x="13118" fg:w="1908"/><text x="6.5395%" y="47.50"></text></g><g><title>sha1::compress::soft::sha1rnds4c (5,866 samples, 2.81%)</title><rect x="5.1930%" y="53" width="2.8125%" height="15" fill="rgb(213,181,19)" fg:x="10831" fg:w="5866"/><text x="5.4430%" y="63.50">sh..</text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (1,671 samples, 0.80%)</title><rect x="7.2043%" y="37" width="0.8012%" height="15" fill="rgb(254,191,54)" fg:x="15026" fg:w="1671"/><text x="7.4543%" y="47.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (1,496 samples, 0.72%)</title><rect x="9.8892%" y="37" width="0.7173%" height="15" fill="rgb(241,83,37)" fg:x="20626" fg:w="1496"/><text x="10.1392%" y="47.50"></text></g><g><title>sha1::compress::soft::sha1rnds4m (7,521 samples, 3.61%)</title><rect x="8.0054%" y="53" width="3.6060%" height="15" fill="rgb(233,36,39)" fg:x="16697" fg:w="7521"/><text x="8.2554%" y="63.50">sha1..</text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (2,096 samples, 1.00%)</title><rect x="10.6065%" y="37" width="1.0049%" height="15" fill="rgb(226,3,54)" fg:x="22122" fg:w="2096"/><text x="10.8565%" y="47.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (3,536 samples, 1.70%)</title><rect x="13.4165%" y="37" width="1.6953%" height="15" fill="rgb(245,192,40)" fg:x="27983" fg:w="3536"/><text x="13.6665%" y="47.50"></text></g><g><title>sha1::compress::soft::sha1_digest_round_x4 (29,778 samples, 14.28%)</title><rect x="3.0834%" y="69" width="14.2772%" height="15" fill="rgb(238,167,29)" fg:x="6431" fg:w="29778"/><text x="3.3334%" y="79.50">sha1::compress::soft::..</text></g><g><title>sha1::compress::soft::sha1rnds4p (11,991 samples, 5.75%)</title><rect x="11.6114%" y="53" width="5.7491%" height="15" fill="rgb(232,182,51)" fg:x="24218" fg:w="11991"/><text x="11.8614%" y="63.50">sha1::c..</text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (4,690 samples, 2.25%)</title><rect x="15.1119%" y="37" width="2.2486%" height="15" fill="rgb(231,60,39)" fg:x="31519" fg:w="4690"/><text x="15.3619%" y="47.50">c..</text></g><g><title>sha1::compress::soft::sha1_first_half (499 samples, 0.24%)</title><rect x="17.3605%" y="69" width="0.2392%" height="15" fill="rgb(208,69,12)" fg:x="36209" fg:w="499"/><text x="17.6105%" y="79.50"></text></g><g><title>sha1::compress::soft::sha1_first_add (499 samples, 0.24%)</title><rect x="17.3605%" y="53" width="0.2392%" height="15" fill="rgb(235,93,37)" fg:x="36209" fg:w="499"/><text x="17.6105%" y="63.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (499 samples, 0.24%)</title><rect x="17.3605%" y="37" width="0.2392%" height="15" fill="rgb(213,116,39)" fg:x="36209" fg:w="499"/><text x="17.6105%" y="47.50"></text></g><g><title>sha1::compress::soft::sha1msg1 (1,939 samples, 0.93%)</title><rect x="17.5998%" y="69" width="0.9297%" height="15" fill="rgb(222,207,29)" fg:x="36708" fg:w="1939"/><text x="17.8498%" y="79.50"></text></g><g><title>sha1::compress::soft::sha1msg2 (8,072 samples, 3.87%)</title><rect x="18.5294%" y="69" width="3.8701%" height="15" fill="rgb(206,96,30)" fg:x="38647" fg:w="8072"/><text x="18.7794%" y="79.50">sha1..</text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (6,470 samples, 3.10%)</title><rect x="19.2975%" y="53" width="3.1021%" height="15" fill="rgb(218,138,4)" fg:x="40249" fg:w="6470"/><text x="19.5475%" y="63.50">cor..</text></g><g><title>sha1::compress::soft::sha1_digest_block_u32 (43,004 samples, 20.62%)</title><rect x="2.9721%" y="85" width="20.6184%" height="15" fill="rgb(250,191,14)" fg:x="6199" fg:w="43004"/><text x="3.2221%" y="95.50">sha1::compress::soft::sha1_diges..</text></g><g><title>sha1::compress::soft::xor (2,484 samples, 1.19%)</title><rect x="22.3996%" y="69" width="1.1910%" height="15" fill="rgb(239,60,40)" fg:x="46719" fg:w="2484"/><text x="22.6496%" y="79.50"></text></g><g><title>&lt;sha1::Sha1Core as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core::{{closure}} (46,426 samples, 22.26%)</title><rect x="1.3319%" y="117" width="22.2591%" height="15" fill="rgb(206,27,48)" fg:x="2778" fg:w="46426"/><text x="1.5819%" y="127.50">&lt;sha1::Sha1Core as digest::core_api..</text></g><g><title>sha1::compress::soft::compress (45,971 samples, 22.04%)</title><rect x="1.5501%" y="101" width="22.0409%" height="15" fill="rgb(225,35,8)" fg:x="3233" fg:w="45971"/><text x="1.8001%" y="111.50">sha1::compress::soft::compress</text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::digest_pad (46,581 samples, 22.33%)</title><rect x="1.2845%" y="133" width="22.3334%" height="15" fill="rgb(250,213,24)" fg:x="2679" fg:w="46581"/><text x="1.5345%" y="143.50">block_buffer::BlockBuffer&lt;BlockSize..</text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (55 samples, 0.03%)</title><rect x="23.5915%" y="117" width="0.0264%" height="15" fill="rgb(247,123,22)" fg:x="49205" fg:w="55"/><text x="23.8415%" y="127.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (55 samples, 0.03%)</title><rect x="23.5915%" y="101" width="0.0264%" height="15" fill="rgb(231,138,38)" fg:x="49205" fg:w="55"/><text x="23.8415%" y="111.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::len64_padding_be (46,582 samples, 22.33%)</title><rect x="1.2845%" y="149" width="22.3339%" height="15" fill="rgb(231,145,46)" fg:x="2679" fg:w="46582"/><text x="1.5345%" y="159.50">block_buffer::BlockBuffer&lt;BlockSize..</text></g><g><title>&lt;sha1::Sha1Core as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (49,099 samples, 23.54%)</title><rect x="1.0682%" y="165" width="23.5407%" height="15" fill="rgb(251,118,11)" fg:x="2228" fg:w="49099"/><text x="1.3182%" y="175.50">&lt;sha1::Sha1Core as digest::core_api::..</text></g><g><title>core::num::&lt;impl u32&gt;::to_be_bytes (2,066 samples, 0.99%)</title><rect x="23.6183%" y="149" width="0.9905%" height="15" fill="rgb(217,147,25)" fg:x="49261" fg:w="2066"/><text x="23.8683%" y="159.50"></text></g><g><title>core::num::&lt;impl u32&gt;::to_be (2,066 samples, 0.99%)</title><rect x="23.6183%" y="133" width="0.9905%" height="15" fill="rgb(247,81,37)" fg:x="49261" fg:w="2066"/><text x="23.8683%" y="143.50"></text></g><g><title>core::num::&lt;impl u32&gt;::swap_bytes (2,066 samples, 0.99%)</title><rect x="23.6183%" y="117" width="0.9905%" height="15" fill="rgb(209,12,38)" fg:x="49261" fg:w="2066"/><text x="23.8683%" y="127.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::FixedOutput&gt;::finalize_into (49,155 samples, 23.57%)</title><rect x="1.0677%" y="197" width="23.5675%" height="15" fill="rgb(227,1,9)" fg:x="2227" fg:w="49155"/><text x="1.3177%" y="207.50">&lt;digest::core_api::wrapper::CoreWrapp..</text></g><g><title>&lt;hmac::optim::HmacCore&lt;D&gt; as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (49,155 samples, 23.57%)</title><rect x="1.0677%" y="181" width="23.5675%" height="15" fill="rgb(248,47,43)" fg:x="2227" fg:w="49155"/><text x="1.3177%" y="191.50">&lt;hmac::optim::HmacCore&lt;D&gt; as digest::..</text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,Kind&gt;::digest_blocks (55 samples, 0.03%)</title><rect x="24.6089%" y="165" width="0.0264%" height="15" fill="rgb(221,10,30)" fg:x="51327" fg:w="55"/><text x="24.8589%" y="175.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (55 samples, 0.03%)</title><rect x="24.6089%" y="149" width="0.0264%" height="15" fill="rgb(210,229,1)" fg:x="51327" fg:w="55"/><text x="24.8589%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (55 samples, 0.03%)</title><rect x="24.6089%" y="133" width="0.0264%" height="15" fill="rgb(222,148,37)" fg:x="51327" fg:w="55"/><text x="24.8589%" y="143.50"></text></g><g><title>digest::FixedOutput::finalize_fixed (50,349 samples, 24.14%)</title><rect x="0.4972%" y="213" width="24.1400%" height="15" fill="rgb(234,67,33)" fg:x="1037" fg:w="50349"/><text x="0.7472%" y="223.50">digest::FixedOutput::finalize_fixed</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (313 samples, 0.15%)</title><rect x="24.7350%" y="165" width="0.1501%" height="15" fill="rgb(247,98,35)" fg:x="51590" fg:w="313"/><text x="24.9850%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (313 samples, 0.15%)</title><rect x="24.7350%" y="149" width="0.1501%" height="15" fill="rgb(247,138,52)" fg:x="51590" fg:w="313"/><text x="24.9850%" y="159.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (51,614 samples, 24.75%)</title><rect x="0.3390%" y="421" width="24.7465%" height="15" fill="rgb(213,79,30)" fg:x="707" fg:w="51614"/><text x="0.5890%" y="431.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::f..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (51,614 samples, 24.75%)</title><rect x="0.3390%" y="405" width="24.7465%" height="15" fill="rgb(246,177,23)" fg:x="707" fg:w="51614"/><text x="0.5890%" y="415.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::f..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (51,614 samples, 24.75%)</title><rect x="0.3390%" y="389" width="24.7465%" height="15" fill="rgb(230,62,27)" fg:x="707" fg:w="51614"/><text x="0.5890%" y="399.50">core::ops::function::FnOnce::call_once{..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (51,614 samples, 24.75%)</title><rect x="0.3390%" y="373" width="24.7465%" height="15" fill="rgb(216,154,8)" fg:x="707" fg:w="51614"/><text x="0.5890%" y="383.50">std::thread::Builder::spawn_unchecked_:..</text></g><g><title>std::panic::catch_unwind (51,614 samples, 24.75%)</title><rect x="0.3390%" y="357" width="24.7465%" height="15" fill="rgb(244,35,45)" fg:x="707" fg:w="51614"/><text x="0.5890%" y="367.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (51,614 samples, 24.75%)</title><rect x="0.3390%" y="341" width="24.7465%" height="15" fill="rgb(251,115,12)" fg:x="707" fg:w="51614"/><text x="0.5890%" y="351.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (51,614 samples, 24.75%)</title><rect x="0.3390%" y="325" width="24.7465%" height="15" fill="rgb(240,54,50)" fg:x="707" fg:w="51614"/><text x="0.5890%" y="335.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (51,614 samples, 24.75%)</title><rect x="0.3390%" y="309" width="24.7465%" height="15" fill="rgb(233,84,52)" fg:x="707" fg:w="51614"/><text x="0.5890%" y="319.50">&lt;core::panic::unwind_safe::AssertUnwind..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (51,614 samples, 24.75%)</title><rect x="0.3390%" y="293" width="24.7465%" height="15" fill="rgb(207,117,47)" fg:x="707" fg:w="51614"/><text x="0.5890%" y="303.50">std::thread::Builder::spawn_unchecked_:..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (51,614 samples, 24.75%)</title><rect x="0.3390%" y="277" width="24.7465%" height="15" fill="rgb(249,43,39)" fg:x="707" fg:w="51614"/><text x="0.5890%" y="287.50">std::sys_common::backtrace::__rust_begi..</text></g><g><title>zip_password_finder::password_worker::password_checker::{{closure}} (51,614 samples, 24.75%)</title><rect x="0.3390%" y="261" width="24.7465%" height="15" fill="rgb(209,38,44)" fg:x="707" fg:w="51614"/><text x="0.5890%" y="271.50">zip_password_finder::password_worker::p..</text></g><g><title>pbkdf2::pbkdf2 (51,590 samples, 24.73%)</title><rect x="0.3505%" y="245" width="24.7350%" height="15" fill="rgb(236,212,23)" fg:x="731" fg:w="51590"/><text x="0.6005%" y="255.50">pbkdf2::pbkdf2</text></g><g><title>pbkdf2::pbkdf2_body (51,558 samples, 24.72%)</title><rect x="0.3658%" y="229" width="24.7196%" height="15" fill="rgb(242,79,21)" fg:x="763" fg:w="51558"/><text x="0.6158%" y="239.50">pbkdf2::pbkdf2_body</text></g><g><title>pbkdf2::xor (935 samples, 0.45%)</title><rect x="24.6372%" y="213" width="0.4483%" height="15" fill="rgb(211,96,35)" fg:x="51386" fg:w="935"/><text x="24.8872%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (935 samples, 0.45%)</title><rect x="24.6372%" y="197" width="0.4483%" height="15" fill="rgb(253,215,40)" fg:x="51386" fg:w="935"/><text x="24.8872%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (935 samples, 0.45%)</title><rect x="24.6372%" y="181" width="0.4483%" height="15" fill="rgb(211,81,21)" fg:x="51386" fg:w="935"/><text x="24.8872%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (418 samples, 0.20%)</title><rect x="24.8851%" y="165" width="0.2004%" height="15" fill="rgb(208,190,38)" fg:x="51903" fg:w="418"/><text x="25.1351%" y="175.50"></text></g><g><title>pbkdf2::xor::{{closure}} (418 samples, 0.20%)</title><rect x="24.8851%" y="149" width="0.2004%" height="15" fill="rgb(235,213,38)" fg:x="51903" fg:w="418"/><text x="25.1351%" y="159.50"></text></g><g><title>&lt;u8 as core::ops::bit::BitXorAssign&lt;&amp;u8&gt;&gt;::bitxor_assign (418 samples, 0.20%)</title><rect x="24.8851%" y="133" width="0.2004%" height="15" fill="rgb(237,122,38)" fg:x="51903" fg:w="418"/><text x="25.1351%" y="143.50"></text></g><g><title>&lt;u8 as core::ops::bit::BitXorAssign&gt;::bitxor_assign (418 samples, 0.20%)</title><rect x="24.8851%" y="117" width="0.2004%" height="15" fill="rgb(244,218,35)" fg:x="51903" fg:w="418"/><text x="25.1351%" y="127.50"></text></g><g><title>clone3 (51,615 samples, 24.75%)</title><rect x="0.3390%" y="469" width="24.7470%" height="15" fill="rgb(240,68,47)" fg:x="707" fg:w="51615"/><text x="0.5890%" y="479.50">clone3</text></g><g><title>start_thread (51,615 samples, 24.75%)</title><rect x="0.3390%" y="453" width="24.7470%" height="15" fill="rgb(210,16,53)" fg:x="707" fg:w="51615"/><text x="0.5890%" y="463.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (51,615 samples, 24.75%)</title><rect x="0.3390%" y="437" width="24.7470%" height="15" fill="rgb(235,124,12)" fg:x="707" fg:w="51615"/><text x="0.5890%" y="447.50">std::sys::unix::thread::Thread::new::th..</text></g><g><title>worker-1 (52,433 samples, 25.14%)</title><rect x="0.0024%" y="485" width="25.1392%" height="15" fill="rgb(224,169,11)" fg:x="5" fg:w="52433"/><text x="0.2524%" y="495.50">worker-1</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (116 samples, 0.06%)</title><rect x="25.0859%" y="469" width="0.0556%" height="15" fill="rgb(250,166,2)" fg:x="52322" fg:w="116"/><text x="25.3359%" y="479.50"></text></g><g><title>zip_password_finder::password_worker::password_checker::{{closure}} (116 samples, 0.06%)</title><rect x="25.0859%" y="453" width="0.0556%" height="15" fill="rgb(242,216,29)" fg:x="52322" fg:w="116"/><text x="25.3359%" y="463.50"></text></g><g><title>pbkdf2::pbkdf2 (116 samples, 0.06%)</title><rect x="25.0859%" y="437" width="0.0556%" height="15" fill="rgb(230,116,27)" fg:x="52322" fg:w="116"/><text x="25.3359%" y="447.50"></text></g><g><title>pbkdf2::pbkdf2_body (116 samples, 0.06%)</title><rect x="25.0859%" y="421" width="0.0556%" height="15" fill="rgb(228,99,48)" fg:x="52322" fg:w="116"/><text x="25.3359%" y="431.50"></text></g><g><title>digest::FixedOutput::finalize_fixed (116 samples, 0.06%)</title><rect x="25.0859%" y="405" width="0.0556%" height="15" fill="rgb(253,11,6)" fg:x="52322" fg:w="116"/><text x="25.3359%" y="415.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::FixedOutput&gt;::finalize_into (116 samples, 0.06%)</title><rect x="25.0859%" y="389" width="0.0556%" height="15" fill="rgb(247,143,39)" fg:x="52322" fg:w="116"/><text x="25.3359%" y="399.50"></text></g><g><title>&lt;hmac::optim::HmacCore&lt;D&gt; as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (116 samples, 0.06%)</title><rect x="25.0859%" y="373" width="0.0556%" height="15" fill="rgb(236,97,10)" fg:x="52322" fg:w="116"/><text x="25.3359%" y="383.50"></text></g><g><title>&lt;sha1::Sha1Core as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (116 samples, 0.06%)</title><rect x="25.0859%" y="357" width="0.0556%" height="15" fill="rgb(233,208,19)" fg:x="52322" fg:w="116"/><text x="25.3359%" y="367.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::len64_padding_be (116 samples, 0.06%)</title><rect x="25.0859%" y="341" width="0.0556%" height="15" fill="rgb(216,164,2)" fg:x="52322" fg:w="116"/><text x="25.3359%" y="351.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::digest_pad (116 samples, 0.06%)</title><rect x="25.0859%" y="325" width="0.0556%" height="15" fill="rgb(220,129,5)" fg:x="52322" fg:w="116"/><text x="25.3359%" y="335.50"></text></g><g><title>&lt;sha1::Sha1Core as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core::{{closure}} (116 samples, 0.06%)</title><rect x="25.0859%" y="309" width="0.0556%" height="15" fill="rgb(242,17,10)" fg:x="52322" fg:w="116"/><text x="25.3359%" y="319.50"></text></g><g><title>sha1::compress::compress (124 samples, 0.06%)</title><rect x="25.1416%" y="453" width="0.0595%" height="15" fill="rgb(242,107,0)" fg:x="52438" fg:w="124"/><text x="25.3916%" y="463.50"></text></g><g><title>[anon] (339 samples, 0.16%)</title><rect x="25.1416%" y="469" width="0.1625%" height="15" fill="rgb(251,28,31)" fg:x="52438" fg:w="339"/><text x="25.3916%" y="479.50"></text></g><g><title>sha1::compress::soft::compress (215 samples, 0.10%)</title><rect x="25.2010%" y="453" width="0.1031%" height="15" fill="rgb(233,223,10)" fg:x="52562" fg:w="215"/><text x="25.4510%" y="463.50"></text></g><g><title>sha1::compress::compress (104 samples, 0.05%)</title><rect x="25.3051%" y="453" width="0.0499%" height="15" fill="rgb(215,21,27)" fg:x="52779" fg:w="104"/><text x="25.5551%" y="463.50"></text></g><g><title>sha1::compress::x86::compress (104 samples, 0.05%)</title><rect x="25.3051%" y="437" width="0.0499%" height="15" fill="rgb(232,23,21)" fg:x="52779" fg:w="104"/><text x="25.5551%" y="447.50"></text></g><g><title>[unknown] (329 samples, 0.16%)</title><rect x="25.3041%" y="469" width="0.1577%" height="15" fill="rgb(244,5,23)" fg:x="52777" fg:w="329"/><text x="25.5541%" y="479.50"></text></g><g><title>sha1::compress::soft::compress (223 samples, 0.11%)</title><rect x="25.3549%" y="453" width="0.1069%" height="15" fill="rgb(226,81,46)" fg:x="52883" fg:w="223"/><text x="25.6049%" y="463.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;I,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.01%)</title><rect x="25.4657%" y="245" width="0.0105%" height="15" fill="rgb(247,70,30)" fg:x="53114" fg:w="22"/><text x="25.7157%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.01%)</title><rect x="25.4657%" y="229" width="0.0105%" height="15" fill="rgb(212,68,19)" fg:x="53114" fg:w="22"/><text x="25.7157%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (22 samples, 0.01%)</title><rect x="25.4657%" y="213" width="0.0105%" height="15" fill="rgb(240,187,13)" fg:x="53114" fg:w="22"/><text x="25.7157%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (22 samples, 0.01%)</title><rect x="25.4657%" y="197" width="0.0105%" height="15" fill="rgb(223,113,26)" fg:x="53114" fg:w="22"/><text x="25.7157%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (22 samples, 0.01%)</title><rect x="25.4657%" y="181" width="0.0105%" height="15" fill="rgb(206,192,2)" fg:x="53114" fg:w="22"/><text x="25.7157%" y="191.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as core::clone::Clone&gt;::clone (142 samples, 0.07%)</title><rect x="25.5251%" y="213" width="0.0681%" height="15" fill="rgb(241,108,4)" fg:x="53238" fg:w="142"/><text x="25.7751%" y="223.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::Update&gt;::update (61 samples, 0.03%)</title><rect x="25.5932%" y="213" width="0.0292%" height="15" fill="rgb(247,173,49)" fg:x="53380" fg:w="61"/><text x="25.8432%" y="223.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,Kind&gt;::digest_blocks (61 samples, 0.03%)</title><rect x="25.5932%" y="197" width="0.0292%" height="15" fill="rgb(224,114,35)" fg:x="53380" fg:w="61"/><text x="25.8432%" y="207.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (58 samples, 0.03%)</title><rect x="25.5946%" y="181" width="0.0278%" height="15" fill="rgb(245,159,27)" fg:x="53383" fg:w="58"/><text x="25.8446%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (58 samples, 0.03%)</title><rect x="25.5946%" y="165" width="0.0278%" height="15" fill="rgb(245,172,44)" fg:x="53383" fg:w="58"/><text x="25.8446%" y="175.50"></text></g><g><title>sha1::compress::compress (325 samples, 0.16%)</title><rect x="26.4768%" y="101" width="0.1558%" height="15" fill="rgb(236,23,11)" fg:x="55223" fg:w="325"/><text x="26.7268%" y="111.50"></text></g><g><title>sha1::compress::x86::compress (207 samples, 0.10%)</title><rect x="26.5334%" y="85" width="0.0992%" height="15" fill="rgb(205,117,38)" fg:x="55341" fg:w="207"/><text x="26.7834%" y="95.50"></text></g><g><title>sha1::compress::x86::shani_cpuid::get (98 samples, 0.05%)</title><rect x="26.5857%" y="69" width="0.0470%" height="15" fill="rgb(237,72,25)" fg:x="55450" fg:w="98"/><text x="26.8357%" y="79.50"></text></g><g><title>sha1::compress::x86::shani_cpuid::init_get (98 samples, 0.05%)</title><rect x="26.5857%" y="53" width="0.0470%" height="15" fill="rgb(244,70,9)" fg:x="55450" fg:w="98"/><text x="26.8357%" y="63.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (528 samples, 0.25%)</title><rect x="27.1548%" y="85" width="0.2532%" height="15" fill="rgb(217,125,39)" fg:x="56637" fg:w="528"/><text x="27.4048%" y="95.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (528 samples, 0.25%)</title><rect x="27.1548%" y="69" width="0.2532%" height="15" fill="rgb(235,36,10)" fg:x="56637" fg:w="528"/><text x="27.4048%" y="79.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (528 samples, 0.25%)</title><rect x="27.1548%" y="53" width="0.2532%" height="15" fill="rgb(251,123,47)" fg:x="56637" fg:w="528"/><text x="27.4048%" y="63.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (220 samples, 0.11%)</title><rect x="27.4079%" y="85" width="0.1055%" height="15" fill="rgb(221,13,13)" fg:x="57165" fg:w="220"/><text x="27.6579%" y="95.50"></text></g><g><title>core::num::&lt;impl u32&gt;::from_be_bytes (1,063 samples, 0.51%)</title><rect x="27.5144%" y="85" width="0.5097%" height="15" fill="rgb(238,131,9)" fg:x="57387" fg:w="1063"/><text x="27.7644%" y="95.50"></text></g><g><title>core::num::&lt;impl u32&gt;::from_be (1,063 samples, 0.51%)</title><rect x="27.5144%" y="69" width="0.5097%" height="15" fill="rgb(211,50,8)" fg:x="57387" fg:w="1063"/><text x="27.7644%" y="79.50"></text></g><g><title>core::num::&lt;impl u32&gt;::swap_bytes (1,063 samples, 0.51%)</title><rect x="27.5144%" y="53" width="0.5097%" height="15" fill="rgb(245,182,24)" fg:x="57387" fg:w="1063"/><text x="27.7644%" y="63.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (232 samples, 0.11%)</title><rect x="28.0240%" y="69" width="0.1112%" height="15" fill="rgb(242,14,37)" fg:x="58450" fg:w="232"/><text x="28.2740%" y="79.50"></text></g><g><title>sha1::compress::soft::add (4,263 samples, 2.04%)</title><rect x="28.1353%" y="53" width="2.0439%" height="15" fill="rgb(246,228,12)" fg:x="58682" fg:w="4263"/><text x="28.3853%" y="63.50">s..</text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (4,263 samples, 2.04%)</title><rect x="28.1353%" y="37" width="2.0439%" height="15" fill="rgb(213,55,15)" fg:x="58682" fg:w="4263"/><text x="28.3853%" y="47.50">c..</text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (1,954 samples, 0.94%)</title><rect x="31.2718%" y="37" width="0.9369%" height="15" fill="rgb(209,9,3)" fg:x="65224" fg:w="1954"/><text x="31.5218%" y="47.50"></text></g><g><title>sha1::compress::soft::sha1rnds4c (5,905 samples, 2.83%)</title><rect x="30.1792%" y="53" width="2.8312%" height="15" fill="rgb(230,59,30)" fg:x="62945" fg:w="5905"/><text x="30.4292%" y="63.50">sh..</text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (1,672 samples, 0.80%)</title><rect x="32.2087%" y="37" width="0.8016%" height="15" fill="rgb(209,121,21)" fg:x="67178" fg:w="1672"/><text x="32.4587%" y="47.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (1,473 samples, 0.71%)</title><rect x="34.9023%" y="37" width="0.7062%" height="15" fill="rgb(220,109,13)" fg:x="72796" fg:w="1473"/><text x="35.1523%" y="47.50"></text></g><g><title>sha1::compress::soft::sha1rnds4m (7,480 samples, 3.59%)</title><rect x="33.0103%" y="53" width="3.5863%" height="15" fill="rgb(232,18,1)" fg:x="68850" fg:w="7480"/><text x="33.2603%" y="63.50">sha1..</text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (2,061 samples, 0.99%)</title><rect x="35.6085%" y="37" width="0.9882%" height="15" fill="rgb(215,41,42)" fg:x="74269" fg:w="2061"/><text x="35.8585%" y="47.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (3,541 samples, 1.70%)</title><rect x="38.4425%" y="37" width="1.6977%" height="15" fill="rgb(224,123,36)" fg:x="80180" fg:w="3541"/><text x="38.6925%" y="47.50"></text></g><g><title>sha1::compress::soft::sha1_digest_round_x4 (29,925 samples, 14.35%)</title><rect x="28.1353%" y="69" width="14.3476%" height="15" fill="rgb(240,125,3)" fg:x="58682" fg:w="29925"/><text x="28.3853%" y="79.50">sha1::compress::soft::..</text></g><g><title>sha1::compress::soft::sha1rnds4p (12,277 samples, 5.89%)</title><rect x="36.5967%" y="53" width="5.8862%" height="15" fill="rgb(205,98,50)" fg:x="76330" fg:w="12277"/><text x="36.8467%" y="63.50">sha1::c..</text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (4,886 samples, 2.34%)</title><rect x="40.1403%" y="37" width="2.3426%" height="15" fill="rgb(205,185,37)" fg:x="83721" fg:w="4886"/><text x="40.3903%" y="47.50">c..</text></g><g><title>sha1::compress::soft::sha1_first_half (485 samples, 0.23%)</title><rect x="42.4829%" y="69" width="0.2325%" height="15" fill="rgb(238,207,15)" fg:x="88607" fg:w="485"/><text x="42.7329%" y="79.50"></text></g><g><title>sha1::compress::soft::sha1_first_add (485 samples, 0.23%)</title><rect x="42.4829%" y="53" width="0.2325%" height="15" fill="rgb(213,199,42)" fg:x="88607" fg:w="485"/><text x="42.7329%" y="63.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (485 samples, 0.23%)</title><rect x="42.4829%" y="37" width="0.2325%" height="15" fill="rgb(235,201,11)" fg:x="88607" fg:w="485"/><text x="42.7329%" y="47.50"></text></g><g><title>sha1::compress::soft::sha1msg1 (1,751 samples, 0.84%)</title><rect x="42.7154%" y="69" width="0.8395%" height="15" fill="rgb(207,46,11)" fg:x="89092" fg:w="1751"/><text x="42.9654%" y="79.50"></text></g><g><title>sha1::compress::soft::sha1msg2 (8,107 samples, 3.89%)</title><rect x="43.5550%" y="69" width="3.8869%" height="15" fill="rgb(241,35,35)" fg:x="90843" fg:w="8107"/><text x="43.8050%" y="79.50">sha1..</text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (6,420 samples, 3.08%)</title><rect x="44.3638%" y="53" width="3.0781%" height="15" fill="rgb(243,32,47)" fg:x="92530" fg:w="6420"/><text x="44.6138%" y="63.50">cor..</text></g><g><title>&lt;sha1::Sha1Core as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core::{{closure}} (46,336 samples, 22.22%)</title><rect x="26.4251%" y="117" width="22.2159%" height="15" fill="rgb(247,202,23)" fg:x="55115" fg:w="46336"/><text x="26.6751%" y="127.50">&lt;sha1::Sha1Core as digest::core_api..</text></g><g><title>sha1::compress::soft::compress (45,903 samples, 22.01%)</title><rect x="26.6327%" y="101" width="22.0083%" height="15" fill="rgb(219,102,11)" fg:x="55548" fg:w="45903"/><text x="26.8827%" y="111.50">sha1::compress::soft::compress</text></g><g><title>sha1::compress::soft::sha1_digest_block_u32 (43,001 samples, 20.62%)</title><rect x="28.0240%" y="85" width="20.6170%" height="15" fill="rgb(243,110,44)" fg:x="58450" fg:w="43001"/><text x="28.2740%" y="95.50">sha1::compress::soft::sha1_diges..</text></g><g><title>sha1::compress::soft::xor (2,501 samples, 1.20%)</title><rect x="47.4419%" y="69" width="1.1991%" height="15" fill="rgb(222,74,54)" fg:x="98950" fg:w="2501"/><text x="47.6919%" y="79.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::len64_padding_be (46,526 samples, 22.31%)</title><rect x="26.3589%" y="149" width="22.3070%" height="15" fill="rgb(216,99,12)" fg:x="54977" fg:w="46526"/><text x="26.6089%" y="159.50">block_buffer::BlockBuffer&lt;BlockSize..</text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::digest_pad (46,526 samples, 22.31%)</title><rect x="26.3589%" y="133" width="22.3070%" height="15" fill="rgb(226,22,26)" fg:x="54977" fg:w="46526"/><text x="26.6089%" y="143.50">block_buffer::BlockBuffer&lt;BlockSize..</text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (52 samples, 0.02%)</title><rect x="48.6410%" y="117" width="0.0249%" height="15" fill="rgb(217,163,10)" fg:x="101451" fg:w="52"/><text x="48.8910%" y="127.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (52 samples, 0.02%)</title><rect x="48.6410%" y="101" width="0.0249%" height="15" fill="rgb(213,25,53)" fg:x="101451" fg:w="52"/><text x="48.8910%" y="111.50"></text></g><g><title>&lt;sha1::Sha1Core as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (49,034 samples, 23.51%)</title><rect x="26.1709%" y="165" width="23.5095%" height="15" fill="rgb(252,105,26)" fg:x="54585" fg:w="49034"/><text x="26.4209%" y="175.50">&lt;sha1::Sha1Core as digest::core_api::..</text></g><g><title>core::num::&lt;impl u32&gt;::to_be_bytes (2,116 samples, 1.01%)</title><rect x="48.6659%" y="149" width="1.0145%" height="15" fill="rgb(220,39,43)" fg:x="101503" fg:w="2116"/><text x="48.9159%" y="159.50"></text></g><g><title>core::num::&lt;impl u32&gt;::to_be (2,116 samples, 1.01%)</title><rect x="48.6659%" y="133" width="1.0145%" height="15" fill="rgb(229,68,48)" fg:x="101503" fg:w="2116"/><text x="48.9159%" y="143.50"></text></g><g><title>core::num::&lt;impl u32&gt;::swap_bytes (2,116 samples, 1.01%)</title><rect x="48.6659%" y="117" width="1.0145%" height="15" fill="rgb(252,8,32)" fg:x="101503" fg:w="2116"/><text x="48.9159%" y="127.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::FixedOutput&gt;::finalize_into (49,092 samples, 23.54%)</title><rect x="26.1700%" y="197" width="23.5373%" height="15" fill="rgb(223,20,43)" fg:x="54583" fg:w="49092"/><text x="26.4200%" y="207.50">&lt;digest::core_api::wrapper::CoreWrapp..</text></g><g><title>&lt;hmac::optim::HmacCore&lt;D&gt; as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (49,092 samples, 23.54%)</title><rect x="26.1700%" y="181" width="23.5373%" height="15" fill="rgb(229,81,49)" fg:x="54583" fg:w="49092"/><text x="26.4200%" y="191.50">&lt;hmac::optim::HmacCore&lt;D&gt; as digest::..</text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,Kind&gt;::digest_blocks (56 samples, 0.03%)</title><rect x="49.6804%" y="165" width="0.0268%" height="15" fill="rgb(236,28,36)" fg:x="103619" fg:w="56"/><text x="49.9304%" y="175.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (56 samples, 0.03%)</title><rect x="49.6804%" y="149" width="0.0268%" height="15" fill="rgb(249,185,26)" fg:x="103619" fg:w="56"/><text x="49.9304%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (56 samples, 0.03%)</title><rect x="49.6804%" y="133" width="0.0268%" height="15" fill="rgb(249,174,33)" fg:x="103619" fg:w="56"/><text x="49.9304%" y="143.50"></text></g><g><title>digest::FixedOutput::finalize_fixed (50,243 samples, 24.09%)</title><rect x="25.6229%" y="213" width="24.0892%" height="15" fill="rgb(233,201,37)" fg:x="53442" fg:w="50243"/><text x="25.8729%" y="223.50">digest::FixedOutput::finalize_fixed</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (306 samples, 0.15%)</title><rect x="49.8008%" y="165" width="0.1467%" height="15" fill="rgb(221,78,26)" fg:x="103870" fg:w="306"/><text x="50.0508%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (306 samples, 0.15%)</title><rect x="49.8008%" y="149" width="0.1467%" height="15" fill="rgb(250,127,30)" fg:x="103870" fg:w="306"/><text x="50.0508%" y="159.50"></text></g><g><title>pbkdf2::pbkdf2 (51,465 samples, 24.68%)</title><rect x="25.4796%" y="245" width="24.6751%" height="15" fill="rgb(230,49,44)" fg:x="53143" fg:w="51465"/><text x="25.7296%" y="255.50">pbkdf2::pbkdf2</text></g><g><title>pbkdf2::pbkdf2_body (51,445 samples, 24.67%)</title><rect x="25.4892%" y="229" width="24.6655%" height="15" fill="rgb(229,67,23)" fg:x="53163" fg:w="51445"/><text x="25.7392%" y="239.50">pbkdf2::pbkdf2_body</text></g><g><title>pbkdf2::xor (923 samples, 0.44%)</title><rect x="49.7121%" y="213" width="0.4425%" height="15" fill="rgb(249,83,47)" fg:x="103685" fg:w="923"/><text x="49.9621%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (923 samples, 0.44%)</title><rect x="49.7121%" y="197" width="0.4425%" height="15" fill="rgb(215,43,3)" fg:x="103685" fg:w="923"/><text x="49.9621%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (923 samples, 0.44%)</title><rect x="49.7121%" y="181" width="0.4425%" height="15" fill="rgb(238,154,13)" fg:x="103685" fg:w="923"/><text x="49.9621%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (432 samples, 0.21%)</title><rect x="49.9475%" y="165" width="0.2071%" height="15" fill="rgb(219,56,2)" fg:x="104176" fg:w="432"/><text x="50.1975%" y="175.50"></text></g><g><title>pbkdf2::xor::{{closure}} (432 samples, 0.21%)</title><rect x="49.9475%" y="149" width="0.2071%" height="15" fill="rgb(233,0,4)" fg:x="104176" fg:w="432"/><text x="50.1975%" y="159.50"></text></g><g><title>&lt;u8 as core::ops::bit::BitXorAssign&lt;&amp;u8&gt;&gt;::bitxor_assign (432 samples, 0.21%)</title><rect x="49.9475%" y="133" width="0.2071%" height="15" fill="rgb(235,30,7)" fg:x="104176" fg:w="432"/><text x="50.1975%" y="143.50"></text></g><g><title>&lt;u8 as core::ops::bit::BitXorAssign&gt;::bitxor_assign (432 samples, 0.21%)</title><rect x="49.9475%" y="117" width="0.2071%" height="15" fill="rgb(250,79,13)" fg:x="104176" fg:w="432"/><text x="50.1975%" y="127.50"></text></g><g><title>clone3 (51,496 samples, 24.69%)</title><rect x="25.4652%" y="469" width="24.6899%" height="15" fill="rgb(211,146,34)" fg:x="53113" fg:w="51496"/><text x="25.7152%" y="479.50">clone3</text></g><g><title>start_thread (51,496 samples, 24.69%)</title><rect x="25.4652%" y="453" width="24.6899%" height="15" fill="rgb(228,22,38)" fg:x="53113" fg:w="51496"/><text x="25.7152%" y="463.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (51,496 samples, 24.69%)</title><rect x="25.4652%" y="437" width="24.6899%" height="15" fill="rgb(235,168,5)" fg:x="53113" fg:w="51496"/><text x="25.7152%" y="447.50">std::sys::unix::thread::Thread::new::th..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (51,496 samples, 24.69%)</title><rect x="25.4652%" y="421" width="24.6899%" height="15" fill="rgb(221,155,16)" fg:x="53113" fg:w="51496"/><text x="25.7152%" y="431.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::f..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (51,496 samples, 24.69%)</title><rect x="25.4652%" y="405" width="24.6899%" height="15" fill="rgb(215,215,53)" fg:x="53113" fg:w="51496"/><text x="25.7152%" y="415.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::f..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (51,496 samples, 24.69%)</title><rect x="25.4652%" y="389" width="24.6899%" height="15" fill="rgb(223,4,10)" fg:x="53113" fg:w="51496"/><text x="25.7152%" y="399.50">core::ops::function::FnOnce::call_once{..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (51,496 samples, 24.69%)</title><rect x="25.4652%" y="373" width="24.6899%" height="15" fill="rgb(234,103,6)" fg:x="53113" fg:w="51496"/><text x="25.7152%" y="383.50">std::thread::Builder::spawn_unchecked_:..</text></g><g><title>std::panic::catch_unwind (51,496 samples, 24.69%)</title><rect x="25.4652%" y="357" width="24.6899%" height="15" fill="rgb(227,97,0)" fg:x="53113" fg:w="51496"/><text x="25.7152%" y="367.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (51,496 samples, 24.69%)</title><rect x="25.4652%" y="341" width="24.6899%" height="15" fill="rgb(234,150,53)" fg:x="53113" fg:w="51496"/><text x="25.7152%" y="351.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (51,496 samples, 24.69%)</title><rect x="25.4652%" y="325" width="24.6899%" height="15" fill="rgb(228,201,54)" fg:x="53113" fg:w="51496"/><text x="25.7152%" y="335.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (51,496 samples, 24.69%)</title><rect x="25.4652%" y="309" width="24.6899%" height="15" fill="rgb(222,22,37)" fg:x="53113" fg:w="51496"/><text x="25.7152%" y="319.50">&lt;core::panic::unwind_safe::AssertUnwind..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (51,496 samples, 24.69%)</title><rect x="25.4652%" y="293" width="24.6899%" height="15" fill="rgb(237,53,32)" fg:x="53113" fg:w="51496"/><text x="25.7152%" y="303.50">std::thread::Builder::spawn_unchecked_:..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (51,496 samples, 24.69%)</title><rect x="25.4652%" y="277" width="24.6899%" height="15" fill="rgb(233,25,53)" fg:x="53113" fg:w="51496"/><text x="25.7152%" y="287.50">std::sys_common::backtrace::__rust_begi..</text></g><g><title>zip_password_finder::password_worker::password_checker::{{closure}} (51,496 samples, 24.69%)</title><rect x="25.4652%" y="261" width="24.6899%" height="15" fill="rgb(210,40,34)" fg:x="53113" fg:w="51496"/><text x="25.7152%" y="271.50">zip_password_finder::password_worker::p..</text></g><g><title>worker-2 (52,304 samples, 25.08%)</title><rect x="25.1416%" y="485" width="25.0773%" height="15" fill="rgb(241,220,44)" fg:x="52438" fg:w="52304"/><text x="25.3916%" y="495.50">worker-2</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (133 samples, 0.06%)</title><rect x="50.1551%" y="469" width="0.0638%" height="15" fill="rgb(235,28,35)" fg:x="104609" fg:w="133"/><text x="50.4051%" y="479.50"></text></g><g><title>zip_password_finder::password_worker::password_checker::{{closure}} (133 samples, 0.06%)</title><rect x="50.1551%" y="453" width="0.0638%" height="15" fill="rgb(210,56,17)" fg:x="104609" fg:w="133"/><text x="50.4051%" y="463.50"></text></g><g><title>pbkdf2::pbkdf2 (133 samples, 0.06%)</title><rect x="50.1551%" y="437" width="0.0638%" height="15" fill="rgb(224,130,29)" fg:x="104609" fg:w="133"/><text x="50.4051%" y="447.50"></text></g><g><title>pbkdf2::pbkdf2_body (133 samples, 0.06%)</title><rect x="50.1551%" y="421" width="0.0638%" height="15" fill="rgb(235,212,8)" fg:x="104609" fg:w="133"/><text x="50.4051%" y="431.50"></text></g><g><title>digest::FixedOutput::finalize_fixed (133 samples, 0.06%)</title><rect x="50.1551%" y="405" width="0.0638%" height="15" fill="rgb(223,33,50)" fg:x="104609" fg:w="133"/><text x="50.4051%" y="415.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::FixedOutput&gt;::finalize_into (133 samples, 0.06%)</title><rect x="50.1551%" y="389" width="0.0638%" height="15" fill="rgb(219,149,13)" fg:x="104609" fg:w="133"/><text x="50.4051%" y="399.50"></text></g><g><title>&lt;hmac::optim::HmacCore&lt;D&gt; as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (133 samples, 0.06%)</title><rect x="50.1551%" y="373" width="0.0638%" height="15" fill="rgb(250,156,29)" fg:x="104609" fg:w="133"/><text x="50.4051%" y="383.50"></text></g><g><title>&lt;sha1::Sha1Core as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (133 samples, 0.06%)</title><rect x="50.1551%" y="357" width="0.0638%" height="15" fill="rgb(216,193,19)" fg:x="104609" fg:w="133"/><text x="50.4051%" y="367.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::len64_padding_be (133 samples, 0.06%)</title><rect x="50.1551%" y="341" width="0.0638%" height="15" fill="rgb(216,135,14)" fg:x="104609" fg:w="133"/><text x="50.4051%" y="351.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::digest_pad (133 samples, 0.06%)</title><rect x="50.1551%" y="325" width="0.0638%" height="15" fill="rgb(241,47,5)" fg:x="104609" fg:w="133"/><text x="50.4051%" y="335.50"></text></g><g><title>&lt;sha1::Sha1Core as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core::{{closure}} (132 samples, 0.06%)</title><rect x="50.1556%" y="309" width="0.0633%" height="15" fill="rgb(233,42,35)" fg:x="104610" fg:w="132"/><text x="50.4056%" y="319.50"></text></g><g><title>sha1::compress::compress (113 samples, 0.05%)</title><rect x="50.2189%" y="453" width="0.0542%" height="15" fill="rgb(231,13,6)" fg:x="104742" fg:w="113"/><text x="50.4689%" y="463.50"></text></g><g><title>[anon] (372 samples, 0.18%)</title><rect x="50.2189%" y="469" width="0.1784%" height="15" fill="rgb(207,181,40)" fg:x="104742" fg:w="372"/><text x="50.4689%" y="479.50"></text></g><g><title>sha1::compress::soft::compress (259 samples, 0.12%)</title><rect x="50.2730%" y="453" width="0.1242%" height="15" fill="rgb(254,173,49)" fg:x="104855" fg:w="259"/><text x="50.5230%" y="463.50"></text></g><g><title>sha1::compress::compress (116 samples, 0.06%)</title><rect x="50.3977%" y="453" width="0.0556%" height="15" fill="rgb(221,1,38)" fg:x="105115" fg:w="116"/><text x="50.6477%" y="463.50"></text></g><g><title>sha1::compress::x86::compress (116 samples, 0.06%)</title><rect x="50.3977%" y="437" width="0.0556%" height="15" fill="rgb(206,124,46)" fg:x="105115" fg:w="116"/><text x="50.6477%" y="447.50"></text></g><g><title>[unknown] (342 samples, 0.16%)</title><rect x="50.3972%" y="469" width="0.1640%" height="15" fill="rgb(249,21,11)" fg:x="105114" fg:w="342"/><text x="50.6472%" y="479.50"></text></g><g><title>sha1::compress::soft::compress (225 samples, 0.11%)</title><rect x="50.4533%" y="453" width="0.1079%" height="15" fill="rgb(222,201,40)" fg:x="105231" fg:w="225"/><text x="50.7033%" y="463.50"></text></g><g><title>sha1::compress::soft::sha1_digest_round_x4 (22 samples, 0.01%)</title><rect x="50.5746%" y="149" width="0.0105%" height="15" fill="rgb(235,61,29)" fg:x="105484" fg:w="22"/><text x="50.8246%" y="159.50"></text></g><g><title>&lt;sha1::Sha1Core as digest::core_api::UpdateCore&gt;::update_blocks (34 samples, 0.02%)</title><rect x="50.5732%" y="197" width="0.0163%" height="15" fill="rgb(219,207,3)" fg:x="105481" fg:w="34"/><text x="50.8232%" y="207.50"></text></g><g><title>sha1::compress::soft::compress (34 samples, 0.02%)</title><rect x="50.5732%" y="181" width="0.0163%" height="15" fill="rgb(222,56,46)" fg:x="105481" fg:w="34"/><text x="50.8232%" y="191.50"></text></g><g><title>sha1::compress::soft::sha1_digest_block_u32 (31 samples, 0.01%)</title><rect x="50.5746%" y="165" width="0.0149%" height="15" fill="rgb(239,76,54)" fg:x="105484" fg:w="31"/><text x="50.8246%" y="175.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as crypto_common::KeyInit&gt;::new_from_slice (35 samples, 0.02%)</title><rect x="50.5732%" y="229" width="0.0168%" height="15" fill="rgb(231,124,27)" fg:x="105481" fg:w="35"/><text x="50.8232%" y="239.50"></text></g><g><title>&lt;hmac::optim::HmacCore&lt;D&gt; as crypto_common::KeyInit&gt;::new_from_slice (35 samples, 0.02%)</title><rect x="50.5732%" y="213" width="0.0168%" height="15" fill="rgb(249,195,6)" fg:x="105481" fg:w="35"/><text x="50.8232%" y="223.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as core::clone::Clone&gt;::clone (124 samples, 0.06%)</title><rect x="50.6360%" y="213" width="0.0595%" height="15" fill="rgb(237,174,47)" fg:x="105612" fg:w="124"/><text x="50.8860%" y="223.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::Update&gt;::update (63 samples, 0.03%)</title><rect x="50.6954%" y="213" width="0.0302%" height="15" fill="rgb(206,201,31)" fg:x="105736" fg:w="63"/><text x="50.9454%" y="223.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,Kind&gt;::digest_blocks (63 samples, 0.03%)</title><rect x="50.6954%" y="197" width="0.0302%" height="15" fill="rgb(231,57,52)" fg:x="105736" fg:w="63"/><text x="50.9454%" y="207.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (57 samples, 0.03%)</title><rect x="50.6983%" y="181" width="0.0273%" height="15" fill="rgb(248,177,22)" fg:x="105742" fg:w="57"/><text x="50.9483%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (57 samples, 0.03%)</title><rect x="50.6983%" y="165" width="0.0273%" height="15" fill="rgb(215,211,37)" fg:x="105742" fg:w="57"/><text x="50.9483%" y="175.50"></text></g><g><title>sha1::compress::compress (343 samples, 0.16%)</title><rect x="51.5987%" y="101" width="0.1645%" height="15" fill="rgb(241,128,51)" fg:x="107620" fg:w="343"/><text x="51.8487%" y="111.50"></text></g><g><title>sha1::compress::x86::compress (238 samples, 0.11%)</title><rect x="51.6491%" y="85" width="0.1141%" height="15" fill="rgb(227,165,31)" fg:x="107725" fg:w="238"/><text x="51.8991%" y="95.50"></text></g><g><title>sha1::compress::x86::shani_cpuid::get (126 samples, 0.06%)</title><rect x="51.7028%" y="69" width="0.0604%" height="15" fill="rgb(228,167,24)" fg:x="107837" fg:w="126"/><text x="51.9528%" y="79.50"></text></g><g><title>sha1::compress::x86::shani_cpuid::init_get (126 samples, 0.06%)</title><rect x="51.7028%" y="53" width="0.0604%" height="15" fill="rgb(228,143,12)" fg:x="107837" fg:w="126"/><text x="51.9528%" y="63.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (543 samples, 0.26%)</title><rect x="52.3026%" y="85" width="0.2603%" height="15" fill="rgb(249,149,8)" fg:x="109088" fg:w="543"/><text x="52.5526%" y="95.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (543 samples, 0.26%)</title><rect x="52.3026%" y="69" width="0.2603%" height="15" fill="rgb(243,35,44)" fg:x="109088" fg:w="543"/><text x="52.5526%" y="79.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (543 samples, 0.26%)</title><rect x="52.3026%" y="53" width="0.2603%" height="15" fill="rgb(246,89,9)" fg:x="109088" fg:w="543"/><text x="52.5526%" y="63.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (243 samples, 0.12%)</title><rect x="52.5629%" y="85" width="0.1165%" height="15" fill="rgb(233,213,13)" fg:x="109631" fg:w="243"/><text x="52.8129%" y="95.50"></text></g><g><title>core::num::&lt;impl u32&gt;::from_be_bytes (1,011 samples, 0.48%)</title><rect x="52.6799%" y="85" width="0.4847%" height="15" fill="rgb(233,141,41)" fg:x="109875" fg:w="1011"/><text x="52.9299%" y="95.50"></text></g><g><title>core::num::&lt;impl u32&gt;::from_be (1,011 samples, 0.48%)</title><rect x="52.6799%" y="69" width="0.4847%" height="15" fill="rgb(239,167,4)" fg:x="109875" fg:w="1011"/><text x="52.9299%" y="79.50"></text></g><g><title>core::num::&lt;impl u32&gt;::swap_bytes (1,011 samples, 0.48%)</title><rect x="52.6799%" y="53" width="0.4847%" height="15" fill="rgb(209,217,16)" fg:x="109875" fg:w="1011"/><text x="52.9299%" y="63.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (243 samples, 0.12%)</title><rect x="53.1646%" y="69" width="0.1165%" height="15" fill="rgb(219,88,35)" fg:x="110886" fg:w="243"/><text x="53.4146%" y="79.50"></text></g><g><title>sha1::compress::soft::add (4,238 samples, 2.03%)</title><rect x="53.2811%" y="53" width="2.0319%" height="15" fill="rgb(220,193,23)" fg:x="111129" fg:w="4238"/><text x="53.5311%" y="63.50">s..</text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (4,238 samples, 2.03%)</title><rect x="53.2811%" y="37" width="2.0319%" height="15" fill="rgb(230,90,52)" fg:x="111129" fg:w="4238"/><text x="53.5311%" y="47.50">c..</text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (1,796 samples, 0.86%)</title><rect x="56.3703%" y="37" width="0.8611%" height="15" fill="rgb(252,106,19)" fg:x="117572" fg:w="1796"/><text x="56.6203%" y="47.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (1,644 samples, 0.79%)</title><rect x="57.2314%" y="37" width="0.7882%" height="15" fill="rgb(206,74,20)" fg:x="119368" fg:w="1644"/><text x="57.4814%" y="47.50"></text></g><g><title>sha1::compress::soft::sha1rnds4c (5,647 samples, 2.71%)</title><rect x="55.3131%" y="53" width="2.7075%" height="15" fill="rgb(230,138,44)" fg:x="115367" fg:w="5647"/><text x="55.5631%" y="63.50">sh..</text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (1,486 samples, 0.71%)</title><rect x="59.9148%" y="37" width="0.7125%" height="15" fill="rgb(235,182,43)" fg:x="124965" fg:w="1486"/><text x="60.1648%" y="47.50"></text></g><g><title>sha1::compress::soft::sha1rnds4m (7,477 samples, 3.58%)</title><rect x="58.0205%" y="53" width="3.5849%" height="15" fill="rgb(242,16,51)" fg:x="121014" fg:w="7477"/><text x="58.2705%" y="63.50">sha1..</text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (2,040 samples, 0.98%)</title><rect x="60.6273%" y="37" width="0.9781%" height="15" fill="rgb(248,9,4)" fg:x="126451" fg:w="2040"/><text x="60.8773%" y="47.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (3,615 samples, 1.73%)</title><rect x="63.4201%" y="37" width="1.7332%" height="15" fill="rgb(210,31,22)" fg:x="132276" fg:w="3615"/><text x="63.6701%" y="47.50"></text></g><g><title>sha1::compress::soft::sha1_digest_round_x4 (29,625 samples, 14.20%)</title><rect x="53.2811%" y="69" width="14.2038%" height="15" fill="rgb(239,54,39)" fg:x="111129" fg:w="29625"/><text x="53.5311%" y="79.50">sha1::compress::soft::..</text></g><g><title>sha1::compress::soft::sha1rnds4p (12,263 samples, 5.88%)</title><rect x="61.6054%" y="53" width="5.8795%" height="15" fill="rgb(230,99,41)" fg:x="128491" fg:w="12263"/><text x="61.8554%" y="63.50">sha1::c..</text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (4,863 samples, 2.33%)</title><rect x="65.1534%" y="37" width="2.3316%" height="15" fill="rgb(253,106,12)" fg:x="135891" fg:w="4863"/><text x="65.4034%" y="47.50">c..</text></g><g><title>sha1::compress::soft::sha1_first_half (460 samples, 0.22%)</title><rect x="67.4849%" y="69" width="0.2205%" height="15" fill="rgb(213,46,41)" fg:x="140754" fg:w="460"/><text x="67.7349%" y="79.50"></text></g><g><title>sha1::compress::soft::sha1_first_add (460 samples, 0.22%)</title><rect x="67.4849%" y="53" width="0.2205%" height="15" fill="rgb(215,133,35)" fg:x="140754" fg:w="460"/><text x="67.7349%" y="63.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (460 samples, 0.22%)</title><rect x="67.4849%" y="37" width="0.2205%" height="15" fill="rgb(213,28,5)" fg:x="140754" fg:w="460"/><text x="67.7349%" y="47.50"></text></g><g><title>sha1::compress::soft::sha1msg1 (1,839 samples, 0.88%)</title><rect x="67.7055%" y="69" width="0.8817%" height="15" fill="rgb(215,77,49)" fg:x="141214" fg:w="1839"/><text x="67.9555%" y="79.50"></text></g><g><title>sha1::compress::soft::sha1msg2 (8,105 samples, 3.89%)</title><rect x="68.5872%" y="69" width="3.8860%" height="15" fill="rgb(248,100,22)" fg:x="143053" fg:w="8105"/><text x="68.8372%" y="79.50">sha1..</text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (6,466 samples, 3.10%)</title><rect x="69.3730%" y="53" width="3.1001%" height="15" fill="rgb(208,67,9)" fg:x="144692" fg:w="6466"/><text x="69.6230%" y="63.50">cor..</text></g><g><title>&lt;sha1::Sha1Core as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core::{{closure}} (46,113 samples, 22.11%)</title><rect x="51.5412%" y="117" width="22.1090%" height="15" fill="rgb(219,133,21)" fg:x="107500" fg:w="46113"/><text x="51.7912%" y="127.50">&lt;sha1::Sha1Core as digest::core_api..</text></g><g><title>sha1::compress::soft::compress (45,650 samples, 21.89%)</title><rect x="51.7632%" y="101" width="21.8870%" height="15" fill="rgb(246,46,29)" fg:x="107963" fg:w="45650"/><text x="52.0132%" y="111.50">sha1::compress::soft::compress</text></g><g><title>sha1::compress::soft::sha1_digest_block_u32 (42,727 samples, 20.49%)</title><rect x="53.1646%" y="85" width="20.4856%" height="15" fill="rgb(246,185,52)" fg:x="110886" fg:w="42727"/><text x="53.4146%" y="95.50">sha1::compress::soft::sha1_diges..</text></g><g><title>sha1::compress::soft::xor (2,455 samples, 1.18%)</title><rect x="72.4732%" y="69" width="1.1771%" height="15" fill="rgb(252,136,11)" fg:x="151158" fg:w="2455"/><text x="72.7232%" y="79.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::len64_padding_be (46,276 samples, 22.19%)</title><rect x="51.4851%" y="149" width="22.1872%" height="15" fill="rgb(219,138,53)" fg:x="107383" fg:w="46276"/><text x="51.7351%" y="159.50">block_buffer::BlockBuffer&lt;BlockSize..</text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::digest_pad (46,276 samples, 22.19%)</title><rect x="51.4851%" y="133" width="22.1872%" height="15" fill="rgb(211,51,23)" fg:x="107383" fg:w="46276"/><text x="51.7351%" y="143.50">block_buffer::BlockBuffer&lt;BlockSize..</text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (46 samples, 0.02%)</title><rect x="73.6502%" y="117" width="0.0221%" height="15" fill="rgb(247,221,28)" fg:x="153613" fg:w="46"/><text x="73.9002%" y="127.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (46 samples, 0.02%)</title><rect x="73.6502%" y="101" width="0.0221%" height="15" fill="rgb(251,222,45)" fg:x="153613" fg:w="46"/><text x="73.9002%" y="111.50"></text></g><g><title>&lt;sha1::Sha1Core as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (48,859 samples, 23.43%)</title><rect x="51.2780%" y="165" width="23.4256%" height="15" fill="rgb(217,162,53)" fg:x="106951" fg:w="48859"/><text x="51.5280%" y="175.50">&lt;sha1::Sha1Core as digest::core_api::..</text></g><g><title>core::num::&lt;impl u32&gt;::to_be_bytes (2,151 samples, 1.03%)</title><rect x="73.6723%" y="149" width="1.0313%" height="15" fill="rgb(229,93,14)" fg:x="153659" fg:w="2151"/><text x="73.9223%" y="159.50"></text></g><g><title>core::num::&lt;impl u32&gt;::to_be (2,151 samples, 1.03%)</title><rect x="73.6723%" y="133" width="1.0313%" height="15" fill="rgb(209,67,49)" fg:x="153659" fg:w="2151"/><text x="73.9223%" y="143.50"></text></g><g><title>core::num::&lt;impl u32&gt;::swap_bytes (2,151 samples, 1.03%)</title><rect x="73.6723%" y="117" width="1.0313%" height="15" fill="rgb(213,87,29)" fg:x="153659" fg:w="2151"/><text x="73.9223%" y="127.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::FixedOutput&gt;::finalize_into (48,913 samples, 23.45%)</title><rect x="51.2780%" y="197" width="23.4515%" height="15" fill="rgb(205,151,52)" fg:x="106951" fg:w="48913"/><text x="51.5280%" y="207.50">&lt;digest::core_api::wrapper::CoreWrapp..</text></g><g><title>&lt;hmac::optim::HmacCore&lt;D&gt; as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (48,913 samples, 23.45%)</title><rect x="51.2780%" y="181" width="23.4515%" height="15" fill="rgb(253,215,39)" fg:x="106951" fg:w="48913"/><text x="51.5280%" y="191.50">&lt;hmac::optim::HmacCore&lt;D&gt; as digest::..</text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,Kind&gt;::digest_blocks (54 samples, 0.03%)</title><rect x="74.7036%" y="165" width="0.0259%" height="15" fill="rgb(221,220,41)" fg:x="155810" fg:w="54"/><text x="74.9536%" y="175.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (54 samples, 0.03%)</title><rect x="74.7036%" y="149" width="0.0259%" height="15" fill="rgb(218,133,21)" fg:x="155810" fg:w="54"/><text x="74.9536%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (54 samples, 0.03%)</title><rect x="74.7036%" y="133" width="0.0259%" height="15" fill="rgb(221,193,43)" fg:x="155810" fg:w="54"/><text x="74.9536%" y="143.50"></text></g><g><title>digest::FixedOutput::finalize_fixed (50,067 samples, 24.00%)</title><rect x="50.7276%" y="213" width="24.0048%" height="15" fill="rgb(240,128,52)" fg:x="105803" fg:w="50067"/><text x="50.9776%" y="223.50">digest::FixedOutput::finalize_fixed</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (312 samples, 0.15%)</title><rect x="74.8278%" y="165" width="0.1496%" height="15" fill="rgb(253,114,12)" fg:x="156069" fg:w="312"/><text x="75.0778%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (312 samples, 0.15%)</title><rect x="74.8278%" y="149" width="0.1496%" height="15" fill="rgb(215,223,47)" fg:x="156069" fg:w="312"/><text x="75.0778%" y="159.50"></text></g><g><title>pbkdf2::pbkdf2 (51,331 samples, 24.61%)</title><rect x="50.5727%" y="245" width="24.6108%" height="15" fill="rgb(248,225,23)" fg:x="105480" fg:w="51331"/><text x="50.8227%" y="255.50">pbkdf2::pbkdf2</text></g><g><title>pbkdf2::pbkdf2_body (51,295 samples, 24.59%)</title><rect x="50.5900%" y="229" width="24.5935%" height="15" fill="rgb(250,108,0)" fg:x="105516" fg:w="51295"/><text x="50.8400%" y="239.50">pbkdf2::pbkdf2_body</text></g><g><title>pbkdf2::xor (941 samples, 0.45%)</title><rect x="74.7323%" y="213" width="0.4512%" height="15" fill="rgb(228,208,7)" fg:x="155870" fg:w="941"/><text x="74.9823%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (941 samples, 0.45%)</title><rect x="74.7323%" y="197" width="0.4512%" height="15" fill="rgb(244,45,10)" fg:x="155870" fg:w="941"/><text x="74.9823%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (941 samples, 0.45%)</title><rect x="74.7323%" y="181" width="0.4512%" height="15" fill="rgb(207,125,25)" fg:x="155870" fg:w="941"/><text x="74.9823%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (430 samples, 0.21%)</title><rect x="74.9773%" y="165" width="0.2062%" height="15" fill="rgb(210,195,18)" fg:x="156381" fg:w="430"/><text x="75.2273%" y="175.50"></text></g><g><title>pbkdf2::xor::{{closure}} (430 samples, 0.21%)</title><rect x="74.9773%" y="149" width="0.2062%" height="15" fill="rgb(249,80,12)" fg:x="156381" fg:w="430"/><text x="75.2273%" y="159.50"></text></g><g><title>&lt;u8 as core::ops::bit::BitXorAssign&lt;&amp;u8&gt;&gt;::bitxor_assign (430 samples, 0.21%)</title><rect x="74.9773%" y="133" width="0.2062%" height="15" fill="rgb(221,65,9)" fg:x="156381" fg:w="430"/><text x="75.2273%" y="143.50"></text></g><g><title>&lt;u8 as core::ops::bit::BitXorAssign&gt;::bitxor_assign (430 samples, 0.21%)</title><rect x="74.9773%" y="117" width="0.2062%" height="15" fill="rgb(235,49,36)" fg:x="156381" fg:w="430"/><text x="75.2273%" y="127.50"></text></g><g><title>clone3 (51,353 samples, 24.62%)</title><rect x="50.5626%" y="469" width="24.6214%" height="15" fill="rgb(225,32,20)" fg:x="105459" fg:w="51353"/><text x="50.8126%" y="479.50">clone3</text></g><g><title>start_thread (51,353 samples, 24.62%)</title><rect x="50.5626%" y="453" width="24.6214%" height="15" fill="rgb(215,141,46)" fg:x="105459" fg:w="51353"/><text x="50.8126%" y="463.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (51,353 samples, 24.62%)</title><rect x="50.5626%" y="437" width="24.6214%" height="15" fill="rgb(250,160,47)" fg:x="105459" fg:w="51353"/><text x="50.8126%" y="447.50">std::sys::unix::thread::Thread::new::th..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (51,353 samples, 24.62%)</title><rect x="50.5626%" y="421" width="24.6214%" height="15" fill="rgb(216,222,40)" fg:x="105459" fg:w="51353"/><text x="50.8126%" y="431.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::f..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (51,353 samples, 24.62%)</title><rect x="50.5626%" y="405" width="24.6214%" height="15" fill="rgb(234,217,39)" fg:x="105459" fg:w="51353"/><text x="50.8126%" y="415.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::f..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (51,353 samples, 24.62%)</title><rect x="50.5626%" y="389" width="24.6214%" height="15" fill="rgb(207,178,40)" fg:x="105459" fg:w="51353"/><text x="50.8126%" y="399.50">core::ops::function::FnOnce::call_once{..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (51,353 samples, 24.62%)</title><rect x="50.5626%" y="373" width="24.6214%" height="15" fill="rgb(221,136,13)" fg:x="105459" fg:w="51353"/><text x="50.8126%" y="383.50">std::thread::Builder::spawn_unchecked_:..</text></g><g><title>std::panic::catch_unwind (51,353 samples, 24.62%)</title><rect x="50.5626%" y="357" width="24.6214%" height="15" fill="rgb(249,199,10)" fg:x="105459" fg:w="51353"/><text x="50.8126%" y="367.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (51,353 samples, 24.62%)</title><rect x="50.5626%" y="341" width="24.6214%" height="15" fill="rgb(249,222,13)" fg:x="105459" fg:w="51353"/><text x="50.8126%" y="351.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (51,353 samples, 24.62%)</title><rect x="50.5626%" y="325" width="24.6214%" height="15" fill="rgb(244,185,38)" fg:x="105459" fg:w="51353"/><text x="50.8126%" y="335.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (51,353 samples, 24.62%)</title><rect x="50.5626%" y="309" width="24.6214%" height="15" fill="rgb(236,202,9)" fg:x="105459" fg:w="51353"/><text x="50.8126%" y="319.50">&lt;core::panic::unwind_safe::AssertUnwind..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (51,353 samples, 24.62%)</title><rect x="50.5626%" y="293" width="24.6214%" height="15" fill="rgb(250,229,37)" fg:x="105459" fg:w="51353"/><text x="50.8126%" y="303.50">std::thread::Builder::spawn_unchecked_:..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (51,353 samples, 24.62%)</title><rect x="50.5626%" y="277" width="24.6214%" height="15" fill="rgb(206,174,23)" fg:x="105459" fg:w="51353"/><text x="50.8126%" y="287.50">std::sys_common::backtrace::__rust_begi..</text></g><g><title>zip_password_finder::password_worker::password_checker::{{closure}} (51,353 samples, 24.62%)</title><rect x="50.5626%" y="261" width="24.6214%" height="15" fill="rgb(211,33,43)" fg:x="105459" fg:w="51353"/><text x="50.8126%" y="271.50">zip_password_finder::password_worker::p..</text></g><g><title>worker-3 (52,210 samples, 25.03%)</title><rect x="50.2189%" y="485" width="25.0322%" height="15" fill="rgb(245,58,50)" fg:x="104742" fg:w="52210"/><text x="50.4689%" y="495.50">worker-3</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (140 samples, 0.07%)</title><rect x="75.1840%" y="469" width="0.0671%" height="15" fill="rgb(244,68,36)" fg:x="156812" fg:w="140"/><text x="75.4340%" y="479.50"></text></g><g><title>zip_password_finder::password_worker::password_checker::{{closure}} (140 samples, 0.07%)</title><rect x="75.1840%" y="453" width="0.0671%" height="15" fill="rgb(232,229,15)" fg:x="156812" fg:w="140"/><text x="75.4340%" y="463.50"></text></g><g><title>pbkdf2::pbkdf2 (140 samples, 0.07%)</title><rect x="75.1840%" y="437" width="0.0671%" height="15" fill="rgb(254,30,23)" fg:x="156812" fg:w="140"/><text x="75.4340%" y="447.50"></text></g><g><title>pbkdf2::pbkdf2_body (140 samples, 0.07%)</title><rect x="75.1840%" y="421" width="0.0671%" height="15" fill="rgb(235,160,14)" fg:x="156812" fg:w="140"/><text x="75.4340%" y="431.50"></text></g><g><title>digest::FixedOutput::finalize_fixed (140 samples, 0.07%)</title><rect x="75.1840%" y="405" width="0.0671%" height="15" fill="rgb(212,155,44)" fg:x="156812" fg:w="140"/><text x="75.4340%" y="415.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::FixedOutput&gt;::finalize_into (140 samples, 0.07%)</title><rect x="75.1840%" y="389" width="0.0671%" height="15" fill="rgb(226,2,50)" fg:x="156812" fg:w="140"/><text x="75.4340%" y="399.50"></text></g><g><title>&lt;hmac::optim::HmacCore&lt;D&gt; as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (140 samples, 0.07%)</title><rect x="75.1840%" y="373" width="0.0671%" height="15" fill="rgb(234,177,6)" fg:x="156812" fg:w="140"/><text x="75.4340%" y="383.50"></text></g><g><title>&lt;sha1::Sha1Core as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (140 samples, 0.07%)</title><rect x="75.1840%" y="357" width="0.0671%" height="15" fill="rgb(217,24,9)" fg:x="156812" fg:w="140"/><text x="75.4340%" y="367.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::len64_padding_be (140 samples, 0.07%)</title><rect x="75.1840%" y="341" width="0.0671%" height="15" fill="rgb(220,13,46)" fg:x="156812" fg:w="140"/><text x="75.4340%" y="351.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::digest_pad (140 samples, 0.07%)</title><rect x="75.1840%" y="325" width="0.0671%" height="15" fill="rgb(239,221,27)" fg:x="156812" fg:w="140"/><text x="75.4340%" y="335.50"></text></g><g><title>&lt;sha1::Sha1Core as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core::{{closure}} (140 samples, 0.07%)</title><rect x="75.1840%" y="309" width="0.0671%" height="15" fill="rgb(222,198,25)" fg:x="156812" fg:w="140"/><text x="75.4340%" y="319.50"></text></g><g><title>sha1::compress::compress (103 samples, 0.05%)</title><rect x="75.2521%" y="453" width="0.0494%" height="15" fill="rgb(211,99,13)" fg:x="156954" fg:w="103"/><text x="75.5021%" y="463.50"></text></g><g><title>[anon] (334 samples, 0.16%)</title><rect x="75.2511%" y="469" width="0.1601%" height="15" fill="rgb(232,111,31)" fg:x="156952" fg:w="334"/><text x="75.5011%" y="479.50"></text></g><g><title>sha1::compress::soft::compress (229 samples, 0.11%)</title><rect x="75.3015%" y="453" width="0.1098%" height="15" fill="rgb(245,82,37)" fg:x="157057" fg:w="229"/><text x="75.5515%" y="463.50"></text></g><g><title>sha1::compress::compress (110 samples, 0.05%)</title><rect x="75.4122%" y="453" width="0.0527%" height="15" fill="rgb(227,149,46)" fg:x="157288" fg:w="110"/><text x="75.6622%" y="463.50"></text></g><g><title>sha1::compress::x86::compress (110 samples, 0.05%)</title><rect x="75.4122%" y="437" width="0.0527%" height="15" fill="rgb(218,36,50)" fg:x="157288" fg:w="110"/><text x="75.6622%" y="447.50"></text></g><g><title>[unknown] (319 samples, 0.15%)</title><rect x="75.4113%" y="469" width="0.1529%" height="15" fill="rgb(226,80,48)" fg:x="157286" fg:w="319"/><text x="75.6613%" y="479.50"></text></g><g><title>sha1::compress::soft::compress (207 samples, 0.10%)</title><rect x="75.4649%" y="453" width="0.0992%" height="15" fill="rgb(238,224,15)" fg:x="157398" fg:w="207"/><text x="75.7149%" y="463.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;I,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.01%)</title><rect x="75.5685%" y="165" width="0.0101%" height="15" fill="rgb(241,136,10)" fg:x="157614" fg:w="21"/><text x="75.8185%" y="175.50"></text></g><g><title>&lt;zip_password_finder::password_gen::PasswordGenerator as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.01%)</title><rect x="75.5685%" y="149" width="0.0101%" height="15" fill="rgb(208,32,45)" fg:x="157614" fg:w="21"/><text x="75.8185%" y="159.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;I,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (30 samples, 0.01%)</title><rect x="75.5666%" y="245" width="0.0144%" height="15" fill="rgb(207,135,9)" fg:x="157610" fg:w="30"/><text x="75.8166%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (30 samples, 0.01%)</title><rect x="75.5666%" y="229" width="0.0144%" height="15" fill="rgb(206,86,44)" fg:x="157610" fg:w="30"/><text x="75.8166%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (30 samples, 0.01%)</title><rect x="75.5666%" y="213" width="0.0144%" height="15" fill="rgb(245,177,15)" fg:x="157610" fg:w="30"/><text x="75.8166%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (30 samples, 0.01%)</title><rect x="75.5666%" y="197" width="0.0144%" height="15" fill="rgb(206,64,50)" fg:x="157610" fg:w="30"/><text x="75.8166%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (30 samples, 0.01%)</title><rect x="75.5666%" y="181" width="0.0144%" height="15" fill="rgb(234,36,40)" fg:x="157610" fg:w="30"/><text x="75.8166%" y="191.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as crypto_common::KeyInit&gt;::new_from_slice (25 samples, 0.01%)</title><rect x="75.5839%" y="229" width="0.0120%" height="15" fill="rgb(213,64,8)" fg:x="157646" fg:w="25"/><text x="75.8339%" y="239.50"></text></g><g><title>&lt;hmac::optim::HmacCore&lt;D&gt; as crypto_common::KeyInit&gt;::new_from_slice (24 samples, 0.01%)</title><rect x="75.5843%" y="213" width="0.0115%" height="15" fill="rgb(210,75,36)" fg:x="157647" fg:w="24"/><text x="75.8343%" y="223.50"></text></g><g><title>&lt;sha1::Sha1Core as digest::core_api::UpdateCore&gt;::update_blocks (23 samples, 0.01%)</title><rect x="75.5848%" y="197" width="0.0110%" height="15" fill="rgb(229,88,21)" fg:x="157648" fg:w="23"/><text x="75.8348%" y="207.50"></text></g><g><title>sha1::compress::soft::compress (23 samples, 0.01%)</title><rect x="75.5848%" y="181" width="0.0110%" height="15" fill="rgb(252,204,47)" fg:x="157648" fg:w="23"/><text x="75.8348%" y="191.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as core::clone::Clone&gt;::clone (156 samples, 0.07%)</title><rect x="75.6347%" y="213" width="0.0748%" height="15" fill="rgb(208,77,27)" fg:x="157752" fg:w="156"/><text x="75.8847%" y="223.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::Update&gt;::update (45 samples, 0.02%)</title><rect x="75.7095%" y="213" width="0.0216%" height="15" fill="rgb(221,76,26)" fg:x="157908" fg:w="45"/><text x="75.9595%" y="223.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,Kind&gt;::digest_blocks (45 samples, 0.02%)</title><rect x="75.7095%" y="197" width="0.0216%" height="15" fill="rgb(225,139,18)" fg:x="157908" fg:w="45"/><text x="75.9595%" y="207.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (44 samples, 0.02%)</title><rect x="75.7100%" y="181" width="0.0211%" height="15" fill="rgb(230,137,11)" fg:x="157909" fg:w="44"/><text x="75.9600%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (44 samples, 0.02%)</title><rect x="75.7100%" y="165" width="0.0211%" height="15" fill="rgb(212,28,1)" fg:x="157909" fg:w="44"/><text x="75.9600%" y="175.50"></text></g><g><title>sha1::compress::compress (353 samples, 0.17%)</title><rect x="76.5826%" y="101" width="0.1692%" height="15" fill="rgb(248,164,17)" fg:x="159729" fg:w="353"/><text x="76.8326%" y="111.50"></text></g><g><title>sha1::compress::x86::compress (245 samples, 0.12%)</title><rect x="76.6343%" y="85" width="0.1175%" height="15" fill="rgb(222,171,42)" fg:x="159837" fg:w="245"/><text x="76.8843%" y="95.50"></text></g><g><title>sha1::compress::x86::shani_cpuid::get (117 samples, 0.06%)</title><rect x="76.6957%" y="69" width="0.0561%" height="15" fill="rgb(243,84,45)" fg:x="159965" fg:w="117"/><text x="76.9457%" y="79.50"></text></g><g><title>sha1::compress::x86::shani_cpuid::init_get (117 samples, 0.06%)</title><rect x="76.6957%" y="53" width="0.0561%" height="15" fill="rgb(252,49,23)" fg:x="159965" fg:w="117"/><text x="76.9457%" y="63.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (576 samples, 0.28%)</title><rect x="77.3180%" y="85" width="0.2762%" height="15" fill="rgb(215,19,7)" fg:x="161263" fg:w="576"/><text x="77.5680%" y="95.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (576 samples, 0.28%)</title><rect x="77.3180%" y="69" width="0.2762%" height="15" fill="rgb(238,81,41)" fg:x="161263" fg:w="576"/><text x="77.5680%" y="79.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (576 samples, 0.28%)</title><rect x="77.3180%" y="53" width="0.2762%" height="15" fill="rgb(210,199,37)" fg:x="161263" fg:w="576"/><text x="77.5680%" y="63.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (229 samples, 0.11%)</title><rect x="77.5942%" y="85" width="0.1098%" height="15" fill="rgb(244,192,49)" fg:x="161839" fg:w="229"/><text x="77.8442%" y="95.50"></text></g><g><title>core::num::&lt;impl u32&gt;::from_be_bytes (1,005 samples, 0.48%)</title><rect x="77.7040%" y="85" width="0.4819%" height="15" fill="rgb(226,211,11)" fg:x="162068" fg:w="1005"/><text x="77.9540%" y="95.50"></text></g><g><title>core::num::&lt;impl u32&gt;::from_be (1,005 samples, 0.48%)</title><rect x="77.7040%" y="69" width="0.4819%" height="15" fill="rgb(236,162,54)" fg:x="162068" fg:w="1005"/><text x="77.9540%" y="79.50"></text></g><g><title>core::num::&lt;impl u32&gt;::swap_bytes (1,005 samples, 0.48%)</title><rect x="77.7040%" y="53" width="0.4819%" height="15" fill="rgb(220,229,9)" fg:x="162068" fg:w="1005"/><text x="77.9540%" y="63.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (226 samples, 0.11%)</title><rect x="78.1858%" y="69" width="0.1084%" height="15" fill="rgb(250,87,22)" fg:x="163073" fg:w="226"/><text x="78.4358%" y="79.50"></text></g><g><title>sha1::compress::soft::add (4,310 samples, 2.07%)</title><rect x="78.2942%" y="53" width="2.0664%" height="15" fill="rgb(239,43,17)" fg:x="163299" fg:w="4310"/><text x="78.5442%" y="63.50">s..</text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (4,310 samples, 2.07%)</title><rect x="78.2942%" y="37" width="2.0664%" height="15" fill="rgb(231,177,25)" fg:x="163299" fg:w="4310"/><text x="78.5442%" y="47.50">c..</text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (1,753 samples, 0.84%)</title><rect x="81.4341%" y="37" width="0.8405%" height="15" fill="rgb(219,179,1)" fg:x="169848" fg:w="1753"/><text x="81.6841%" y="47.50"></text></g><g><title>sha1::compress::soft::sha1rnds4c (5,611 samples, 2.69%)</title><rect x="80.3606%" y="53" width="2.6902%" height="15" fill="rgb(238,219,53)" fg:x="167609" fg:w="5611"/><text x="80.6106%" y="63.50">sh..</text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (1,619 samples, 0.78%)</title><rect x="82.2746%" y="37" width="0.7762%" height="15" fill="rgb(232,167,36)" fg:x="171601" fg:w="1619"/><text x="82.5246%" y="47.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (1,423 samples, 0.68%)</title><rect x="84.9548%" y="37" width="0.6823%" height="15" fill="rgb(244,19,51)" fg:x="177191" fg:w="1423"/><text x="85.2048%" y="47.50"></text></g><g><title>sha1::compress::soft::sha1rnds4m (7,374 samples, 3.54%)</title><rect x="83.0509%" y="53" width="3.5355%" height="15" fill="rgb(224,6,22)" fg:x="173220" fg:w="7374"/><text x="83.3009%" y="63.50">sha..</text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (1,980 samples, 0.95%)</title><rect x="85.6370%" y="37" width="0.9493%" height="15" fill="rgb(224,145,5)" fg:x="178614" fg:w="1980"/><text x="85.8870%" y="47.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (3,488 samples, 1.67%)</title><rect x="88.3325%" y="37" width="1.6723%" height="15" fill="rgb(234,130,49)" fg:x="184236" fg:w="3488"/><text x="88.5825%" y="47.50"></text></g><g><title>sha1::compress::soft::sha1_digest_round_x4 (29,121 samples, 13.96%)</title><rect x="78.2942%" y="69" width="13.9622%" height="15" fill="rgb(254,6,2)" fg:x="163299" fg:w="29121"/><text x="78.5442%" y="79.50">sha1::compress::soft:..</text></g><g><title>sha1::compress::soft::sha1rnds4p (11,826 samples, 5.67%)</title><rect x="86.5863%" y="53" width="5.6700%" height="15" fill="rgb(208,96,46)" fg:x="180594" fg:w="11826"/><text x="86.8363%" y="63.50">sha1::c..</text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (4,696 samples, 2.25%)</title><rect x="90.0048%" y="37" width="2.2515%" height="15" fill="rgb(239,3,39)" fg:x="187724" fg:w="4696"/><text x="90.2548%" y="47.50">c..</text></g><g><title>sha1::compress::soft::sha1_first_half (451 samples, 0.22%)</title><rect x="92.2564%" y="69" width="0.2162%" height="15" fill="rgb(233,210,1)" fg:x="192420" fg:w="451"/><text x="92.5064%" y="79.50"></text></g><g><title>sha1::compress::soft::sha1_first_add (451 samples, 0.22%)</title><rect x="92.2564%" y="53" width="0.2162%" height="15" fill="rgb(244,137,37)" fg:x="192420" fg:w="451"/><text x="92.5064%" y="63.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (451 samples, 0.22%)</title><rect x="92.2564%" y="37" width="0.2162%" height="15" fill="rgb(240,136,2)" fg:x="192420" fg:w="451"/><text x="92.5064%" y="47.50"></text></g><g><title>sha1::compress::soft::sha1msg1 (1,809 samples, 0.87%)</title><rect x="92.4726%" y="69" width="0.8673%" height="15" fill="rgb(239,18,37)" fg:x="192871" fg:w="1809"/><text x="92.7226%" y="79.50"></text></g><g><title>sha1::compress::soft::sha1msg2 (8,009 samples, 3.84%)</title><rect x="93.3399%" y="69" width="3.8399%" height="15" fill="rgb(218,185,22)" fg:x="194680" fg:w="8009"/><text x="93.5899%" y="79.50">sha1..</text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (6,349 samples, 3.04%)</title><rect x="94.1358%" y="53" width="3.0440%" height="15" fill="rgb(225,218,4)" fg:x="196340" fg:w="6349"/><text x="94.3858%" y="63.50">cor..</text></g><g><title>&lt;sha1::Sha1Core as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core::{{closure}} (45,683 samples, 21.90%)</title><rect x="76.5274%" y="117" width="21.9029%" height="15" fill="rgb(230,182,32)" fg:x="159614" fg:w="45683"/><text x="76.7774%" y="127.50">&lt;sha1::Sha1Core as digest::core_api..</text></g><g><title>sha1::compress::soft::compress (45,215 samples, 21.68%)</title><rect x="76.7518%" y="101" width="21.6785%" height="15" fill="rgb(242,56,43)" fg:x="160082" fg:w="45215"/><text x="77.0018%" y="111.50">sha1::compress::soft::compress</text></g><g><title>sha1::compress::soft::sha1_digest_block_u32 (42,224 samples, 20.24%)</title><rect x="78.1858%" y="85" width="20.2444%" height="15" fill="rgb(233,99,24)" fg:x="163073" fg:w="42224"/><text x="78.4358%" y="95.50">sha1::compress::soft::sha1_diges..</text></g><g><title>sha1::compress::soft::xor (2,608 samples, 1.25%)</title><rect x="97.1799%" y="69" width="1.2504%" height="15" fill="rgb(234,209,42)" fg:x="202689" fg:w="2608"/><text x="97.4299%" y="79.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (53 samples, 0.03%)</title><rect x="98.4303%" y="117" width="0.0254%" height="15" fill="rgb(227,7,12)" fg:x="205297" fg:w="53"/><text x="98.6803%" y="127.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (53 samples, 0.03%)</title><rect x="98.4303%" y="101" width="0.0254%" height="15" fill="rgb(245,203,43)" fg:x="205297" fg:w="53"/><text x="98.6803%" y="111.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::digest_pad (45,842 samples, 21.98%)</title><rect x="76.4771%" y="133" width="21.9791%" height="15" fill="rgb(238,205,33)" fg:x="159509" fg:w="45842"/><text x="76.7271%" y="143.50">block_buffer::BlockBuffer&lt;BlockSize..</text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::len64_padding_be (45,843 samples, 21.98%)</title><rect x="76.4771%" y="149" width="21.9796%" height="15" fill="rgb(231,56,7)" fg:x="159509" fg:w="45843"/><text x="76.7271%" y="159.50">block_buffer::BlockBuffer&lt;BlockSize..</text></g><g><title>&lt;sha1::Sha1Core as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (48,376 samples, 23.19%)</title><rect x="76.2628%" y="165" width="23.1940%" height="15" fill="rgb(244,186,29)" fg:x="159062" fg:w="48376"/><text x="76.5128%" y="175.50">&lt;sha1::Sha1Core as digest::core_api::..</text></g><g><title>core::num::&lt;impl u32&gt;::to_be_bytes (2,086 samples, 1.00%)</title><rect x="98.4566%" y="149" width="1.0001%" height="15" fill="rgb(234,111,31)" fg:x="205352" fg:w="2086"/><text x="98.7066%" y="159.50"></text></g><g><title>core::num::&lt;impl u32&gt;::to_be (2,086 samples, 1.00%)</title><rect x="98.4566%" y="133" width="1.0001%" height="15" fill="rgb(241,149,10)" fg:x="205352" fg:w="2086"/><text x="98.7066%" y="143.50"></text></g><g><title>core::num::&lt;impl u32&gt;::swap_bytes (2,086 samples, 1.00%)</title><rect x="98.4566%" y="117" width="1.0001%" height="15" fill="rgb(249,206,44)" fg:x="205352" fg:w="2086"/><text x="98.7066%" y="127.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::FixedOutput&gt;::finalize_into (48,412 samples, 23.21%)</title><rect x="76.2628%" y="197" width="23.2113%" height="15" fill="rgb(251,153,30)" fg:x="159062" fg:w="48412"/><text x="76.5128%" y="207.50">&lt;digest::core_api::wrapper::CoreWrapp..</text></g><g><title>&lt;hmac::optim::HmacCore&lt;D&gt; as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (48,412 samples, 23.21%)</title><rect x="76.2628%" y="181" width="23.2113%" height="15" fill="rgb(239,152,38)" fg:x="159062" fg:w="48412"/><text x="76.5128%" y="191.50">&lt;hmac::optim::HmacCore&lt;D&gt; as digest::..</text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,Kind&gt;::digest_blocks (36 samples, 0.02%)</title><rect x="99.4568%" y="165" width="0.0173%" height="15" fill="rgb(249,139,47)" fg:x="207438" fg:w="36"/><text x="99.7068%" y="175.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (36 samples, 0.02%)</title><rect x="99.4568%" y="149" width="0.0173%" height="15" fill="rgb(244,64,35)" fg:x="207438" fg:w="36"/><text x="99.7068%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (36 samples, 0.02%)</title><rect x="99.4568%" y="133" width="0.0173%" height="15" fill="rgb(216,46,15)" fg:x="207438" fg:w="36"/><text x="99.7068%" y="143.50"></text></g><g><title>digest::FixedOutput::finalize_fixed (49,522 samples, 23.74%)</title><rect x="75.7334%" y="213" width="23.7435%" height="15" fill="rgb(250,74,19)" fg:x="157958" fg:w="49522"/><text x="75.9834%" y="223.50">digest::FixedOutput::finalize_fixed</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (295 samples, 0.14%)</title><rect x="99.5829%" y="165" width="0.1414%" height="15" fill="rgb(249,42,33)" fg:x="207701" fg:w="295"/><text x="99.8329%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (295 samples, 0.14%)</title><rect x="99.5829%" y="149" width="0.1414%" height="15" fill="rgb(242,149,17)" fg:x="207701" fg:w="295"/><text x="99.8329%" y="159.50"></text></g><g><title>std::panic::catch_unwind (50,821 samples, 24.37%)</title><rect x="75.5666%" y="357" width="24.3663%" height="15" fill="rgb(244,29,21)" fg:x="157610" fg:w="50821"/><text x="75.8166%" y="367.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (50,821 samples, 24.37%)</title><rect x="75.5666%" y="341" width="24.3663%" height="15" fill="rgb(220,130,37)" fg:x="157610" fg:w="50821"/><text x="75.8166%" y="351.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (50,821 samples, 24.37%)</title><rect x="75.5666%" y="325" width="24.3663%" height="15" fill="rgb(211,67,2)" fg:x="157610" fg:w="50821"/><text x="75.8166%" y="335.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (50,821 samples, 24.37%)</title><rect x="75.5666%" y="309" width="24.3663%" height="15" fill="rgb(235,68,52)" fg:x="157610" fg:w="50821"/><text x="75.8166%" y="319.50">&lt;core::panic::unwind_safe::AssertUnwind..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (50,821 samples, 24.37%)</title><rect x="75.5666%" y="293" width="24.3663%" height="15" fill="rgb(246,142,3)" fg:x="157610" fg:w="50821"/><text x="75.8166%" y="303.50">std::thread::Builder::spawn_unchecked_:..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (50,821 samples, 24.37%)</title><rect x="75.5666%" y="277" width="24.3663%" height="15" fill="rgb(241,25,7)" fg:x="157610" fg:w="50821"/><text x="75.8166%" y="287.50">std::sys_common::backtrace::__rust_begi..</text></g><g><title>zip_password_finder::password_worker::password_checker::{{closure}} (50,821 samples, 24.37%)</title><rect x="75.5666%" y="261" width="24.3663%" height="15" fill="rgb(242,119,39)" fg:x="157610" fg:w="50821"/><text x="75.8166%" y="271.50">zip_password_finder::password_worker::p..</text></g><g><title>pbkdf2::pbkdf2 (50,785 samples, 24.35%)</title><rect x="75.5839%" y="245" width="24.3490%" height="15" fill="rgb(241,98,45)" fg:x="157646" fg:w="50785"/><text x="75.8339%" y="255.50">pbkdf2::pbkdf2</text></g><g><title>pbkdf2::pbkdf2_body (50,760 samples, 24.34%)</title><rect x="75.5958%" y="229" width="24.3370%" height="15" fill="rgb(254,28,30)" fg:x="157671" fg:w="50760"/><text x="75.8458%" y="239.50">pbkdf2::pbkdf2_body</text></g><g><title>pbkdf2::xor (951 samples, 0.46%)</title><rect x="99.4769%" y="213" width="0.4560%" height="15" fill="rgb(241,142,54)" fg:x="207480" fg:w="951"/><text x="99.7269%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (951 samples, 0.46%)</title><rect x="99.4769%" y="197" width="0.4560%" height="15" fill="rgb(222,85,15)" fg:x="207480" fg:w="951"/><text x="99.7269%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (951 samples, 0.46%)</title><rect x="99.4769%" y="181" width="0.4560%" height="15" fill="rgb(210,85,47)" fg:x="207480" fg:w="951"/><text x="99.7269%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (435 samples, 0.21%)</title><rect x="99.7243%" y="165" width="0.2086%" height="15" fill="rgb(224,206,25)" fg:x="207996" fg:w="435"/><text x="99.9743%" y="175.50"></text></g><g><title>pbkdf2::xor::{{closure}} (435 samples, 0.21%)</title><rect x="99.7243%" y="149" width="0.2086%" height="15" fill="rgb(243,201,19)" fg:x="207996" fg:w="435"/><text x="99.9743%" y="159.50"></text></g><g><title>&lt;u8 as core::ops::bit::BitXorAssign&lt;&amp;u8&gt;&gt;::bitxor_assign (435 samples, 0.21%)</title><rect x="99.7243%" y="133" width="0.2086%" height="15" fill="rgb(236,59,4)" fg:x="207996" fg:w="435"/><text x="99.9743%" y="143.50"></text></g><g><title>&lt;u8 as core::ops::bit::BitXorAssign&gt;::bitxor_assign (435 samples, 0.21%)</title><rect x="99.7243%" y="117" width="0.2086%" height="15" fill="rgb(254,179,45)" fg:x="207996" fg:w="435"/><text x="99.9743%" y="127.50"></text></g><g><title>clone3 (50,822 samples, 24.37%)</title><rect x="75.5666%" y="469" width="24.3668%" height="15" fill="rgb(226,14,10)" fg:x="157610" fg:w="50822"/><text x="75.8166%" y="479.50">clone3</text></g><g><title>start_thread (50,822 samples, 24.37%)</title><rect x="75.5666%" y="453" width="24.3668%" height="15" fill="rgb(244,27,41)" fg:x="157610" fg:w="50822"/><text x="75.8166%" y="463.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (50,822 samples, 24.37%)</title><rect x="75.5666%" y="437" width="24.3668%" height="15" fill="rgb(235,35,32)" fg:x="157610" fg:w="50822"/><text x="75.8166%" y="447.50">std::sys::unix::thread::Thread::new::th..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (50,822 samples, 24.37%)</title><rect x="75.5666%" y="421" width="24.3668%" height="15" fill="rgb(218,68,31)" fg:x="157610" fg:w="50822"/><text x="75.8166%" y="431.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::f..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (50,822 samples, 24.37%)</title><rect x="75.5666%" y="405" width="24.3668%" height="15" fill="rgb(207,120,37)" fg:x="157610" fg:w="50822"/><text x="75.8166%" y="415.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::f..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (50,822 samples, 24.37%)</title><rect x="75.5666%" y="389" width="24.3668%" height="15" fill="rgb(227,98,0)" fg:x="157610" fg:w="50822"/><text x="75.8166%" y="399.50">core::ops::function::FnOnce::call_once{..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (50,822 samples, 24.37%)</title><rect x="75.5666%" y="373" width="24.3668%" height="15" fill="rgb(207,7,3)" fg:x="157610" fg:w="50822"/><text x="75.8166%" y="383.50">std::thread::Builder::spawn_unchecked_:..</text></g><g><title>worker-4 (51,586 samples, 24.73%)</title><rect x="75.2511%" y="485" width="24.7331%" height="15" fill="rgb(206,98,19)" fg:x="156952" fg:w="51586"/><text x="75.5011%" y="495.50">worker-4</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (106 samples, 0.05%)</title><rect x="99.9334%" y="469" width="0.0508%" height="15" fill="rgb(217,5,26)" fg:x="208432" fg:w="106"/><text x="100.1834%" y="479.50"></text></g><g><title>zip_password_finder::password_worker::password_checker::{{closure}} (106 samples, 0.05%)</title><rect x="99.9334%" y="453" width="0.0508%" height="15" fill="rgb(235,190,38)" fg:x="208432" fg:w="106"/><text x="100.1834%" y="463.50"></text></g><g><title>pbkdf2::pbkdf2 (106 samples, 0.05%)</title><rect x="99.9334%" y="437" width="0.0508%" height="15" fill="rgb(247,86,24)" fg:x="208432" fg:w="106"/><text x="100.1834%" y="447.50"></text></g><g><title>pbkdf2::pbkdf2_body (106 samples, 0.05%)</title><rect x="99.9334%" y="421" width="0.0508%" height="15" fill="rgb(205,101,16)" fg:x="208432" fg:w="106"/><text x="100.1834%" y="431.50"></text></g><g><title>digest::FixedOutput::finalize_fixed (106 samples, 0.05%)</title><rect x="99.9334%" y="405" width="0.0508%" height="15" fill="rgb(246,168,33)" fg:x="208432" fg:w="106"/><text x="100.1834%" y="415.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::FixedOutput&gt;::finalize_into (106 samples, 0.05%)</title><rect x="99.9334%" y="389" width="0.0508%" height="15" fill="rgb(231,114,1)" fg:x="208432" fg:w="106"/><text x="100.1834%" y="399.50"></text></g><g><title>&lt;hmac::optim::HmacCore&lt;D&gt; as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (106 samples, 0.05%)</title><rect x="99.9334%" y="373" width="0.0508%" height="15" fill="rgb(207,184,53)" fg:x="208432" fg:w="106"/><text x="100.1834%" y="383.50"></text></g><g><title>&lt;sha1::Sha1Core as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (106 samples, 0.05%)</title><rect x="99.9334%" y="357" width="0.0508%" height="15" fill="rgb(224,95,51)" fg:x="208432" fg:w="106"/><text x="100.1834%" y="367.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::len64_padding_be (106 samples, 0.05%)</title><rect x="99.9334%" y="341" width="0.0508%" height="15" fill="rgb(212,188,45)" fg:x="208432" fg:w="106"/><text x="100.1834%" y="351.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::digest_pad (106 samples, 0.05%)</title><rect x="99.9334%" y="325" width="0.0508%" height="15" fill="rgb(223,154,38)" fg:x="208432" fg:w="106"/><text x="100.1834%" y="335.50"></text></g><g><title>&lt;sha1::Sha1Core as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core::{{closure}} (106 samples, 0.05%)</title><rect x="99.9334%" y="309" width="0.0508%" height="15" fill="rgb(251,22,52)" fg:x="208432" fg:w="106"/><text x="100.1834%" y="319.50"></text></g><g><title>all (208,571 samples, 100%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(229,209,22)" fg:x="0" fg:w="208571"/><text x="0.2500%" y="511.50"></text></g><g><title>zip-password-fi (33 samples, 0.02%)</title><rect x="99.9842%" y="485" width="0.0158%" height="15" fill="rgb(234,138,34)" fg:x="208538" fg:w="33"/><text x="100.2342%" y="495.50"></text></g></svg></svg>