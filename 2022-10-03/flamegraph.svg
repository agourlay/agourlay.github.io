<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="726" onload="init(evt)" viewBox="0 0 1200 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="726" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="709.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="709.00"> </text><svg id="frames" x="10" width="1180" total_samples="1166487"><g><title>[[heap]] (137 samples, 0.01%)</title><rect x="0.0000%" y="645" width="0.0117%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="137"/><text x="0.2500%" y="655.50"></text></g><g><title>std::io::append_to_string (218 samples, 0.02%)</title><rect x="0.0532%" y="629" width="0.0187%" height="15" fill="rgb(217,0,24)" fg:x="621" fg:w="218"/><text x="0.3032%" y="639.50"></text></g><g><title>std::io::BufRead::read_line::{{closure}} (125 samples, 0.01%)</title><rect x="0.0612%" y="613" width="0.0107%" height="15" fill="rgb(221,193,54)" fg:x="714" fg:w="125"/><text x="0.3112%" y="623.50"></text></g><g><title>std::io::read_until (125 samples, 0.01%)</title><rect x="0.0612%" y="597" width="0.0107%" height="15" fill="rgb(248,212,6)" fg:x="714" fg:w="125"/><text x="0.3112%" y="607.50"></text></g><g><title>std::sys_common::memchr::memchr (122 samples, 0.01%)</title><rect x="0.0615%" y="581" width="0.0105%" height="15" fill="rgb(208,68,35)" fg:x="717" fg:w="122"/><text x="0.3115%" y="591.50"></text></g><g><title>[anon] (762 samples, 0.07%)</title><rect x="0.0117%" y="645" width="0.0653%" height="15" fill="rgb(232,128,0)" fg:x="137" fg:w="762"/><text x="0.2617%" y="655.50"></text></g><g><title>[unknown] (360 samples, 0.03%)</title><rect x="0.0771%" y="645" width="0.0309%" height="15" fill="rgb(207,160,47)" fg:x="899" fg:w="360"/><text x="0.3271%" y="655.50"></text></g><g><title>syscall (141 samples, 0.01%)</title><rect x="0.0958%" y="629" width="0.0121%" height="15" fill="rgb(228,23,34)" fg:x="1118" fg:w="141"/><text x="0.3458%" y="639.50"></text></g><g><title>core::str::converts::from_utf8 (184 samples, 0.02%)</title><rect x="0.1639%" y="373" width="0.0158%" height="15" fill="rgb(218,30,26)" fg:x="1912" fg:w="184"/><text x="0.4139%" y="383.50"></text></g><g><title>core::str::validations::run_utf8_validation (158 samples, 0.01%)</title><rect x="0.1661%" y="357" width="0.0135%" height="15" fill="rgb(220,122,19)" fg:x="1938" fg:w="158"/><text x="0.4161%" y="367.50"></text></g><g><title>_int_malloc (359 samples, 0.03%)</title><rect x="0.2456%" y="197" width="0.0308%" height="15" fill="rgb(250,228,42)" fg:x="2865" fg:w="359"/><text x="0.4956%" y="207.50"></text></g><g><title>__GI___libc_malloc (1,127 samples, 0.10%)</title><rect x="0.1936%" y="213" width="0.0966%" height="15" fill="rgb(240,193,28)" fg:x="2258" fg:w="1127"/><text x="0.4436%" y="223.50"></text></g><g><title>tcache_get (141 samples, 0.01%)</title><rect x="0.2781%" y="197" width="0.0121%" height="15" fill="rgb(216,20,37)" fg:x="3244" fg:w="141"/><text x="0.5281%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1,253 samples, 0.11%)</title><rect x="0.1925%" y="229" width="0.1074%" height="15" fill="rgb(206,188,39)" fg:x="2245" fg:w="1253"/><text x="0.4425%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1,290 samples, 0.11%)</title><rect x="0.1901%" y="293" width="0.1106%" height="15" fill="rgb(217,207,13)" fg:x="2217" fg:w="1290"/><text x="0.4401%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1,288 samples, 0.11%)</title><rect x="0.1902%" y="277" width="0.1104%" height="15" fill="rgb(231,73,38)" fg:x="2219" fg:w="1288"/><text x="0.4402%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1,284 samples, 0.11%)</title><rect x="0.1906%" y="261" width="0.1101%" height="15" fill="rgb(225,20,46)" fg:x="2223" fg:w="1284"/><text x="0.4406%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1,284 samples, 0.11%)</title><rect x="0.1906%" y="245" width="0.1101%" height="15" fill="rgb(210,31,41)" fg:x="2223" fg:w="1284"/><text x="0.4406%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1,366 samples, 0.12%)</title><rect x="0.1890%" y="341" width="0.1171%" height="15" fill="rgb(221,200,47)" fg:x="2205" fg:w="1366"/><text x="0.4390%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1,366 samples, 0.12%)</title><rect x="0.1890%" y="325" width="0.1171%" height="15" fill="rgb(226,26,5)" fg:x="2205" fg:w="1366"/><text x="0.4390%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1,366 samples, 0.12%)</title><rect x="0.1890%" y="309" width="0.1171%" height="15" fill="rgb(249,33,26)" fg:x="2205" fg:w="1366"/><text x="0.4390%" y="319.50"></text></g><g><title>__memchr_avx2 (327 samples, 0.03%)</title><rect x="0.3078%" y="309" width="0.0280%" height="15" fill="rgb(235,183,28)" fg:x="3590" fg:w="327"/><text x="0.5578%" y="319.50"></text></g><g><title>&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,334 samples, 0.20%)</title><rect x="0.1360%" y="421" width="0.2001%" height="15" fill="rgb(221,5,38)" fg:x="1586" fg:w="2334"/><text x="0.3860%" y="431.50"></text></g><g><title>std::io::BufRead::read_line (2,219 samples, 0.19%)</title><rect x="0.1458%" y="405" width="0.1902%" height="15" fill="rgb(247,18,42)" fg:x="1701" fg:w="2219"/><text x="0.3958%" y="415.50"></text></g><g><title>std::io::append_to_string (2,219 samples, 0.19%)</title><rect x="0.1458%" y="389" width="0.1902%" height="15" fill="rgb(241,131,45)" fg:x="1701" fg:w="2219"/><text x="0.3958%" y="399.50"></text></g><g><title>std::io::BufRead::read_line::{{closure}} (1,824 samples, 0.16%)</title><rect x="0.1797%" y="373" width="0.1564%" height="15" fill="rgb(249,31,29)" fg:x="2096" fg:w="1824"/><text x="0.4297%" y="383.50"></text></g><g><title>std::io::read_until (1,824 samples, 0.16%)</title><rect x="0.1797%" y="357" width="0.1564%" height="15" fill="rgb(225,111,53)" fg:x="2096" fg:w="1824"/><text x="0.4297%" y="367.50"></text></g><g><title>std::sys_common::memchr::memchr (340 samples, 0.03%)</title><rect x="0.3069%" y="341" width="0.0291%" height="15" fill="rgb(238,160,17)" fg:x="3580" fg:w="340"/><text x="0.5569%" y="351.50"></text></g><g><title>std::sys::unix::memchr::memchr (334 samples, 0.03%)</title><rect x="0.3074%" y="325" width="0.0286%" height="15" fill="rgb(214,148,48)" fg:x="3586" fg:w="334"/><text x="0.5574%" y="335.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (182 samples, 0.02%)</title><rect x="0.3456%" y="405" width="0.0156%" height="15" fill="rgb(232,36,49)" fg:x="4031" fg:w="182"/><text x="0.5956%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (407 samples, 0.03%)</title><rect x="0.4429%" y="293" width="0.0349%" height="15" fill="rgb(209,103,24)" fg:x="5166" fg:w="407"/><text x="0.6929%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_load (407 samples, 0.03%)</title><rect x="0.4429%" y="277" width="0.0349%" height="15" fill="rgb(229,88,8)" fg:x="5166" fg:w="407"/><text x="0.6929%" y="287.50"></text></g><g><title>__entry_text_start (949 samples, 0.08%)</title><rect x="0.5521%" y="261" width="0.0814%" height="15" fill="rgb(213,181,19)" fg:x="6440" fg:w="949"/><text x="0.8021%" y="271.50"></text></g><g><title>_raw_spin_lock (298 samples, 0.03%)</title><rect x="0.7099%" y="197" width="0.0255%" height="15" fill="rgb(254,191,54)" fg:x="8281" fg:w="298"/><text x="0.9599%" y="207.50"></text></g><g><title>_raw_spin_lock (265 samples, 0.02%)</title><rect x="0.8321%" y="165" width="0.0227%" height="15" fill="rgb(241,83,37)" fg:x="9706" fg:w="265"/><text x="1.0821%" y="175.50"></text></g><g><title>pick_next_entity (160 samples, 0.01%)</title><rect x="0.8749%" y="149" width="0.0137%" height="15" fill="rgb(233,36,39)" fg:x="10206" fg:w="160"/><text x="1.1249%" y="159.50"></text></g><g><title>pick_next_entity (368 samples, 0.03%)</title><rect x="0.9654%" y="133" width="0.0315%" height="15" fill="rgb(226,3,54)" fg:x="11261" fg:w="368"/><text x="1.2154%" y="143.50"></text></g><g><title>__calc_delta (459 samples, 0.04%)</title><rect x="1.0757%" y="117" width="0.0393%" height="15" fill="rgb(245,192,40)" fg:x="12548" fg:w="459"/><text x="1.3257%" y="127.50"></text></g><g><title>__cgroup_account_cputime (205 samples, 0.02%)</title><rect x="1.1151%" y="117" width="0.0176%" height="15" fill="rgb(238,167,29)" fg:x="13007" fg:w="205"/><text x="1.3651%" y="127.50"></text></g><g><title>cpuacct_charge (302 samples, 0.03%)</title><rect x="1.1348%" y="117" width="0.0259%" height="15" fill="rgb(232,182,51)" fg:x="13237" fg:w="302"/><text x="1.3848%" y="127.50"></text></g><g><title>update_curr (1,951 samples, 0.17%)</title><rect x="1.0028%" y="133" width="0.1673%" height="15" fill="rgb(231,60,39)" fg:x="11698" fg:w="1951"/><text x="1.2528%" y="143.50"></text></g><g><title>pick_next_task_fair (3,478 samples, 0.30%)</title><rect x="0.8887%" y="149" width="0.2982%" height="15" fill="rgb(208,69,12)" fg:x="10366" fg:w="3478"/><text x="1.1387%" y="159.50"></text></g><g><title>update_min_vruntime (195 samples, 0.02%)</title><rect x="1.1701%" y="133" width="0.0167%" height="15" fill="rgb(235,93,37)" fg:x="13649" fg:w="195"/><text x="1.4201%" y="143.50"></text></g><g><title>pick_next_task (3,939 samples, 0.34%)</title><rect x="0.8556%" y="165" width="0.3377%" height="15" fill="rgb(213,116,39)" fg:x="9980" fg:w="3939"/><text x="1.1056%" y="175.50"></text></g><g><title>rcu_note_context_switch (117 samples, 0.01%)</title><rect x="1.2023%" y="165" width="0.0100%" height="15" fill="rgb(222,207,29)" fg:x="14025" fg:w="117"/><text x="1.4523%" y="175.50"></text></g><g><title>__schedule (6,514 samples, 0.56%)</title><rect x="0.7571%" y="181" width="0.5584%" height="15" fill="rgb(206,96,30)" fg:x="8832" fg:w="6514"/><text x="1.0071%" y="191.50"></text></g><g><title>update_rq_clock (1,133 samples, 0.10%)</title><rect x="1.2184%" y="165" width="0.0971%" height="15" fill="rgb(218,138,4)" fg:x="14213" fg:w="1133"/><text x="1.4684%" y="175.50"></text></g><g><title>sched_clock_cpu (689 samples, 0.06%)</title><rect x="1.2565%" y="149" width="0.0591%" height="15" fill="rgb(250,191,14)" fg:x="14657" fg:w="689"/><text x="1.5065%" y="159.50"></text></g><g><title>sched_clock (551 samples, 0.05%)</title><rect x="1.2683%" y="133" width="0.0472%" height="15" fill="rgb(239,60,40)" fg:x="14795" fg:w="551"/><text x="1.5183%" y="143.50"></text></g><g><title>native_sched_clock (542 samples, 0.05%)</title><rect x="1.2691%" y="117" width="0.0465%" height="15" fill="rgb(206,27,48)" fg:x="14804" fg:w="542"/><text x="1.5191%" y="127.50"></text></g><g><title>schedule (6,808 samples, 0.58%)</title><rect x="0.7433%" y="197" width="0.5836%" height="15" fill="rgb(225,35,8)" fg:x="8670" fg:w="6808"/><text x="0.9933%" y="207.50"></text></g><g><title>do_sched_yield (7,614 samples, 0.65%)</title><rect x="0.6828%" y="213" width="0.6527%" height="15" fill="rgb(250,213,24)" fg:x="7965" fg:w="7614"/><text x="0.9328%" y="223.50"></text></g><g><title>__x64_sys_sched_yield (8,006 samples, 0.69%)</title><rect x="0.6814%" y="229" width="0.6863%" height="15" fill="rgb(247,123,22)" fg:x="7948" fg:w="8006"/><text x="0.9314%" y="239.50"></text></g><g><title>yield_task_fair (264 samples, 0.02%)</title><rect x="1.3451%" y="213" width="0.0226%" height="15" fill="rgb(231,138,38)" fg:x="15690" fg:w="264"/><text x="1.5951%" y="223.50"></text></g><g><title>exit_to_user_mode_prepare (471 samples, 0.04%)</title><rect x="1.3888%" y="213" width="0.0404%" height="15" fill="rgb(231,145,46)" fg:x="16200" fg:w="471"/><text x="1.6388%" y="223.50"></text></g><g><title>do_syscall_64 (9,002 samples, 0.77%)</title><rect x="0.6638%" y="245" width="0.7717%" height="15" fill="rgb(251,118,11)" fg:x="7743" fg:w="9002"/><text x="0.9138%" y="255.50"></text></g><g><title>syscall_exit_to_user_mode (646 samples, 0.06%)</title><rect x="1.3801%" y="229" width="0.0554%" height="15" fill="rgb(217,147,25)" fg:x="16099" fg:w="646"/><text x="1.6301%" y="239.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (9,429 samples, 0.81%)</title><rect x="0.6359%" y="261" width="0.8083%" height="15" fill="rgb(247,81,37)" fg:x="7418" fg:w="9429"/><text x="0.8859%" y="271.50"></text></g><g><title>__GI___sched_yield (11,505 samples, 0.99%)</title><rect x="0.4826%" y="277" width="0.9863%" height="15" fill="rgb(209,12,38)" fg:x="5630" fg:w="11505"/><text x="0.7326%" y="287.50"></text></g><g><title>syscall_return_via_sysret (288 samples, 0.02%)</title><rect x="1.4443%" y="261" width="0.0247%" height="15" fill="rgb(227,1,9)" fg:x="16847" fg:w="288"/><text x="1.6943%" y="271.50"></text></g><g><title>core::sync::atomic::spin_loop_hint (59,577 samples, 5.11%)</title><rect x="1.4728%" y="277" width="5.1074%" height="15" fill="rgb(248,47,43)" fg:x="17180" fg:w="59577"/><text x="1.7228%" y="287.50">core::..</text></g><g><title>core::hint::spin_loop (59,577 samples, 5.11%)</title><rect x="1.4728%" y="261" width="5.1074%" height="15" fill="rgb(221,10,30)" fg:x="17180" fg:w="59577"/><text x="1.7228%" y="271.50">core::..</text></g><g><title>core::core_arch::x86::sse2::_mm_pause (59,577 samples, 5.11%)</title><rect x="1.4728%" y="245" width="5.1074%" height="15" fill="rgb(210,229,1)" fg:x="17180" fg:w="59577"/><text x="1.7228%" y="255.50">core::..</text></g><g><title>crossbeam_utils::backoff::Backoff::snooze (71,198 samples, 6.10%)</title><rect x="0.4786%" y="293" width="6.1036%" height="15" fill="rgb(222,148,37)" fg:x="5583" fg:w="71198"/><text x="0.7286%" y="303.50">crossbea..</text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (601 samples, 0.05%)</title><rect x="6.5903%" y="261" width="0.0515%" height="15" fill="rgb(234,67,33)" fg:x="76875" fg:w="601"/><text x="6.8403%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (601 samples, 0.05%)</title><rect x="6.5903%" y="245" width="0.0515%" height="15" fill="rgb(247,98,35)" fg:x="76875" fg:w="601"/><text x="6.8403%" y="255.50"></text></g><g><title>core::bool::&lt;impl bool&gt;::then (377 samples, 0.03%)</title><rect x="6.6487%" y="245" width="0.0323%" height="15" fill="rgb(247,138,52)" fg:x="77556" fg:w="377"/><text x="6.8987%" y="255.50"></text></g><g><title>__entry_text_start (141 samples, 0.01%)</title><rect x="6.7199%" y="229" width="0.0121%" height="15" fill="rgb(213,79,30)" fg:x="78387" fg:w="141"/><text x="6.9699%" y="239.50"></text></g><g><title>__x64_sys_futex (121 samples, 0.01%)</title><rect x="6.7646%" y="213" width="0.0104%" height="15" fill="rgb(246,177,23)" fg:x="78908" fg:w="121"/><text x="7.0146%" y="223.50"></text></g><g><title>__get_user_nocheck_4 (163 samples, 0.01%)</title><rect x="6.8690%" y="149" width="0.0140%" height="15" fill="rgb(230,62,27)" fg:x="80126" fg:w="163"/><text x="7.1190%" y="159.50"></text></g><g><title>update_cfs_group (352 samples, 0.03%)</title><rect x="7.0567%" y="53" width="0.0302%" height="15" fill="rgb(216,154,8)" fg:x="82316" fg:w="352"/><text x="7.3067%" y="63.50"></text></g><g><title>reweight_entity (122 samples, 0.01%)</title><rect x="7.0765%" y="37" width="0.0105%" height="15" fill="rgb(244,35,45)" fg:x="82546" fg:w="122"/><text x="7.3265%" y="47.50"></text></g><g><title>update_curr (446 samples, 0.04%)</title><rect x="7.0869%" y="53" width="0.0382%" height="15" fill="rgb(251,115,12)" fg:x="82668" fg:w="446"/><text x="7.3369%" y="63.50"></text></g><g><title>__update_load_avg_cfs_rq (214 samples, 0.02%)</title><rect x="7.1433%" y="37" width="0.0183%" height="15" fill="rgb(240,54,50)" fg:x="83326" fg:w="214"/><text x="7.3933%" y="47.50"></text></g><g><title>update_load_avg (964 samples, 0.08%)</title><rect x="7.1252%" y="53" width="0.0826%" height="15" fill="rgb(233,84,52)" fg:x="83114" fg:w="964"/><text x="7.3752%" y="63.50"></text></g><g><title>__update_load_avg_se (538 samples, 0.05%)</title><rect x="7.1617%" y="37" width="0.0461%" height="15" fill="rgb(207,117,47)" fg:x="83540" fg:w="538"/><text x="7.4117%" y="47.50"></text></g><g><title>dequeue_entity (2,377 samples, 0.20%)</title><rect x="7.0106%" y="69" width="0.2038%" height="15" fill="rgb(249,43,39)" fg:x="81778" fg:w="2377"/><text x="7.2606%" y="79.50"></text></g><g><title>update_cfs_group (188 samples, 0.02%)</title><rect x="7.2144%" y="69" width="0.0161%" height="15" fill="rgb(209,38,44)" fg:x="84155" fg:w="188"/><text x="7.4644%" y="79.50"></text></g><g><title>dequeue_task_fair (2,973 samples, 0.25%)</title><rect x="6.9833%" y="85" width="0.2549%" height="15" fill="rgb(236,212,23)" fg:x="81459" fg:w="2973"/><text x="7.2333%" y="95.50"></text></g><g><title>dequeue_task (3,083 samples, 0.26%)</title><rect x="6.9745%" y="101" width="0.2643%" height="15" fill="rgb(242,79,21)" fg:x="81357" fg:w="3083"/><text x="7.2245%" y="111.50"></text></g><g><title>__perf_event_task_sched_in (813 samples, 0.07%)</title><rect x="7.2690%" y="85" width="0.0697%" height="15" fill="rgb(211,96,35)" fg:x="84792" fg:w="813"/><text x="7.5190%" y="95.50"></text></g><g><title>x86_pmu_enable (733 samples, 0.06%)</title><rect x="7.2759%" y="69" width="0.0628%" height="15" fill="rgb(253,215,40)" fg:x="84872" fg:w="733"/><text x="7.5259%" y="79.50"></text></g><g><title>intel_pmu_enable_all (705 samples, 0.06%)</title><rect x="7.2783%" y="53" width="0.0604%" height="15" fill="rgb(211,81,21)" fg:x="84900" fg:w="705"/><text x="7.5283%" y="63.50"></text></g><g><title>native_write_msr (643 samples, 0.06%)</title><rect x="7.2836%" y="37" width="0.0551%" height="15" fill="rgb(208,190,38)" fg:x="84962" fg:w="643"/><text x="7.5336%" y="47.50"></text></g><g><title>finish_task_switch.isra.0 (1,109 samples, 0.10%)</title><rect x="7.2476%" y="101" width="0.0951%" height="15" fill="rgb(235,213,38)" fg:x="84542" fg:w="1109"/><text x="7.4976%" y="111.50"></text></g><g><title>newidle_balance (384 samples, 0.03%)</title><rect x="7.3672%" y="69" width="0.0329%" height="15" fill="rgb(237,122,38)" fg:x="85937" fg:w="384"/><text x="7.6172%" y="79.50"></text></g><g><title>pick_next_task_fair (448 samples, 0.04%)</title><rect x="7.3620%" y="85" width="0.0384%" height="15" fill="rgb(244,218,35)" fg:x="85877" fg:w="448"/><text x="7.6120%" y="95.50"></text></g><g><title>__update_idle_core (379 samples, 0.03%)</title><rect x="7.4049%" y="53" width="0.0325%" height="15" fill="rgb(240,68,47)" fg:x="86377" fg:w="379"/><text x="7.6549%" y="63.50"></text></g><g><title>pick_next_task_idle (454 samples, 0.04%)</title><rect x="7.4004%" y="85" width="0.0389%" height="15" fill="rgb(210,16,53)" fg:x="86325" fg:w="454"/><text x="7.6504%" y="95.50"></text></g><g><title>set_next_task_idle (421 samples, 0.04%)</title><rect x="7.4033%" y="69" width="0.0361%" height="15" fill="rgb(235,124,12)" fg:x="86358" fg:w="421"/><text x="7.6533%" y="79.50"></text></g><g><title>put_prev_task_fair (175 samples, 0.02%)</title><rect x="7.4410%" y="85" width="0.0150%" height="15" fill="rgb(224,169,11)" fg:x="86798" fg:w="175"/><text x="7.6910%" y="95.50"></text></g><g><title>put_prev_entity (122 samples, 0.01%)</title><rect x="7.4455%" y="69" width="0.0105%" height="15" fill="rgb(250,166,2)" fg:x="86851" fg:w="122"/><text x="7.6955%" y="79.50"></text></g><g><title>pick_next_task (1,233 samples, 0.11%)</title><rect x="7.3517%" y="101" width="0.1057%" height="15" fill="rgb(242,216,29)" fg:x="85757" fg:w="1233"/><text x="7.6017%" y="111.50"></text></g><g><title>perf_event_context_sched_out (164 samples, 0.01%)</title><rect x="7.4760%" y="69" width="0.0141%" height="15" fill="rgb(230,116,27)" fg:x="87206" fg:w="164"/><text x="7.7260%" y="79.50"></text></g><g><title>__perf_event_task_sched_out (440 samples, 0.04%)</title><rect x="7.4649%" y="85" width="0.0377%" height="15" fill="rgb(228,99,48)" fg:x="87077" fg:w="440"/><text x="7.7149%" y="95.50"></text></g><g><title>x86_pmu_disable (134 samples, 0.01%)</title><rect x="7.4911%" y="69" width="0.0115%" height="15" fill="rgb(253,11,6)" fg:x="87383" fg:w="134"/><text x="7.7411%" y="79.50"></text></g><g><title>prepare_task_switch (496 samples, 0.04%)</title><rect x="7.4606%" y="101" width="0.0425%" height="15" fill="rgb(247,143,39)" fg:x="87027" fg:w="496"/><text x="7.7106%" y="111.50"></text></g><g><title>iterate_groups (175 samples, 0.02%)</title><rect x="7.5237%" y="85" width="0.0150%" height="15" fill="rgb(236,97,10)" fg:x="87763" fg:w="175"/><text x="7.7737%" y="95.50"></text></g><g><title>psi_group_change (1,997 samples, 0.17%)</title><rect x="7.5425%" y="85" width="0.1712%" height="15" fill="rgb(233,208,19)" fg:x="87982" fg:w="1997"/><text x="7.7925%" y="95.50"></text></g><g><title>psi_task_switch (2,527 samples, 0.22%)</title><rect x="7.5098%" y="101" width="0.2166%" height="15" fill="rgb(216,164,2)" fg:x="87601" fg:w="2527"/><text x="7.7598%" y="111.50"></text></g><g><title>sched_clock_cpu (143 samples, 0.01%)</title><rect x="7.7142%" y="85" width="0.0123%" height="15" fill="rgb(220,129,5)" fg:x="89985" fg:w="143"/><text x="7.9642%" y="95.50"></text></g><g><title>put_prev_task_fair (134 samples, 0.01%)</title><rect x="7.7264%" y="101" width="0.0115%" height="15" fill="rgb(242,17,10)" fg:x="90128" fg:w="134"/><text x="7.9764%" y="111.50"></text></g><g><title>__schedule (9,648 samples, 0.83%)</title><rect x="6.9370%" y="117" width="0.8271%" height="15" fill="rgb(242,107,0)" fg:x="80919" fg:w="9648"/><text x="7.1870%" y="127.50"></text></g><g><title>update_rq_clock (261 samples, 0.02%)</title><rect x="7.7417%" y="101" width="0.0224%" height="15" fill="rgb(251,28,31)" fg:x="90306" fg:w="261"/><text x="7.9917%" y="111.50"></text></g><g><title>sched_clock_cpu (170 samples, 0.01%)</title><rect x="7.7495%" y="85" width="0.0146%" height="15" fill="rgb(233,223,10)" fg:x="90397" fg:w="170"/><text x="7.9995%" y="95.50"></text></g><g><title>sched_clock (136 samples, 0.01%)</title><rect x="7.7524%" y="69" width="0.0117%" height="15" fill="rgb(215,21,27)" fg:x="90431" fg:w="136"/><text x="8.0024%" y="79.50"></text></g><g><title>native_sched_clock (134 samples, 0.01%)</title><rect x="7.7526%" y="53" width="0.0115%" height="15" fill="rgb(232,23,21)" fg:x="90433" fg:w="134"/><text x="8.0026%" y="63.50"></text></g><g><title>futex_wait_queue_me (10,287 samples, 0.88%)</title><rect x="6.8885%" y="149" width="0.8819%" height="15" fill="rgb(244,5,23)" fg:x="80353" fg:w="10287"/><text x="7.1385%" y="159.50"></text></g><g><title>schedule (9,938 samples, 0.85%)</title><rect x="6.9184%" y="133" width="0.8520%" height="15" fill="rgb(226,81,46)" fg:x="80702" fg:w="9938"/><text x="7.1684%" y="143.50"></text></g><g><title>futex_wait_setup (610 samples, 0.05%)</title><rect x="7.7703%" y="149" width="0.0523%" height="15" fill="rgb(247,70,30)" fg:x="90640" fg:w="610"/><text x="8.0203%" y="159.50"></text></g><g><title>hash_futex (203 samples, 0.02%)</title><rect x="7.8231%" y="149" width="0.0174%" height="15" fill="rgb(212,68,19)" fg:x="91255" fg:w="203"/><text x="8.0731%" y="159.50"></text></g><g><title>futex_wait (11,983 samples, 1.03%)</title><rect x="6.8155%" y="165" width="1.0273%" height="15" fill="rgb(240,187,13)" fg:x="79502" fg:w="11983"/><text x="7.0655%" y="175.50"></text></g><g><title>do_futex (12,094 samples, 1.04%)</title><rect x="6.8080%" y="181" width="1.0368%" height="15" fill="rgb(223,113,26)" fg:x="79414" fg:w="12094"/><text x="7.0580%" y="191.50"></text></g><g><title>__x64_sys_futex (12,331 samples, 1.06%)</title><rect x="6.7906%" y="197" width="1.0571%" height="15" fill="rgb(206,192,2)" fg:x="79211" fg:w="12331"/><text x="7.0406%" y="207.50"></text></g><g><title>__put_user_nocheck_8 (119 samples, 0.01%)</title><rect x="7.9123%" y="133" width="0.0102%" height="15" fill="rgb(241,108,4)" fg:x="92296" fg:w="119"/><text x="8.1623%" y="143.50"></text></g><g><title>__get_user_8 (345 samples, 0.03%)</title><rect x="7.9300%" y="117" width="0.0296%" height="15" fill="rgb(247,173,49)" fg:x="92503" fg:w="345"/><text x="8.1800%" y="127.50"></text></g><g><title>__rseq_handle_notify_resume (806 samples, 0.07%)</title><rect x="7.8964%" y="149" width="0.0691%" height="15" fill="rgb(224,114,35)" fg:x="92110" fg:w="806"/><text x="8.1464%" y="159.50"></text></g><g><title>rseq_ip_fixup (491 samples, 0.04%)</title><rect x="7.9234%" y="133" width="0.0421%" height="15" fill="rgb(245,159,27)" fg:x="92425" fg:w="491"/><text x="8.1734%" y="143.50"></text></g><g><title>exit_to_user_mode_loop (1,196 samples, 0.10%)</title><rect x="7.8685%" y="165" width="0.1025%" height="15" fill="rgb(245,172,44)" fg:x="91785" fg:w="1196"/><text x="8.1185%" y="175.50"></text></g><g><title>exit_to_user_mode_prepare (1,525 samples, 0.13%)</title><rect x="7.8562%" y="181" width="0.1307%" height="15" fill="rgb(236,23,11)" fg:x="91641" fg:w="1525"/><text x="8.1062%" y="191.50"></text></g><g><title>switch_fpu_return (167 samples, 0.01%)</title><rect x="7.9726%" y="165" width="0.0143%" height="15" fill="rgb(205,117,38)" fg:x="92999" fg:w="167"/><text x="8.2226%" y="175.50"></text></g><g><title>do_syscall_64 (14,159 samples, 1.21%)</title><rect x="6.7750%" y="213" width="1.2138%" height="15" fill="rgb(237,72,25)" fg:x="79029" fg:w="14159"/><text x="7.0250%" y="223.50"></text></g><g><title>syscall_exit_to_user_mode (1,586 samples, 0.14%)</title><rect x="7.8528%" y="197" width="0.1360%" height="15" fill="rgb(244,70,9)" fg:x="91602" fg:w="1586"/><text x="8.1028%" y="207.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (14,670 samples, 1.26%)</title><rect x="6.7340%" y="229" width="1.2576%" height="15" fill="rgb(217,125,39)" fg:x="78551" fg:w="14670"/><text x="6.9840%" y="239.50"></text></g><g><title>std::sys_common::thread_parker::futex::Parker::park (16,601 samples, 1.42%)</title><rect x="6.5897%" y="277" width="1.4232%" height="15" fill="rgb(235,36,10)" fg:x="76868" fg:w="16601"/><text x="6.8397%" y="287.50"></text></g><g><title>std::sys::unix::futex::futex_wait (15,929 samples, 1.37%)</title><rect x="6.6473%" y="261" width="1.3656%" height="15" fill="rgb(251,123,47)" fg:x="77540" fg:w="15929"/><text x="6.8973%" y="271.50"></text></g><g><title>syscall (15,503 samples, 1.33%)</title><rect x="6.6838%" y="245" width="1.3290%" height="15" fill="rgb(221,13,13)" fg:x="77966" fg:w="15503"/><text x="6.9338%" y="255.50"></text></g><g><title>syscall_return_via_sysret (247 samples, 0.02%)</title><rect x="7.9917%" y="229" width="0.0212%" height="15" fill="rgb(238,131,9)" fg:x="93222" fg:w="247"/><text x="8.2417%" y="239.50"></text></g><g><title>crossbeam_channel::context::Context::wait_until (88,843 samples, 7.62%)</title><rect x="0.4113%" y="309" width="7.6163%" height="15" fill="rgb(211,50,8)" fg:x="4798" fg:w="88843"/><text x="0.6613%" y="319.50">crossbeam_..</text></g><g><title>std::thread::park (16,860 samples, 1.45%)</title><rect x="6.5822%" y="293" width="1.4454%" height="15" fill="rgb(245,182,24)" fg:x="76781" fg:w="16860"/><text x="6.8322%" y="303.50"></text></g><g><title>std::thread::current (172 samples, 0.01%)</title><rect x="8.0129%" y="277" width="0.0147%" height="15" fill="rgb(242,14,37)" fg:x="93469" fg:w="172"/><text x="8.2629%" y="287.50"></text></g><g><title>std::sys_common::thread_info::current_thread (167 samples, 0.01%)</title><rect x="8.0133%" y="261" width="0.0143%" height="15" fill="rgb(246,228,12)" fg:x="93474" fg:w="167"/><text x="8.2633%" y="271.50"></text></g><g><title>std::sys_common::thread_info::ThreadInfo::with (167 samples, 0.01%)</title><rect x="8.0133%" y="245" width="0.0143%" height="15" fill="rgb(213,55,15)" fg:x="93474" fg:w="167"/><text x="8.2633%" y="255.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (167 samples, 0.01%)</title><rect x="8.0133%" y="229" width="0.0143%" height="15" fill="rgb(209,9,3)" fg:x="93474" fg:w="167"/><text x="8.2633%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (130 samples, 0.01%)</title><rect x="8.0352%" y="293" width="0.0111%" height="15" fill="rgb(230,59,30)" fg:x="93730" fg:w="130"/><text x="8.2852%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_store (130 samples, 0.01%)</title><rect x="8.0352%" y="277" width="0.0111%" height="15" fill="rgb(209,121,21)" fg:x="93730" fg:w="130"/><text x="8.2852%" y="287.50"></text></g><g><title>crossbeam_channel::waker::Waker::register (121 samples, 0.01%)</title><rect x="8.0464%" y="293" width="0.0104%" height="15" fill="rgb(220,109,13)" fg:x="93860" fg:w="121"/><text x="8.2964%" y="303.50"></text></g><g><title>crossbeam_channel::waker::Waker::register_with_packet (121 samples, 0.01%)</title><rect x="8.0464%" y="277" width="0.0104%" height="15" fill="rgb(232,18,1)" fg:x="93860" fg:w="121"/><text x="8.2964%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (252 samples, 0.02%)</title><rect x="8.0588%" y="245" width="0.0216%" height="15" fill="rgb(215,41,42)" fg:x="94005" fg:w="252"/><text x="8.3088%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (252 samples, 0.02%)</title><rect x="8.0588%" y="229" width="0.0216%" height="15" fill="rgb(224,123,36)" fg:x="94005" fg:w="252"/><text x="8.3088%" y="239.50"></text></g><g><title>crossbeam_channel::context::Context::with (89,840 samples, 7.70%)</title><rect x="0.3787%" y="389" width="7.7018%" height="15" fill="rgb(240,125,3)" fg:x="4418" fg:w="89840"/><text x="0.6287%" y="399.50">crossbeam_c..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (89,804 samples, 7.70%)</title><rect x="0.3818%" y="373" width="7.6987%" height="15" fill="rgb(205,98,50)" fg:x="4454" fg:w="89804"/><text x="0.6318%" y="383.50">std::thread..</text></g><g><title>crossbeam_channel::context::Context::with::{{closure}} (89,787 samples, 7.70%)</title><rect x="0.3833%" y="357" width="7.6972%" height="15" fill="rgb(205,185,37)" fg:x="4471" fg:w="89787"/><text x="0.6333%" y="367.50">crossbeam_c..</text></g><g><title>crossbeam_channel::context::Context::with::{{closure}} (89,491 samples, 7.67%)</title><rect x="0.4087%" y="341" width="7.6718%" height="15" fill="rgb(238,207,15)" fg:x="4767" fg:w="89491"/><text x="0.6587%" y="351.50">crossbeam_c..</text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::send::{{closure}} (89,480 samples, 7.67%)</title><rect x="0.4096%" y="325" width="7.6709%" height="15" fill="rgb(213,199,42)" fg:x="4778" fg:w="89480"/><text x="0.6596%" y="335.50">crossbeam_c..</text></g><g><title>crossbeam_channel::waker::SyncWaker::register (610 samples, 0.05%)</title><rect x="8.0282%" y="309" width="0.0523%" height="15" fill="rgb(235,201,11)" fg:x="93648" fg:w="610"/><text x="8.2782%" y="319.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (277 samples, 0.02%)</title><rect x="8.0568%" y="293" width="0.0237%" height="15" fill="rgb(207,46,11)" fg:x="93981" fg:w="277"/><text x="8.3068%" y="303.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (253 samples, 0.02%)</title><rect x="8.0588%" y="277" width="0.0217%" height="15" fill="rgb(241,35,35)" fg:x="94005" fg:w="253"/><text x="8.3088%" y="287.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (253 samples, 0.02%)</title><rect x="8.0588%" y="261" width="0.0217%" height="15" fill="rgb(243,32,47)" fg:x="94005" fg:w="253"/><text x="8.3088%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1,273 samples, 0.11%)</title><rect x="8.1469%" y="373" width="0.1091%" height="15" fill="rgb(247,202,23)" fg:x="95033" fg:w="1273"/><text x="8.3969%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_load (1,264 samples, 0.11%)</title><rect x="8.1477%" y="357" width="0.1084%" height="15" fill="rgb(219,102,11)" fg:x="95042" fg:w="1264"/><text x="8.3977%" y="367.50"></text></g><g><title>core::sync::atomic::fence (1,318 samples, 0.11%)</title><rect x="8.2561%" y="373" width="0.1130%" height="15" fill="rgb(243,110,44)" fg:x="96306" fg:w="1318"/><text x="8.5061%" y="383.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::start_send (3,369 samples, 0.29%)</title><rect x="8.0805%" y="389" width="0.2888%" height="15" fill="rgb(222,74,54)" fg:x="94258" fg:w="3369"/><text x="8.3305%" y="399.50"></text></g><g><title>__entry_text_start (928 samples, 0.08%)</title><rect x="8.4545%" y="357" width="0.0796%" height="15" fill="rgb(216,99,12)" fg:x="98621" fg:w="928"/><text x="8.7045%" y="367.50"></text></g><g><title>__x64_sys_sched_yield (298 samples, 0.03%)</title><rect x="8.5592%" y="341" width="0.0255%" height="15" fill="rgb(226,22,26)" fg:x="99842" fg:w="298"/><text x="8.8092%" y="351.50"></text></g><g><title>_raw_spin_lock (308 samples, 0.03%)</title><rect x="8.6422%" y="293" width="0.0264%" height="15" fill="rgb(217,163,10)" fg:x="100810" fg:w="308"/><text x="8.8922%" y="303.50"></text></g><g><title>_raw_spin_lock (282 samples, 0.02%)</title><rect x="8.7818%" y="261" width="0.0242%" height="15" fill="rgb(213,25,53)" fg:x="102438" fg:w="282"/><text x="9.0318%" y="271.50"></text></g><g><title>pick_next_entity (155 samples, 0.01%)</title><rect x="8.8279%" y="245" width="0.0133%" height="15" fill="rgb(252,105,26)" fg:x="102976" fg:w="155"/><text x="9.0779%" y="255.50"></text></g><g><title>pick_next_entity (327 samples, 0.03%)</title><rect x="8.9210%" y="229" width="0.0280%" height="15" fill="rgb(220,39,43)" fg:x="104062" fg:w="327"/><text x="9.1710%" y="239.50"></text></g><g><title>__calc_delta (634 samples, 0.05%)</title><rect x="9.0317%" y="213" width="0.0544%" height="15" fill="rgb(229,68,48)" fg:x="105354" fg:w="634"/><text x="9.2817%" y="223.50"></text></g><g><title>__cgroup_account_cputime (382 samples, 0.03%)</title><rect x="9.0861%" y="213" width="0.0327%" height="15" fill="rgb(252,8,32)" fg:x="105988" fg:w="382"/><text x="9.3361%" y="223.50"></text></g><g><title>cpuacct_charge (429 samples, 0.04%)</title><rect x="9.1203%" y="213" width="0.0368%" height="15" fill="rgb(223,20,43)" fg:x="106387" fg:w="429"/><text x="9.3703%" y="223.50"></text></g><g><title>update_curr (2,488 samples, 0.21%)</title><rect x="8.9537%" y="229" width="0.2133%" height="15" fill="rgb(229,81,49)" fg:x="104444" fg:w="2488"/><text x="9.2037%" y="239.50"></text></g><g><title>pick_next_task_fair (4,034 samples, 0.35%)</title><rect x="8.8412%" y="245" width="0.3458%" height="15" fill="rgb(236,28,36)" fg:x="103131" fg:w="4034"/><text x="9.0912%" y="255.50"></text></g><g><title>update_min_vruntime (233 samples, 0.02%)</title><rect x="9.1670%" y="229" width="0.0200%" height="15" fill="rgb(249,185,26)" fg:x="106932" fg:w="233"/><text x="9.4170%" y="239.50"></text></g><g><title>pick_next_task (4,495 samples, 0.39%)</title><rect x="8.8070%" y="261" width="0.3853%" height="15" fill="rgb(249,174,33)" fg:x="102733" fg:w="4495"/><text x="9.0570%" y="271.50"></text></g><g><title>__schedule (7,232 samples, 0.62%)</title><rect x="8.6898%" y="277" width="0.6200%" height="15" fill="rgb(233,201,37)" fg:x="101365" fg:w="7232"/><text x="8.9398%" y="287.50"></text></g><g><title>update_rq_clock (1,134 samples, 0.10%)</title><rect x="9.2125%" y="261" width="0.0972%" height="15" fill="rgb(221,78,26)" fg:x="107463" fg:w="1134"/><text x="9.4625%" y="271.50"></text></g><g><title>sched_clock_cpu (694 samples, 0.06%)</title><rect x="9.2503%" y="245" width="0.0595%" height="15" fill="rgb(250,127,30)" fg:x="107903" fg:w="694"/><text x="9.5003%" y="255.50"></text></g><g><title>sched_clock (538 samples, 0.05%)</title><rect x="9.2636%" y="229" width="0.0461%" height="15" fill="rgb(230,49,44)" fg:x="108059" fg:w="538"/><text x="9.5136%" y="239.50"></text></g><g><title>native_sched_clock (528 samples, 0.05%)</title><rect x="9.2645%" y="213" width="0.0453%" height="15" fill="rgb(229,67,23)" fg:x="108069" fg:w="528"/><text x="9.5145%" y="223.50"></text></g><g><title>schedule (7,513 samples, 0.64%)</title><rect x="8.6760%" y="293" width="0.6441%" height="15" fill="rgb(249,83,47)" fg:x="101204" fg:w="7513"/><text x="8.9260%" y="303.50"></text></g><g><title>do_sched_yield (8,377 samples, 0.72%)</title><rect x="8.6125%" y="309" width="0.7181%" height="15" fill="rgb(215,43,3)" fg:x="100464" fg:w="8377"/><text x="8.8625%" y="319.50"></text></g><g><title>yield_task_fair (124 samples, 0.01%)</title><rect x="9.3200%" y="293" width="0.0106%" height="15" fill="rgb(238,154,13)" fg:x="108717" fg:w="124"/><text x="9.5700%" y="303.50"></text></g><g><title>__x64_sys_sched_yield (8,791 samples, 0.75%)</title><rect x="8.6115%" y="325" width="0.7536%" height="15" fill="rgb(219,56,2)" fg:x="100452" fg:w="8791"/><text x="8.8615%" y="335.50"></text></g><g><title>yield_task_fair (289 samples, 0.02%)</title><rect x="9.3404%" y="309" width="0.0248%" height="15" fill="rgb(233,0,4)" fg:x="108954" fg:w="289"/><text x="9.5904%" y="319.50"></text></g><g><title>exit_to_user_mode_prepare (460 samples, 0.04%)</title><rect x="9.3868%" y="309" width="0.0394%" height="15" fill="rgb(235,30,7)" fg:x="109496" fg:w="460"/><text x="9.6368%" y="319.50"></text></g><g><title>do_syscall_64 (9,889 samples, 0.85%)</title><rect x="8.5848%" y="341" width="0.8478%" height="15" fill="rgb(250,79,13)" fg:x="100140" fg:w="9889"/><text x="8.8348%" y="351.50"></text></g><g><title>syscall_exit_to_user_mode (611 samples, 0.05%)</title><rect x="9.3801%" y="325" width="0.0524%" height="15" fill="rgb(211,146,34)" fg:x="109418" fg:w="611"/><text x="9.6301%" y="335.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (10,540 samples, 0.90%)</title><rect x="8.5363%" y="357" width="0.9036%" height="15" fill="rgb(228,22,38)" fg:x="99575" fg:w="10540"/><text x="8.7863%" y="367.50"></text></g><g><title>__GI___sched_yield (12,620 samples, 1.08%)</title><rect x="8.3842%" y="373" width="1.0819%" height="15" fill="rgb(235,168,5)" fg:x="97801" fg:w="12620"/><text x="8.6342%" y="383.50"></text></g><g><title>syscall_return_via_sysret (306 samples, 0.03%)</title><rect x="9.4399%" y="357" width="0.0262%" height="15" fill="rgb(221,155,16)" fg:x="110115" fg:w="306"/><text x="9.6899%" y="367.50"></text></g><g><title>core::sync::atomic::spin_loop_hint (61,008 samples, 5.23%)</title><rect x="9.4695%" y="373" width="5.2301%" height="15" fill="rgb(215,215,53)" fg:x="110460" fg:w="61008"/><text x="9.7195%" y="383.50">core::..</text></g><g><title>core::hint::spin_loop (61,008 samples, 5.23%)</title><rect x="9.4695%" y="357" width="5.2301%" height="15" fill="rgb(223,4,10)" fg:x="110460" fg:w="61008"/><text x="9.7195%" y="367.50">core::..</text></g><g><title>core::core_arch::x86::sse2::_mm_pause (61,008 samples, 5.23%)</title><rect x="9.4695%" y="341" width="5.2301%" height="15" fill="rgb(234,103,6)" fg:x="110460" fg:w="61008"/><text x="9.7195%" y="351.50">core::..</text></g><g><title>std::panic::catch_unwind (170,307 samples, 14.60%)</title><rect x="0.1083%" y="533" width="14.6000%" height="15" fill="rgb(227,97,0)" fg:x="1263" fg:w="170307"/><text x="0.3583%" y="543.50">std::panic::catch_unwi..</text></g><g><title>std::panicking::try (170,307 samples, 14.60%)</title><rect x="0.1083%" y="517" width="14.6000%" height="15" fill="rgb(234,150,53)" fg:x="1263" fg:w="170307"/><text x="0.3583%" y="527.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (170,307 samples, 14.60%)</title><rect x="0.1083%" y="501" width="14.6000%" height="15" fill="rgb(228,201,54)" fg:x="1263" fg:w="170307"/><text x="0.3583%" y="511.50">std::panicking::try::d..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (170,307 samples, 14.60%)</title><rect x="0.1083%" y="485" width="14.6000%" height="15" fill="rgb(222,22,37)" fg:x="1263" fg:w="170307"/><text x="0.3583%" y="495.50">&lt;core::panic::unwind_s..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (170,307 samples, 14.60%)</title><rect x="0.1083%" y="469" width="14.6000%" height="15" fill="rgb(237,53,32)" fg:x="1263" fg:w="170307"/><text x="0.3583%" y="479.50">std::thread::Builder::..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (170,307 samples, 14.60%)</title><rect x="0.1083%" y="453" width="14.6000%" height="15" fill="rgb(233,25,53)" fg:x="1263" fg:w="170307"/><text x="0.3583%" y="463.50">std::sys_common::backt..</text></g><g><title>zip_password_finder::start_password_reader::{{closure}} (170,307 samples, 14.60%)</title><rect x="0.1083%" y="437" width="14.6000%" height="15" fill="rgb(210,40,34)" fg:x="1263" fg:w="170307"/><text x="0.3583%" y="447.50">zip_password_finder::s..</text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (167,610 samples, 14.37%)</title><rect x="0.3395%" y="421" width="14.3688%" height="15" fill="rgb(241,220,44)" fg:x="3960" fg:w="167610"/><text x="0.5895%" y="431.50">crossbeam_channel::cha..</text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::send (167,357 samples, 14.35%)</title><rect x="0.3612%" y="405" width="14.3471%" height="15" fill="rgb(235,28,35)" fg:x="4213" fg:w="167357"/><text x="0.6112%" y="415.50">crossbeam_channel::fla..</text></g><g><title>crossbeam_utils::backoff::Backoff::snooze (73,934 samples, 6.34%)</title><rect x="8.3701%" y="389" width="6.3382%" height="15" fill="rgb(210,56,17)" fg:x="97636" fg:w="73934"/><text x="8.6201%" y="399.50">crossbea..</text></g><g><title>__clone3 (170,308 samples, 14.60%)</title><rect x="0.1083%" y="645" width="14.6001%" height="15" fill="rgb(224,130,29)" fg:x="1263" fg:w="170308"/><text x="0.3583%" y="655.50">__clone3</text></g><g><title>start_thread (170,308 samples, 14.60%)</title><rect x="0.1083%" y="629" width="14.6001%" height="15" fill="rgb(235,212,8)" fg:x="1263" fg:w="170308"/><text x="0.3583%" y="639.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (170,308 samples, 14.60%)</title><rect x="0.1083%" y="613" width="14.6001%" height="15" fill="rgb(223,33,50)" fg:x="1263" fg:w="170308"/><text x="0.3583%" y="623.50">std::sys::unix::thread..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (170,308 samples, 14.60%)</title><rect x="0.1083%" y="597" width="14.6001%" height="15" fill="rgb(219,149,13)" fg:x="1263" fg:w="170308"/><text x="0.3583%" y="607.50">&lt;alloc::boxed::Box&lt;F,A..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (170,308 samples, 14.60%)</title><rect x="0.1083%" y="581" width="14.6001%" height="15" fill="rgb(250,156,29)" fg:x="1263" fg:w="170308"/><text x="0.3583%" y="591.50">&lt;alloc::boxed::Box&lt;F,A..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (170,308 samples, 14.60%)</title><rect x="0.1083%" y="565" width="14.6001%" height="15" fill="rgb(216,193,19)" fg:x="1263" fg:w="170308"/><text x="0.3583%" y="575.50">core::ops::function::F..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (170,308 samples, 14.60%)</title><rect x="0.1083%" y="549" width="14.6001%" height="15" fill="rgb(216,135,14)" fg:x="1263" fg:w="170308"/><text x="0.3583%" y="559.50">std::thread::Builder::..</text></g><g><title>entry_SYSCALL_64_after_hwframe (175 samples, 0.02%)</title><rect x="14.7120%" y="645" width="0.0150%" height="15" fill="rgb(241,47,5)" fg:x="171613" fg:w="175"/><text x="14.9620%" y="655.50"></text></g><g><title>entry_SYSCALL_64_safe_stack (280 samples, 0.02%)</title><rect x="14.7270%" y="645" width="0.0240%" height="15" fill="rgb(233,42,35)" fg:x="171788" fg:w="280"/><text x="14.9770%" y="655.50"></text></g><g><title>password-reader (172,178 samples, 14.76%)</title><rect x="0.0000%" y="661" width="14.7604%" height="15" fill="rgb(231,13,6)" fg:x="0" fg:w="172178"/><text x="0.2500%" y="671.50">password-reader</text></g><g><title>sha1::compress::compress (305 samples, 0.03%)</title><rect x="14.7637%" y="629" width="0.0261%" height="15" fill="rgb(207,181,40)" fg:x="172217" fg:w="305"/><text x="15.0137%" y="639.50"></text></g><g><title>sha1::compress::soft::compress (254 samples, 0.02%)</title><rect x="14.7899%" y="629" width="0.0218%" height="15" fill="rgb(254,173,49)" fg:x="172522" fg:w="254"/><text x="15.0399%" y="639.50"></text></g><g><title>[anon] (593 samples, 0.05%)</title><rect x="14.7624%" y="645" width="0.0508%" height="15" fill="rgb(221,1,38)" fg:x="172201" fg:w="593"/><text x="15.0124%" y="655.50"></text></g><g><title>__memcpy_avx_unaligned_erms (151 samples, 0.01%)</title><rect x="14.8141%" y="629" width="0.0129%" height="15" fill="rgb(206,124,46)" fg:x="172805" fg:w="151"/><text x="15.0641%" y="639.50"></text></g><g><title>__memset_avx2_unaligned_erms (242 samples, 0.02%)</title><rect x="14.8271%" y="629" width="0.0207%" height="15" fill="rgb(249,21,11)" fg:x="172956" fg:w="242"/><text x="15.0771%" y="639.50"></text></g><g><title>sha1::compress::compress (494 samples, 0.04%)</title><rect x="14.8484%" y="629" width="0.0423%" height="15" fill="rgb(222,201,40)" fg:x="173205" fg:w="494"/><text x="15.0984%" y="639.50"></text></g><g><title>sha1::compress::x86::compress (493 samples, 0.04%)</title><rect x="14.8485%" y="613" width="0.0423%" height="15" fill="rgb(235,61,29)" fg:x="173206" fg:w="493"/><text x="15.0985%" y="623.50"></text></g><g><title>sha1::compress::soft::compress (1,745 samples, 0.15%)</title><rect x="14.8908%" y="629" width="0.1496%" height="15" fill="rgb(219,207,3)" fg:x="173699" fg:w="1745"/><text x="15.1408%" y="639.50"></text></g><g><title>[unknown] (2,661 samples, 0.23%)</title><rect x="14.8132%" y="645" width="0.2281%" height="15" fill="rgb(222,56,46)" fg:x="172794" fg:w="2661"/><text x="15.0632%" y="655.50"></text></g><g><title>enqueue_task (162 samples, 0.01%)</title><rect x="15.0603%" y="101" width="0.0139%" height="15" fill="rgb(239,76,54)" fg:x="175677" fg:w="162"/><text x="15.3103%" y="111.50"></text></g><g><title>ttwu_do_activate (189 samples, 0.02%)</title><rect x="15.0595%" y="117" width="0.0162%" height="15" fill="rgb(231,124,27)" fg:x="175667" fg:w="189"/><text x="15.3095%" y="127.50"></text></g><g><title>futex_wake (310 samples, 0.03%)</title><rect x="15.0504%" y="165" width="0.0266%" height="15" fill="rgb(249,195,6)" fg:x="175561" fg:w="310"/><text x="15.3004%" y="175.50"></text></g><g><title>wake_up_q (256 samples, 0.02%)</title><rect x="15.0550%" y="149" width="0.0219%" height="15" fill="rgb(237,174,47)" fg:x="175615" fg:w="256"/><text x="15.3050%" y="159.50"></text></g><g><title>try_to_wake_up (250 samples, 0.02%)</title><rect x="15.0555%" y="133" width="0.0214%" height="15" fill="rgb(206,201,31)" fg:x="175621" fg:w="250"/><text x="15.3055%" y="143.50"></text></g><g><title>do_futex (326 samples, 0.03%)</title><rect x="15.0495%" y="181" width="0.0279%" height="15" fill="rgb(231,57,52)" fg:x="175550" fg:w="326"/><text x="15.2995%" y="191.50"></text></g><g><title>__x64_sys_futex (334 samples, 0.03%)</title><rect x="15.0489%" y="197" width="0.0286%" height="15" fill="rgb(248,177,22)" fg:x="175543" fg:w="334"/><text x="15.2989%" y="207.50"></text></g><g><title>do_syscall_64 (346 samples, 0.03%)</title><rect x="15.0485%" y="213" width="0.0297%" height="15" fill="rgb(215,211,37)" fg:x="175539" fg:w="346"/><text x="15.2985%" y="223.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (348 samples, 0.03%)</title><rect x="15.0484%" y="229" width="0.0298%" height="15" fill="rgb(241,128,51)" fg:x="175538" fg:w="348"/><text x="15.2984%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (371 samples, 0.03%)</title><rect x="15.0465%" y="341" width="0.0318%" height="15" fill="rgb(227,165,31)" fg:x="175516" fg:w="371"/><text x="15.2965%" y="351.50"></text></g><g><title>crossbeam_channel::waker::Waker::try_select::{{closure}} (371 samples, 0.03%)</title><rect x="15.0465%" y="325" width="0.0318%" height="15" fill="rgb(228,167,24)" fg:x="175516" fg:w="371"/><text x="15.2965%" y="335.50"></text></g><g><title>crossbeam_channel::context::Context::unpark (364 samples, 0.03%)</title><rect x="15.0471%" y="309" width="0.0312%" height="15" fill="rgb(228,143,12)" fg:x="175523" fg:w="364"/><text x="15.2971%" y="319.50"></text></g><g><title>std::thread::Thread::unpark (364 samples, 0.03%)</title><rect x="15.0471%" y="293" width="0.0312%" height="15" fill="rgb(249,149,8)" fg:x="175523" fg:w="364"/><text x="15.2971%" y="303.50"></text></g><g><title>std::sys_common::thread_parker::futex::Parker::unpark (363 samples, 0.03%)</title><rect x="15.0472%" y="277" width="0.0311%" height="15" fill="rgb(243,35,44)" fg:x="175524" fg:w="363"/><text x="15.2972%" y="287.50"></text></g><g><title>std::sys::unix::futex::futex_wake (360 samples, 0.03%)</title><rect x="15.0475%" y="261" width="0.0309%" height="15" fill="rgb(246,89,9)" fg:x="175527" fg:w="360"/><text x="15.2975%" y="271.50"></text></g><g><title>syscall (359 samples, 0.03%)</title><rect x="15.0476%" y="245" width="0.0308%" height="15" fill="rgb(233,213,13)" fg:x="175528" fg:w="359"/><text x="15.2976%" y="255.50"></text></g><g><title>crossbeam_channel::waker::Waker::try_select (375 samples, 0.03%)</title><rect x="15.0465%" y="357" width="0.0321%" height="15" fill="rgb(233,141,41)" fg:x="175516" fg:w="375"/><text x="15.2965%" y="367.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::read (399 samples, 0.03%)</title><rect x="15.0456%" y="389" width="0.0342%" height="15" fill="rgb(239,167,4)" fg:x="175505" fg:w="399"/><text x="15.2956%" y="399.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (397 samples, 0.03%)</title><rect x="15.0458%" y="373" width="0.0340%" height="15" fill="rgb(209,217,16)" fg:x="175507" fg:w="397"/><text x="15.2958%" y="383.50"></text></g><g><title>crossbeam_channel::channel::Receiver&lt;T&gt;::recv (416 samples, 0.04%)</title><rect x="15.0452%" y="421" width="0.0357%" height="15" fill="rgb(219,88,35)" fg:x="175500" fg:w="416"/><text x="15.2952%" y="431.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::recv (414 samples, 0.04%)</title><rect x="15.0453%" y="405" width="0.0355%" height="15" fill="rgb(220,193,23)" fg:x="175502" fg:w="414"/><text x="15.2953%" y="415.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (133 samples, 0.01%)</title><rect x="15.0955%" y="325" width="0.0114%" height="15" fill="rgb(230,90,52)" fg:x="176087" fg:w="133"/><text x="15.3455%" y="335.50"></text></g><g><title>&lt;std::fs::File as std::io::Seek&gt;::seek (175 samples, 0.02%)</title><rect x="15.0924%" y="373" width="0.0150%" height="15" fill="rgb(252,106,19)" fg:x="176051" fg:w="175"/><text x="15.3424%" y="383.50"></text></g><g><title>std::sys::unix::fs::File::seek (175 samples, 0.02%)</title><rect x="15.0924%" y="357" width="0.0150%" height="15" fill="rgb(206,74,20)" fg:x="176051" fg:w="175"/><text x="15.3424%" y="367.50"></text></g><g><title>__lseek64 (170 samples, 0.01%)</title><rect x="15.0928%" y="341" width="0.0146%" height="15" fill="rgb(230,138,44)" fg:x="176056" fg:w="170"/><text x="15.3428%" y="351.50"></text></g><g><title>__x64_sys_read (155 samples, 0.01%)</title><rect x="15.1124%" y="213" width="0.0133%" height="15" fill="rgb(235,182,43)" fg:x="176284" fg:w="155"/><text x="15.3624%" y="223.50"></text></g><g><title>ksys_read (153 samples, 0.01%)</title><rect x="15.1126%" y="197" width="0.0131%" height="15" fill="rgb(242,16,51)" fg:x="176286" fg:w="153"/><text x="15.3626%" y="207.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (179 samples, 0.02%)</title><rect x="15.1114%" y="245" width="0.0153%" height="15" fill="rgb(248,9,4)" fg:x="176273" fg:w="179"/><text x="15.3614%" y="255.50"></text></g><g><title>do_syscall_64 (170 samples, 0.01%)</title><rect x="15.1122%" y="229" width="0.0146%" height="15" fill="rgb(210,31,22)" fg:x="176282" fg:w="170"/><text x="15.3622%" y="239.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (228 samples, 0.02%)</title><rect x="15.1074%" y="325" width="0.0195%" height="15" fill="rgb(239,54,39)" fg:x="176226" fg:w="228"/><text x="15.3574%" y="335.50"></text></g><g><title>std::sys::unix::fs::File::read (226 samples, 0.02%)</title><rect x="15.1076%" y="309" width="0.0194%" height="15" fill="rgb(230,99,41)" fg:x="176228" fg:w="226"/><text x="15.3576%" y="319.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (226 samples, 0.02%)</title><rect x="15.1076%" y="293" width="0.0194%" height="15" fill="rgb(253,106,12)" fg:x="176228" fg:w="226"/><text x="15.3576%" y="303.50"></text></g><g><title>__GI___libc_read (225 samples, 0.02%)</title><rect x="15.1077%" y="277" width="0.0193%" height="15" fill="rgb(213,46,41)" fg:x="176229" fg:w="225"/><text x="15.3577%" y="287.50"></text></g><g><title>__GI___libc_read (221 samples, 0.02%)</title><rect x="15.1080%" y="261" width="0.0189%" height="15" fill="rgb(215,133,35)" fg:x="176233" fg:w="221"/><text x="15.3580%" y="271.50"></text></g><g><title>byteorder::io::ReadBytesExt::read_u16 (229 samples, 0.02%)</title><rect x="15.1074%" y="373" width="0.0196%" height="15" fill="rgb(213,28,5)" fg:x="176226" fg:w="229"/><text x="15.3574%" y="383.50"></text></g><g><title>std::io::Read::read_exact (229 samples, 0.02%)</title><rect x="15.1074%" y="357" width="0.0196%" height="15" fill="rgb(215,77,49)" fg:x="176226" fg:w="229"/><text x="15.3574%" y="367.50"></text></g><g><title>std::io::default_read_exact (229 samples, 0.02%)</title><rect x="15.1074%" y="341" width="0.0196%" height="15" fill="rgb(248,100,22)" fg:x="176226" fg:w="229"/><text x="15.3574%" y="351.50"></text></g><g><title>new_sync_read (117 samples, 0.01%)</title><rect x="15.1331%" y="165" width="0.0100%" height="15" fill="rgb(208,67,9)" fg:x="176526" fg:w="117"/><text x="15.3831%" y="175.50"></text></g><g><title>__x64_sys_read (187 samples, 0.02%)</title><rect x="15.1294%" y="213" width="0.0160%" height="15" fill="rgb(219,133,21)" fg:x="176482" fg:w="187"/><text x="15.3794%" y="223.50"></text></g><g><title>ksys_read (187 samples, 0.02%)</title><rect x="15.1294%" y="197" width="0.0160%" height="15" fill="rgb(246,46,29)" fg:x="176482" fg:w="187"/><text x="15.3794%" y="207.50"></text></g><g><title>vfs_read (162 samples, 0.01%)</title><rect x="15.1315%" y="181" width="0.0139%" height="15" fill="rgb(246,185,52)" fg:x="176507" fg:w="162"/><text x="15.3815%" y="191.50"></text></g><g><title>do_syscall_64 (196 samples, 0.02%)</title><rect x="15.1294%" y="229" width="0.0168%" height="15" fill="rgb(252,136,11)" fg:x="176482" fg:w="196"/><text x="15.3794%" y="239.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (201 samples, 0.02%)</title><rect x="15.1290%" y="245" width="0.0172%" height="15" fill="rgb(219,138,53)" fg:x="176478" fg:w="201"/><text x="15.3790%" y="255.50"></text></g><g><title>byteorder::io::ReadBytesExt::read_u32 (226 samples, 0.02%)</title><rect x="15.1270%" y="373" width="0.0194%" height="15" fill="rgb(211,51,23)" fg:x="176455" fg:w="226"/><text x="15.3770%" y="383.50"></text></g><g><title>std::io::Read::read_exact (226 samples, 0.02%)</title><rect x="15.1270%" y="357" width="0.0194%" height="15" fill="rgb(247,221,28)" fg:x="176455" fg:w="226"/><text x="15.3770%" y="367.50"></text></g><g><title>std::io::default_read_exact (226 samples, 0.02%)</title><rect x="15.1270%" y="341" width="0.0194%" height="15" fill="rgb(251,222,45)" fg:x="176455" fg:w="226"/><text x="15.3770%" y="351.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (224 samples, 0.02%)</title><rect x="15.1272%" y="325" width="0.0192%" height="15" fill="rgb(217,162,53)" fg:x="176457" fg:w="224"/><text x="15.3772%" y="335.50"></text></g><g><title>std::sys::unix::fs::File::read (224 samples, 0.02%)</title><rect x="15.1272%" y="309" width="0.0192%" height="15" fill="rgb(229,93,14)" fg:x="176457" fg:w="224"/><text x="15.3772%" y="319.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (224 samples, 0.02%)</title><rect x="15.1272%" y="293" width="0.0192%" height="15" fill="rgb(209,67,49)" fg:x="176457" fg:w="224"/><text x="15.3772%" y="303.50"></text></g><g><title>__GI___libc_read (224 samples, 0.02%)</title><rect x="15.1272%" y="277" width="0.0192%" height="15" fill="rgb(213,87,29)" fg:x="176457" fg:w="224"/><text x="15.3772%" y="287.50"></text></g><g><title>__GI___libc_read (223 samples, 0.02%)</title><rect x="15.1273%" y="261" width="0.0191%" height="15" fill="rgb(205,151,52)" fg:x="176458" fg:w="223"/><text x="15.3773%" y="271.50"></text></g><g><title>zip::read::find_content (643 samples, 0.06%)</title><rect x="15.0916%" y="389" width="0.0551%" height="15" fill="rgb(253,215,39)" fg:x="176042" fg:w="643"/><text x="15.3416%" y="399.50"></text></g><g><title>&lt;sha1::Sha1Core as digest::core_api::UpdateCore&gt;::update_blocks (125 samples, 0.01%)</title><rect x="15.1581%" y="309" width="0.0107%" height="15" fill="rgb(221,220,41)" fg:x="176817" fg:w="125"/><text x="15.4081%" y="319.50"></text></g><g><title>sha1::compress::soft::compress (125 samples, 0.01%)</title><rect x="15.1581%" y="293" width="0.0107%" height="15" fill="rgb(218,133,21)" fg:x="176817" fg:w="125"/><text x="15.4081%" y="303.50"></text></g><g><title>sha1::compress::soft::sha1_digest_block_u32 (117 samples, 0.01%)</title><rect x="15.1588%" y="277" width="0.0100%" height="15" fill="rgb(221,193,43)" fg:x="176825" fg:w="117"/><text x="15.4088%" y="287.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as crypto_common::KeyInit&gt;::new_from_slice (148 samples, 0.01%)</title><rect x="15.1570%" y="341" width="0.0127%" height="15" fill="rgb(240,128,52)" fg:x="176804" fg:w="148"/><text x="15.4070%" y="351.50"></text></g><g><title>&lt;hmac::optim::HmacCore&lt;D&gt; as crypto_common::KeyInit&gt;::new_from_slice (147 samples, 0.01%)</title><rect x="15.1570%" y="325" width="0.0126%" height="15" fill="rgb(253,114,12)" fg:x="176805" fg:w="147"/><text x="15.4070%" y="335.50"></text></g><g><title>&lt;block_buffer::BlockBuffer&lt;BlockSize,Kind&gt; as core::clone::Clone&gt;::clone (1,249 samples, 0.11%)</title><rect x="15.3061%" y="309" width="0.1071%" height="15" fill="rgb(215,223,47)" fg:x="178544" fg:w="1249"/><text x="15.5561%" y="319.50"></text></g><g><title>generic_array::impls::&lt;impl core::clone::Clone for generic_array::GenericArray&lt;T,N&gt;&gt;::clone (594 samples, 0.05%)</title><rect x="15.3623%" y="293" width="0.0509%" height="15" fill="rgb(248,225,23)" fg:x="179199" fg:w="594"/><text x="15.6123%" y="303.50"></text></g><g><title>generic_array::functional::FunctionalSequence::map (479 samples, 0.04%)</title><rect x="15.3721%" y="277" width="0.0411%" height="15" fill="rgb(250,108,0)" fg:x="179314" fg:w="479"/><text x="15.6221%" y="287.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (479 samples, 0.04%)</title><rect x="15.3721%" y="261" width="0.0411%" height="15" fill="rgb(228,208,7)" fg:x="179314" fg:w="479"/><text x="15.6221%" y="271.50"></text></g><g><title>generic_array::ArrayBuilder&lt;T,N&gt;::into_inner (479 samples, 0.04%)</title><rect x="15.3721%" y="245" width="0.0411%" height="15" fill="rgb(244,45,10)" fg:x="179314" fg:w="479"/><text x="15.6221%" y="255.50"></text></g><g><title>&lt;hmac::optim::HmacCore&lt;D&gt; as core::clone::Clone&gt;::clone (865 samples, 0.07%)</title><rect x="15.4132%" y="309" width="0.0742%" height="15" fill="rgb(207,125,25)" fg:x="179793" fg:w="865"/><text x="15.6632%" y="319.50"></text></g><g><title>&lt;sha1::Sha1Core as core::clone::Clone&gt;::clone (865 samples, 0.07%)</title><rect x="15.4132%" y="293" width="0.0742%" height="15" fill="rgb(210,195,18)" fg:x="179793" fg:w="865"/><text x="15.6632%" y="303.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as core::clone::Clone&gt;::clone (3,139 samples, 0.27%)</title><rect x="15.2184%" y="325" width="0.2691%" height="15" fill="rgb(249,80,12)" fg:x="177521" fg:w="3139"/><text x="15.4684%" y="335.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::Update&gt;::update (489 samples, 0.04%)</title><rect x="15.4875%" y="325" width="0.0419%" height="15" fill="rgb(221,65,9)" fg:x="180660" fg:w="489"/><text x="15.7375%" y="335.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,Kind&gt;::digest_blocks (489 samples, 0.04%)</title><rect x="15.4875%" y="309" width="0.0419%" height="15" fill="rgb(235,49,36)" fg:x="180660" fg:w="489"/><text x="15.7375%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (271 samples, 0.02%)</title><rect x="15.5062%" y="293" width="0.0232%" height="15" fill="rgb(225,32,20)" fg:x="180878" fg:w="271"/><text x="15.7562%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (271 samples, 0.02%)</title><rect x="15.5062%" y="277" width="0.0232%" height="15" fill="rgb(215,141,46)" fg:x="180878" fg:w="271"/><text x="15.7562%" y="287.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (125 samples, 0.01%)</title><rect x="15.5302%" y="325" width="0.0107%" height="15" fill="rgb(250,160,47)" fg:x="181158" fg:w="125"/><text x="15.7802%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (125 samples, 0.01%)</title><rect x="15.5302%" y="309" width="0.0107%" height="15" fill="rgb(216,222,40)" fg:x="181158" fg:w="125"/><text x="15.7802%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (123 samples, 0.01%)</title><rect x="15.5304%" y="293" width="0.0105%" height="15" fill="rgb(234,217,39)" fg:x="181160" fg:w="123"/><text x="15.7804%" y="303.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (235 samples, 0.02%)</title><rect x="16.1019%" y="229" width="0.0201%" height="15" fill="rgb(207,178,40)" fg:x="187826" fg:w="235"/><text x="16.3519%" y="239.50"></text></g><g><title>sha1::compress::compress (1,172 samples, 0.10%)</title><rect x="16.1426%" y="213" width="0.1005%" height="15" fill="rgb(221,136,13)" fg:x="188301" fg:w="1172"/><text x="16.3926%" y="223.50"></text></g><g><title>sha1::compress::x86::compress (778 samples, 0.07%)</title><rect x="16.1763%" y="197" width="0.0667%" height="15" fill="rgb(249,199,10)" fg:x="188695" fg:w="778"/><text x="16.4263%" y="207.50"></text></g><g><title>sha1::compress::x86::shani_cpuid::get (329 samples, 0.03%)</title><rect x="16.2148%" y="181" width="0.0282%" height="15" fill="rgb(249,222,13)" fg:x="189144" fg:w="329"/><text x="16.4648%" y="191.50"></text></g><g><title>sha1::compress::x86::shani_cpuid::init_get (329 samples, 0.03%)</title><rect x="16.2148%" y="165" width="0.0282%" height="15" fill="rgb(244,185,38)" fg:x="189144" fg:w="329"/><text x="16.4648%" y="175.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (2,940 samples, 0.25%)</title><rect x="16.8774%" y="197" width="0.2520%" height="15" fill="rgb(236,202,9)" fg:x="196873" fg:w="2940"/><text x="17.1274%" y="207.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (2,940 samples, 0.25%)</title><rect x="16.8774%" y="181" width="0.2520%" height="15" fill="rgb(250,229,37)" fg:x="196873" fg:w="2940"/><text x="17.1274%" y="191.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (2,940 samples, 0.25%)</title><rect x="16.8774%" y="165" width="0.2520%" height="15" fill="rgb(206,174,23)" fg:x="196873" fg:w="2940"/><text x="17.1274%" y="175.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from::{{closure}} (2,940 samples, 0.25%)</title><rect x="16.8774%" y="149" width="0.2520%" height="15" fill="rgb(211,33,43)" fg:x="196873" fg:w="2940"/><text x="17.1274%" y="159.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (758 samples, 0.06%)</title><rect x="17.1295%" y="197" width="0.0650%" height="15" fill="rgb(245,58,50)" fg:x="199813" fg:w="758"/><text x="17.3795%" y="207.50"></text></g><g><title>core::num::&lt;impl u32&gt;::from_be_bytes (5,075 samples, 0.44%)</title><rect x="17.1949%" y="197" width="0.4351%" height="15" fill="rgb(244,68,36)" fg:x="200576" fg:w="5075"/><text x="17.4449%" y="207.50"></text></g><g><title>core::num::&lt;impl u32&gt;::from_be (5,075 samples, 0.44%)</title><rect x="17.1949%" y="181" width="0.4351%" height="15" fill="rgb(232,229,15)" fg:x="200576" fg:w="5075"/><text x="17.4449%" y="191.50"></text></g><g><title>core::num::&lt;impl u32&gt;::swap_bytes (5,075 samples, 0.44%)</title><rect x="17.1949%" y="165" width="0.4351%" height="15" fill="rgb(254,30,23)" fg:x="200576" fg:w="5075"/><text x="17.4449%" y="175.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (1,217 samples, 0.10%)</title><rect x="17.6299%" y="181" width="0.1043%" height="15" fill="rgb(235,160,14)" fg:x="205651" fg:w="1217"/><text x="17.8799%" y="191.50"></text></g><g><title>sha1::compress::soft::add (20,243 samples, 1.74%)</title><rect x="17.7343%" y="165" width="1.7354%" height="15" fill="rgb(212,155,44)" fg:x="206868" fg:w="20243"/><text x="17.9843%" y="175.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (20,243 samples, 1.74%)</title><rect x="17.7343%" y="149" width="1.7354%" height="15" fill="rgb(226,2,50)" fg:x="206868" fg:w="20243"/><text x="17.9843%" y="159.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (6,640 samples, 0.57%)</title><rect x="20.2441%" y="149" width="0.5692%" height="15" fill="rgb(234,177,6)" fg:x="236145" fg:w="6640"/><text x="20.4941%" y="159.50"></text></g><g><title>sha1::compress::soft::sha1rnds4c (24,935 samples, 2.14%)</title><rect x="19.4697%" y="165" width="2.1376%" height="15" fill="rgb(217,24,9)" fg:x="227111" fg:w="24935"/><text x="19.7197%" y="175.50">s..</text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (9,261 samples, 0.79%)</title><rect x="20.8133%" y="149" width="0.7939%" height="15" fill="rgb(220,13,46)" fg:x="242785" fg:w="9261"/><text x="21.0633%" y="159.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (2,515 samples, 0.22%)</title><rect x="22.6054%" y="149" width="0.2156%" height="15" fill="rgb(239,221,27)" fg:x="263689" fg:w="2515"/><text x="22.8554%" y="159.50"></text></g><g><title>sha1::compress::soft::sha1rnds4m (24,908 samples, 2.14%)</title><rect x="21.6073%" y="165" width="2.1353%" height="15" fill="rgb(222,198,25)" fg:x="252046" fg:w="24908"/><text x="21.8573%" y="175.50">s..</text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (10,750 samples, 0.92%)</title><rect x="22.8210%" y="149" width="0.9216%" height="15" fill="rgb(211,99,13)" fg:x="266204" fg:w="10750"/><text x="23.0710%" y="159.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (11,825 samples, 1.01%)</title><rect x="24.9580%" y="149" width="1.0137%" height="15" fill="rgb(232,111,31)" fg:x="291132" fg:w="11825"/><text x="25.2080%" y="159.50"></text></g><g><title>sha1::compress::soft::sha1_digest_round_x4 (116,810 samples, 10.01%)</title><rect x="17.7343%" y="181" width="10.0138%" height="15" fill="rgb(245,82,37)" fg:x="206868" fg:w="116810"/><text x="17.9843%" y="191.50">sha1::compress..</text></g><g><title>sha1::compress::soft::sha1rnds4p (46,724 samples, 4.01%)</title><rect x="23.7426%" y="165" width="4.0055%" height="15" fill="rgb(227,149,46)" fg:x="276954" fg:w="46724"/><text x="23.9926%" y="175.50">sha1..</text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (20,721 samples, 1.78%)</title><rect x="25.9717%" y="149" width="1.7764%" height="15" fill="rgb(218,36,50)" fg:x="302957" fg:w="20721"/><text x="26.2217%" y="159.50">c..</text></g><g><title>sha1::compress::soft::sha1_first_half (3,985 samples, 0.34%)</title><rect x="27.7491%" y="181" width="0.3416%" height="15" fill="rgb(226,80,48)" fg:x="323690" fg:w="3985"/><text x="27.9991%" y="191.50"></text></g><g><title>sha1::compress::soft::sha1_first_add (3,985 samples, 0.34%)</title><rect x="27.7491%" y="165" width="0.3416%" height="15" fill="rgb(238,224,15)" fg:x="323690" fg:w="3985"/><text x="27.9991%" y="175.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (3,985 samples, 0.34%)</title><rect x="27.7491%" y="149" width="0.3416%" height="15" fill="rgb(241,136,10)" fg:x="323690" fg:w="3985"/><text x="27.9991%" y="159.50"></text></g><g><title>sha1::compress::soft::sha1msg1 (9,165 samples, 0.79%)</title><rect x="28.0908%" y="181" width="0.7857%" height="15" fill="rgb(208,32,45)" fg:x="327675" fg:w="9165"/><text x="28.3408%" y="191.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (33,480 samples, 2.87%)</title><rect x="29.6934%" y="165" width="2.8702%" height="15" fill="rgb(207,135,9)" fg:x="346370" fg:w="33480"/><text x="29.9434%" y="175.50">co..</text></g><g><title>sha1::compress::soft::sha1msg2 (43,011 samples, 3.69%)</title><rect x="28.8764%" y="181" width="3.6872%" height="15" fill="rgb(206,86,44)" fg:x="336840" fg:w="43011"/><text x="29.1264%" y="191.50">sha1..</text></g><g><title>&lt;sha1::Sha1Core as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core::{{closure}} (202,287 samples, 17.34%)</title><rect x="16.1220%" y="229" width="17.3416%" height="15" fill="rgb(245,177,15)" fg:x="188061" fg:w="202287"/><text x="16.3720%" y="239.50">&lt;sha1::Sha1Core as digest::..</text></g><g><title>sha1::compress::soft::compress (200,875 samples, 17.22%)</title><rect x="16.2430%" y="213" width="17.2205%" height="15" fill="rgb(206,64,50)" fg:x="189473" fg:w="200875"/><text x="16.4930%" y="223.50">sha1::compress::soft::compr..</text></g><g><title>sha1::compress::soft::sha1_digest_block_u32 (184,697 samples, 15.83%)</title><rect x="17.6299%" y="197" width="15.8336%" height="15" fill="rgb(234,36,40)" fg:x="205651" fg:w="184697"/><text x="17.8799%" y="207.50">sha1::compress::soft::sh..</text></g><g><title>sha1::compress::soft::xor (10,497 samples, 0.90%)</title><rect x="32.5637%" y="181" width="0.8999%" height="15" fill="rgb(213,64,8)" fg:x="379851" fg:w="10497"/><text x="32.8137%" y="191.50"></text></g><g><title>__memset_avx2_unaligned_erms (748 samples, 0.06%)</title><rect x="33.4636%" y="229" width="0.0641%" height="15" fill="rgb(210,75,36)" fg:x="390348" fg:w="748"/><text x="33.7136%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (239 samples, 0.02%)</title><rect x="33.5278%" y="229" width="0.0205%" height="15" fill="rgb(229,88,21)" fg:x="391097" fg:w="239"/><text x="33.7778%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (239 samples, 0.02%)</title><rect x="33.5278%" y="213" width="0.0205%" height="15" fill="rgb(252,204,47)" fg:x="391097" fg:w="239"/><text x="33.7778%" y="223.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::len64_padding_be (204,212 samples, 17.51%)</title><rect x="16.0418%" y="261" width="17.5066%" height="15" fill="rgb(208,77,27)" fg:x="187125" fg:w="204212"/><text x="16.2918%" y="271.50">block_buffer::BlockBuffer&lt;B..</text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::digest_pad (204,212 samples, 17.51%)</title><rect x="16.0418%" y="245" width="17.5066%" height="15" fill="rgb(221,76,26)" fg:x="187125" fg:w="204212"/><text x="16.2918%" y="255.50">block_buffer::BlockBuffer&lt;B..</text></g><g><title>&lt;sha1::Sha1Core as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (220,792 samples, 18.93%)</title><rect x="15.5512%" y="277" width="18.9279%" height="15" fill="rgb(225,139,18)" fg:x="181403" fg:w="220792"/><text x="15.8012%" y="287.50">&lt;sha1::Sha1Core as digest::cor..</text></g><g><title>core::num::&lt;impl u32&gt;::to_be_bytes (10,858 samples, 0.93%)</title><rect x="33.5483%" y="261" width="0.9308%" height="15" fill="rgb(230,137,11)" fg:x="391337" fg:w="10858"/><text x="33.7983%" y="271.50"></text></g><g><title>core::num::&lt;impl u32&gt;::to_be (10,858 samples, 0.93%)</title><rect x="33.5483%" y="245" width="0.9308%" height="15" fill="rgb(212,28,1)" fg:x="391337" fg:w="10858"/><text x="33.7983%" y="255.50"></text></g><g><title>core::num::&lt;impl u32&gt;::swap_bytes (10,858 samples, 0.93%)</title><rect x="33.5483%" y="229" width="0.9308%" height="15" fill="rgb(248,164,17)" fg:x="391337" fg:w="10858"/><text x="33.7983%" y="239.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::FixedOutput&gt;::finalize_into (221,047 samples, 18.95%)</title><rect x="15.5512%" y="309" width="18.9498%" height="15" fill="rgb(222,171,42)" fg:x="181403" fg:w="221047"/><text x="15.8012%" y="319.50">&lt;digest::core_api::wrapper::Co..</text></g><g><title>&lt;hmac::optim::HmacCore&lt;D&gt; as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (221,047 samples, 18.95%)</title><rect x="15.5512%" y="293" width="18.9498%" height="15" fill="rgb(243,84,45)" fg:x="181403" fg:w="221047"/><text x="15.8012%" y="303.50">&lt;hmac::optim::HmacCore&lt;D&gt; as d..</text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,Kind&gt;::digest_blocks (255 samples, 0.02%)</title><rect x="34.4792%" y="277" width="0.0219%" height="15" fill="rgb(252,49,23)" fg:x="402195" fg:w="255"/><text x="34.7292%" y="287.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (254 samples, 0.02%)</title><rect x="34.4793%" y="261" width="0.0218%" height="15" fill="rgb(215,19,7)" fg:x="402196" fg:w="254"/><text x="34.7293%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (254 samples, 0.02%)</title><rect x="34.4793%" y="245" width="0.0218%" height="15" fill="rgb(238,81,41)" fg:x="402196" fg:w="254"/><text x="34.7293%" y="255.50"></text></g><g><title>__memcpy_avx_unaligned_erms (10,606 samples, 0.91%)</title><rect x="34.5010%" y="309" width="0.9092%" height="15" fill="rgb(210,199,37)" fg:x="402450" fg:w="10606"/><text x="34.7510%" y="319.50"></text></g><g><title>digest::FixedOutput::finalize_fixed (231,774 samples, 19.87%)</title><rect x="15.5410%" y="325" width="19.8694%" height="15" fill="rgb(244,192,49)" fg:x="181284" fg:w="231774"/><text x="15.7910%" y="335.50">digest::FixedOutput::finalize_f..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (916 samples, 0.08%)</title><rect x="35.6490%" y="277" width="0.0785%" height="15" fill="rgb(226,211,11)" fg:x="415841" fg:w="916"/><text x="35.8990%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (916 samples, 0.08%)</title><rect x="35.6490%" y="261" width="0.0785%" height="15" fill="rgb(236,162,54)" fg:x="415841" fg:w="916"/><text x="35.8990%" y="271.50"></text></g><g><title>pbkdf2::pbkdf2 (242,721 samples, 20.81%)</title><rect x="15.1570%" y="357" width="20.8079%" height="15" fill="rgb(220,229,9)" fg:x="176804" fg:w="242721"/><text x="15.4070%" y="367.50">pbkdf2::pbkdf2</text></g><g><title>pbkdf2::pbkdf2_body (242,564 samples, 20.79%)</title><rect x="15.1704%" y="341" width="20.7944%" height="15" fill="rgb(250,87,22)" fg:x="176961" fg:w="242564"/><text x="15.4204%" y="351.50">pbkdf2::pbkdf2_body</text></g><g><title>pbkdf2::xor (6,467 samples, 0.55%)</title><rect x="35.4104%" y="325" width="0.5544%" height="15" fill="rgb(239,43,17)" fg:x="413058" fg:w="6467"/><text x="35.6604%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (6,467 samples, 0.55%)</title><rect x="35.4104%" y="309" width="0.5544%" height="15" fill="rgb(231,177,25)" fg:x="413058" fg:w="6467"/><text x="35.6604%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (6,467 samples, 0.55%)</title><rect x="35.4104%" y="293" width="0.5544%" height="15" fill="rgb(219,179,1)" fg:x="413058" fg:w="6467"/><text x="35.6604%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (2,767 samples, 0.24%)</title><rect x="35.7276%" y="277" width="0.2372%" height="15" fill="rgb(238,219,53)" fg:x="416758" fg:w="2767"/><text x="35.9776%" y="287.50"></text></g><g><title>pbkdf2::xor::{{closure}} (2,767 samples, 0.24%)</title><rect x="35.7276%" y="261" width="0.2372%" height="15" fill="rgb(232,167,36)" fg:x="416758" fg:w="2767"/><text x="35.9776%" y="271.50"></text></g><g><title>&lt;u8 as core::ops::bit::BitXorAssign&lt;&amp;u8&gt;&gt;::bitxor_assign (2,767 samples, 0.24%)</title><rect x="35.7276%" y="245" width="0.2372%" height="15" fill="rgb(244,19,51)" fg:x="416758" fg:w="2767"/><text x="35.9776%" y="255.50"></text></g><g><title>&lt;u8 as core::ops::bit::BitXorAssign&gt;::bitxor_assign (2,767 samples, 0.24%)</title><rect x="35.7276%" y="229" width="0.2372%" height="15" fill="rgb(224,6,22)" fg:x="416758" fg:w="2767"/><text x="35.9776%" y="239.50"></text></g><g><title>__x64_sys_read (176 samples, 0.02%)</title><rect x="35.9677%" y="181" width="0.0151%" height="15" fill="rgb(224,145,5)" fg:x="419559" fg:w="176"/><text x="36.2177%" y="191.50"></text></g><g><title>ksys_read (175 samples, 0.02%)</title><rect x="35.9678%" y="165" width="0.0150%" height="15" fill="rgb(234,130,49)" fg:x="419560" fg:w="175"/><text x="36.2178%" y="175.50"></text></g><g><title>vfs_read (130 samples, 0.01%)</title><rect x="35.9717%" y="149" width="0.0111%" height="15" fill="rgb(254,6,2)" fg:x="419605" fg:w="130"/><text x="36.2217%" y="159.50"></text></g><g><title>do_syscall_64 (185 samples, 0.02%)</title><rect x="35.9677%" y="197" width="0.0159%" height="15" fill="rgb(208,96,46)" fg:x="419559" fg:w="185"/><text x="36.2177%" y="207.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (191 samples, 0.02%)</title><rect x="35.9673%" y="213" width="0.0164%" height="15" fill="rgb(239,3,39)" fg:x="419554" fg:w="191"/><text x="36.2173%" y="223.50"></text></g><g><title>__clone3 (244,294 samples, 20.94%)</title><rect x="15.0413%" y="645" width="20.9427%" height="15" fill="rgb(233,210,1)" fg:x="175455" fg:w="244294"/><text x="15.2913%" y="655.50">__clone3</text></g><g><title>start_thread (244,294 samples, 20.94%)</title><rect x="15.0413%" y="629" width="20.9427%" height="15" fill="rgb(244,137,37)" fg:x="175455" fg:w="244294"/><text x="15.2913%" y="639.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (244,294 samples, 20.94%)</title><rect x="15.0413%" y="613" width="20.9427%" height="15" fill="rgb(240,136,2)" fg:x="175455" fg:w="244294"/><text x="15.2913%" y="623.50">std::sys::unix::thread::Thread::n..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (244,294 samples, 20.94%)</title><rect x="15.0413%" y="597" width="20.9427%" height="15" fill="rgb(239,18,37)" fg:x="175455" fg:w="244294"/><text x="15.2913%" y="607.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (244,294 samples, 20.94%)</title><rect x="15.0413%" y="581" width="20.9427%" height="15" fill="rgb(218,185,22)" fg:x="175455" fg:w="244294"/><text x="15.2913%" y="591.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (244,294 samples, 20.94%)</title><rect x="15.0413%" y="565" width="20.9427%" height="15" fill="rgb(225,218,4)" fg:x="175455" fg:w="244294"/><text x="15.2913%" y="575.50">core::ops::function::FnOnce::call..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (244,294 samples, 20.94%)</title><rect x="15.0413%" y="549" width="20.9427%" height="15" fill="rgb(230,182,32)" fg:x="175455" fg:w="244294"/><text x="15.2913%" y="559.50">std::thread::Builder::spawn_unche..</text></g><g><title>std::panic::catch_unwind (244,294 samples, 20.94%)</title><rect x="15.0413%" y="533" width="20.9427%" height="15" fill="rgb(242,56,43)" fg:x="175455" fg:w="244294"/><text x="15.2913%" y="543.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (244,294 samples, 20.94%)</title><rect x="15.0413%" y="517" width="20.9427%" height="15" fill="rgb(233,99,24)" fg:x="175455" fg:w="244294"/><text x="15.2913%" y="527.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (244,294 samples, 20.94%)</title><rect x="15.0413%" y="501" width="20.9427%" height="15" fill="rgb(234,209,42)" fg:x="175455" fg:w="244294"/><text x="15.2913%" y="511.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (244,294 samples, 20.94%)</title><rect x="15.0413%" y="485" width="20.9427%" height="15" fill="rgb(227,7,12)" fg:x="175455" fg:w="244294"/><text x="15.2913%" y="495.50">&lt;core::panic::unwind_safe::Assert..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (244,294 samples, 20.94%)</title><rect x="15.0413%" y="469" width="20.9427%" height="15" fill="rgb(245,203,43)" fg:x="175455" fg:w="244294"/><text x="15.2913%" y="479.50">std::thread::Builder::spawn_unche..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (244,294 samples, 20.94%)</title><rect x="15.0413%" y="453" width="20.9427%" height="15" fill="rgb(238,205,33)" fg:x="175455" fg:w="244294"/><text x="15.2913%" y="463.50">std::sys_common::backtrace::__rus..</text></g><g><title>zip_password_finder::password_checker::{{closure}} (244,294 samples, 20.94%)</title><rect x="15.0413%" y="437" width="20.9427%" height="15" fill="rgb(231,56,7)" fg:x="175455" fg:w="244294"/><text x="15.2913%" y="447.50">zip_password_finder::password_che..</text></g><g><title>zip::read::&lt;impl zip::read::zip_archive::ZipArchive&lt;R&gt;&gt;::by_index_decrypt (243,711 samples, 20.89%)</title><rect x="15.0913%" y="421" width="20.8927%" height="15" fill="rgb(244,186,29)" fg:x="176038" fg:w="243711"/><text x="15.3413%" y="431.50">zip::read::&lt;impl zip::read::zip_a..</text></g><g><title>zip::read::&lt;impl zip::read::zip_archive::ZipArchive&lt;R&gt;&gt;::by_index_with_optional_password (243,711 samples, 20.89%)</title><rect x="15.0913%" y="405" width="20.8927%" height="15" fill="rgb(234,111,31)" fg:x="176038" fg:w="243711"/><text x="15.3413%" y="415.50">zip::read::&lt;impl zip::read::zip_a..</text></g><g><title>zip::read::make_crypto_reader (243,064 samples, 20.84%)</title><rect x="15.1468%" y="389" width="20.8373%" height="15" fill="rgb(241,149,10)" fg:x="176685" fg:w="243064"/><text x="15.3968%" y="399.50">zip::read::make_crypto_reader</text></g><g><title>zip::aes::AesReader&lt;R&gt;::validate (243,053 samples, 20.84%)</title><rect x="15.1477%" y="373" width="20.8363%" height="15" fill="rgb(249,206,44)" fg:x="176696" fg:w="243053"/><text x="15.3977%" y="383.50">zip::aes::AesReader&lt;R&gt;::validate</text></g><g><title>std::io::Read::read_exact (224 samples, 0.02%)</title><rect x="35.9648%" y="357" width="0.0192%" height="15" fill="rgb(251,153,30)" fg:x="419525" fg:w="224"/><text x="36.2148%" y="367.50"></text></g><g><title>std::io::default_read_exact (224 samples, 0.02%)</title><rect x="35.9648%" y="341" width="0.0192%" height="15" fill="rgb(239,152,38)" fg:x="419525" fg:w="224"/><text x="36.2148%" y="351.50"></text></g><g><title>&lt;std::io::Take&lt;T&gt; as std::io::Read&gt;::read (224 samples, 0.02%)</title><rect x="35.9648%" y="325" width="0.0192%" height="15" fill="rgb(249,139,47)" fg:x="419525" fg:w="224"/><text x="36.2148%" y="335.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read (222 samples, 0.02%)</title><rect x="35.9650%" y="309" width="0.0190%" height="15" fill="rgb(244,64,35)" fg:x="419527" fg:w="222"/><text x="36.2150%" y="319.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (222 samples, 0.02%)</title><rect x="35.9650%" y="293" width="0.0190%" height="15" fill="rgb(216,46,15)" fg:x="419527" fg:w="222"/><text x="36.2150%" y="303.50"></text></g><g><title>std::sys::unix::fs::File::read (222 samples, 0.02%)</title><rect x="35.9650%" y="277" width="0.0190%" height="15" fill="rgb(250,74,19)" fg:x="419527" fg:w="222"/><text x="36.2150%" y="287.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (222 samples, 0.02%)</title><rect x="35.9650%" y="261" width="0.0190%" height="15" fill="rgb(249,42,33)" fg:x="419527" fg:w="222"/><text x="36.2150%" y="271.50"></text></g><g><title>__GI___libc_read (222 samples, 0.02%)</title><rect x="35.9650%" y="245" width="0.0190%" height="15" fill="rgb(242,149,17)" fg:x="419527" fg:w="222"/><text x="36.2150%" y="255.50"></text></g><g><title>__GI___libc_read (221 samples, 0.02%)</title><rect x="35.9651%" y="229" width="0.0189%" height="15" fill="rgb(244,29,21)" fg:x="419528" fg:w="221"/><text x="36.2151%" y="239.50"></text></g><g><title>sha1::compress::compress (214 samples, 0.02%)</title><rect x="35.9877%" y="645" width="0.0183%" height="15" fill="rgb(220,130,37)" fg:x="419792" fg:w="214"/><text x="36.2377%" y="655.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as core::clone::Clone&gt;::clone (124 samples, 0.01%)</title><rect x="36.0075%" y="597" width="0.0106%" height="15" fill="rgb(211,67,2)" fg:x="420023" fg:w="124"/><text x="36.2575%" y="607.50"></text></g><g><title>&lt;block_buffer::BlockBuffer&lt;BlockSize,Kind&gt; as core::clone::Clone&gt;::clone (124 samples, 0.01%)</title><rect x="36.0075%" y="581" width="0.0106%" height="15" fill="rgb(235,68,52)" fg:x="420023" fg:w="124"/><text x="36.2575%" y="591.50"></text></g><g><title>zip::aes::AesReader&lt;R&gt;::validate (684 samples, 0.06%)</title><rect x="36.0069%" y="645" width="0.0586%" height="15" fill="rgb(246,142,3)" fg:x="420016" fg:w="684"/><text x="36.2569%" y="655.50"></text></g><g><title>pbkdf2::pbkdf2 (678 samples, 0.06%)</title><rect x="36.0074%" y="629" width="0.0581%" height="15" fill="rgb(241,25,7)" fg:x="420022" fg:w="678"/><text x="36.2574%" y="639.50"></text></g><g><title>pbkdf2::pbkdf2_body (677 samples, 0.06%)</title><rect x="36.0075%" y="613" width="0.0580%" height="15" fill="rgb(242,119,39)" fg:x="420023" fg:w="677"/><text x="36.2575%" y="623.50"></text></g><g><title>digest::FixedOutput::finalize_fixed (553 samples, 0.05%)</title><rect x="36.0181%" y="597" width="0.0474%" height="15" fill="rgb(241,98,45)" fg:x="420147" fg:w="553"/><text x="36.2681%" y="607.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::FixedOutput&gt;::finalize_into (406 samples, 0.03%)</title><rect x="36.0307%" y="581" width="0.0348%" height="15" fill="rgb(254,28,30)" fg:x="420294" fg:w="406"/><text x="36.2807%" y="591.50"></text></g><g><title>&lt;hmac::optim::HmacCore&lt;D&gt; as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (406 samples, 0.03%)</title><rect x="36.0307%" y="565" width="0.0348%" height="15" fill="rgb(241,142,54)" fg:x="420294" fg:w="406"/><text x="36.2807%" y="575.50"></text></g><g><title>&lt;sha1::Sha1Core as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (406 samples, 0.03%)</title><rect x="36.0307%" y="549" width="0.0348%" height="15" fill="rgb(222,85,15)" fg:x="420294" fg:w="406"/><text x="36.2807%" y="559.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::len64_padding_be (406 samples, 0.03%)</title><rect x="36.0307%" y="533" width="0.0348%" height="15" fill="rgb(210,85,47)" fg:x="420294" fg:w="406"/><text x="36.2807%" y="543.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::digest_pad (406 samples, 0.03%)</title><rect x="36.0307%" y="517" width="0.0348%" height="15" fill="rgb(224,206,25)" fg:x="420294" fg:w="406"/><text x="36.2807%" y="527.50"></text></g><g><title>&lt;sha1::Sha1Core as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core::{{closure}} (406 samples, 0.03%)</title><rect x="36.0307%" y="501" width="0.0348%" height="15" fill="rgb(243,201,19)" fg:x="420294" fg:w="406"/><text x="36.2807%" y="511.50"></text></g><g><title>worker-1 (248,519 samples, 21.30%)</title><rect x="14.7608%" y="661" width="21.3049%" height="15" fill="rgb(236,59,4)" fg:x="172183" fg:w="248519"/><text x="15.0108%" y="671.50">worker-1</text></g><g><title>sha1::compress::compress (299 samples, 0.03%)</title><rect x="36.0687%" y="629" width="0.0256%" height="15" fill="rgb(254,179,45)" fg:x="420737" fg:w="299"/><text x="36.3187%" y="639.50"></text></g><g><title>sha1::compress::soft::compress (221 samples, 0.02%)</title><rect x="36.0944%" y="629" width="0.0189%" height="15" fill="rgb(226,14,10)" fg:x="421036" fg:w="221"/><text x="36.3444%" y="639.50"></text></g><g><title>[anon] (545 samples, 0.05%)</title><rect x="36.0673%" y="645" width="0.0467%" height="15" fill="rgb(244,27,41)" fg:x="420720" fg:w="545"/><text x="36.3173%" y="655.50"></text></g><g><title>__memset_avx2_unaligned_erms (237 samples, 0.02%)</title><rect x="36.1249%" y="629" width="0.0203%" height="15" fill="rgb(235,35,32)" fg:x="421392" fg:w="237"/><text x="36.3749%" y="639.50"></text></g><g><title>sha1::compress::compress (492 samples, 0.04%)</title><rect x="36.1467%" y="629" width="0.0422%" height="15" fill="rgb(218,68,31)" fg:x="421646" fg:w="492"/><text x="36.3967%" y="639.50"></text></g><g><title>sha1::compress::x86::compress (491 samples, 0.04%)</title><rect x="36.1467%" y="613" width="0.0421%" height="15" fill="rgb(207,120,37)" fg:x="421647" fg:w="491"/><text x="36.3967%" y="623.50"></text></g><g><title>sha1::compress::soft::compress (1,709 samples, 0.15%)</title><rect x="36.1888%" y="629" width="0.1465%" height="15" fill="rgb(227,98,0)" fg:x="422138" fg:w="1709"/><text x="36.4388%" y="639.50"></text></g><g><title>[unknown] (2,586 samples, 0.22%)</title><rect x="36.1140%" y="645" width="0.2217%" height="15" fill="rgb(207,7,3)" fg:x="421265" fg:w="2586"/><text x="36.3640%" y="655.50"></text></g><g><title>enqueue_task (200 samples, 0.02%)</title><rect x="36.3564%" y="101" width="0.0171%" height="15" fill="rgb(206,98,19)" fg:x="424093" fg:w="200"/><text x="36.6064%" y="111.50"></text></g><g><title>ttwu_do_activate (222 samples, 0.02%)</title><rect x="36.3559%" y="117" width="0.0190%" height="15" fill="rgb(217,5,26)" fg:x="424087" fg:w="222"/><text x="36.6059%" y="127.50"></text></g><g><title>try_to_wake_up (301 samples, 0.03%)</title><rect x="36.3512%" y="133" width="0.0258%" height="15" fill="rgb(235,190,38)" fg:x="424032" fg:w="301"/><text x="36.6012%" y="143.50"></text></g><g><title>futex_wake (363 samples, 0.03%)</title><rect x="36.3460%" y="165" width="0.0311%" height="15" fill="rgb(247,86,24)" fg:x="423971" fg:w="363"/><text x="36.5960%" y="175.50"></text></g><g><title>wake_up_q (308 samples, 0.03%)</title><rect x="36.3507%" y="149" width="0.0264%" height="15" fill="rgb(205,101,16)" fg:x="424026" fg:w="308"/><text x="36.6007%" y="159.50"></text></g><g><title>do_futex (374 samples, 0.03%)</title><rect x="36.3451%" y="181" width="0.0321%" height="15" fill="rgb(246,168,33)" fg:x="423961" fg:w="374"/><text x="36.5951%" y="191.50"></text></g><g><title>__x64_sys_futex (381 samples, 0.03%)</title><rect x="36.3446%" y="197" width="0.0327%" height="15" fill="rgb(231,114,1)" fg:x="423955" fg:w="381"/><text x="36.5946%" y="207.50"></text></g><g><title>do_syscall_64 (392 samples, 0.03%)</title><rect x="36.3442%" y="213" width="0.0336%" height="15" fill="rgb(207,184,53)" fg:x="423950" fg:w="392"/><text x="36.5942%" y="223.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (393 samples, 0.03%)</title><rect x="36.3442%" y="229" width="0.0337%" height="15" fill="rgb(224,95,51)" fg:x="423950" fg:w="393"/><text x="36.5942%" y="239.50"></text></g><g><title>std::sys_common::thread_parker::futex::Parker::unpark (422 samples, 0.04%)</title><rect x="36.3422%" y="277" width="0.0362%" height="15" fill="rgb(212,188,45)" fg:x="423927" fg:w="422"/><text x="36.5922%" y="287.50"></text></g><g><title>std::sys::unix::futex::futex_wake (421 samples, 0.04%)</title><rect x="36.3423%" y="261" width="0.0361%" height="15" fill="rgb(223,154,38)" fg:x="423928" fg:w="421"/><text x="36.5923%" y="271.50"></text></g><g><title>syscall (421 samples, 0.04%)</title><rect x="36.3423%" y="245" width="0.0361%" height="15" fill="rgb(251,22,52)" fg:x="423928" fg:w="421"/><text x="36.5923%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (433 samples, 0.04%)</title><rect x="36.3413%" y="341" width="0.0371%" height="15" fill="rgb(229,209,22)" fg:x="423917" fg:w="433"/><text x="36.5913%" y="351.50"></text></g><g><title>crossbeam_channel::waker::Waker::try_select::{{closure}} (433 samples, 0.04%)</title><rect x="36.3413%" y="325" width="0.0371%" height="15" fill="rgb(234,138,34)" fg:x="423917" fg:w="433"/><text x="36.5913%" y="335.50"></text></g><g><title>crossbeam_channel::context::Context::unpark (423 samples, 0.04%)</title><rect x="36.3422%" y="309" width="0.0363%" height="15" fill="rgb(212,95,11)" fg:x="423927" fg:w="423"/><text x="36.5922%" y="319.50"></text></g><g><title>std::thread::Thread::unpark (423 samples, 0.04%)</title><rect x="36.3422%" y="293" width="0.0363%" height="15" fill="rgb(240,179,47)" fg:x="423927" fg:w="423"/><text x="36.5922%" y="303.50"></text></g><g><title>crossbeam_channel::waker::Waker::try_select (442 samples, 0.04%)</title><rect x="36.3413%" y="357" width="0.0379%" height="15" fill="rgb(240,163,11)" fg:x="423916" fg:w="442"/><text x="36.5913%" y="367.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::read (467 samples, 0.04%)</title><rect x="36.3402%" y="389" width="0.0400%" height="15" fill="rgb(236,37,12)" fg:x="423904" fg:w="467"/><text x="36.5902%" y="399.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (467 samples, 0.04%)</title><rect x="36.3402%" y="373" width="0.0400%" height="15" fill="rgb(232,164,16)" fg:x="423904" fg:w="467"/><text x="36.5902%" y="383.50"></text></g><g><title>crossbeam_channel::channel::Receiver&lt;T&gt;::recv (487 samples, 0.04%)</title><rect x="36.3398%" y="421" width="0.0417%" height="15" fill="rgb(244,205,15)" fg:x="423899" fg:w="487"/><text x="36.5898%" y="431.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::recv (484 samples, 0.04%)</title><rect x="36.3401%" y="405" width="0.0415%" height="15" fill="rgb(223,117,47)" fg:x="423902" fg:w="484"/><text x="36.5901%" y="415.50"></text></g><g><title>do_syscall_64 (126 samples, 0.01%)</title><rect x="36.3977%" y="309" width="0.0108%" height="15" fill="rgb(244,107,35)" fg:x="424575" fg:w="126"/><text x="36.6477%" y="319.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (139 samples, 0.01%)</title><rect x="36.3967%" y="325" width="0.0119%" height="15" fill="rgb(205,140,8)" fg:x="424563" fg:w="139"/><text x="36.6467%" y="335.50"></text></g><g><title>&lt;std::fs::File as std::io::Seek&gt;::seek (199 samples, 0.02%)</title><rect x="36.3924%" y="373" width="0.0171%" height="15" fill="rgb(228,84,46)" fg:x="424513" fg:w="199"/><text x="36.6424%" y="383.50"></text></g><g><title>std::sys::unix::fs::File::seek (199 samples, 0.02%)</title><rect x="36.3924%" y="357" width="0.0171%" height="15" fill="rgb(254,188,9)" fg:x="424513" fg:w="199"/><text x="36.6424%" y="367.50"></text></g><g><title>__lseek64 (196 samples, 0.02%)</title><rect x="36.3927%" y="341" width="0.0168%" height="15" fill="rgb(206,112,54)" fg:x="424516" fg:w="196"/><text x="36.6427%" y="351.50"></text></g><g><title>__x64_sys_read (185 samples, 0.02%)</title><rect x="36.4119%" y="213" width="0.0159%" height="15" fill="rgb(216,84,49)" fg:x="424740" fg:w="185"/><text x="36.6619%" y="223.50"></text></g><g><title>ksys_read (185 samples, 0.02%)</title><rect x="36.4119%" y="197" width="0.0159%" height="15" fill="rgb(214,194,35)" fg:x="424740" fg:w="185"/><text x="36.6619%" y="207.50"></text></g><g><title>vfs_read (133 samples, 0.01%)</title><rect x="36.4164%" y="181" width="0.0114%" height="15" fill="rgb(249,28,3)" fg:x="424792" fg:w="133"/><text x="36.6664%" y="191.50"></text></g><g><title>do_syscall_64 (198 samples, 0.02%)</title><rect x="36.4118%" y="229" width="0.0170%" height="15" fill="rgb(222,56,52)" fg:x="424739" fg:w="198"/><text x="36.6618%" y="239.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (202 samples, 0.02%)</title><rect x="36.4116%" y="245" width="0.0173%" height="15" fill="rgb(245,217,50)" fg:x="424736" fg:w="202"/><text x="36.6616%" y="255.50"></text></g><g><title>byteorder::io::ReadBytesExt::read_u16 (228 samples, 0.02%)</title><rect x="36.4095%" y="373" width="0.0195%" height="15" fill="rgb(213,201,24)" fg:x="424712" fg:w="228"/><text x="36.6595%" y="383.50"></text></g><g><title>std::io::Read::read_exact (228 samples, 0.02%)</title><rect x="36.4095%" y="357" width="0.0195%" height="15" fill="rgb(248,116,28)" fg:x="424712" fg:w="228"/><text x="36.6595%" y="367.50"></text></g><g><title>std::io::default_read_exact (228 samples, 0.02%)</title><rect x="36.4095%" y="341" width="0.0195%" height="15" fill="rgb(219,72,43)" fg:x="424712" fg:w="228"/><text x="36.6595%" y="351.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (228 samples, 0.02%)</title><rect x="36.4095%" y="325" width="0.0195%" height="15" fill="rgb(209,138,14)" fg:x="424712" fg:w="228"/><text x="36.6595%" y="335.50"></text></g><g><title>std::sys::unix::fs::File::read (228 samples, 0.02%)</title><rect x="36.4095%" y="309" width="0.0195%" height="15" fill="rgb(222,18,33)" fg:x="424712" fg:w="228"/><text x="36.6595%" y="319.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (228 samples, 0.02%)</title><rect x="36.4095%" y="293" width="0.0195%" height="15" fill="rgb(213,199,7)" fg:x="424712" fg:w="228"/><text x="36.6595%" y="303.50"></text></g><g><title>__GI___libc_read (228 samples, 0.02%)</title><rect x="36.4095%" y="277" width="0.0195%" height="15" fill="rgb(250,110,10)" fg:x="424712" fg:w="228"/><text x="36.6595%" y="287.50"></text></g><g><title>__GI___libc_read (227 samples, 0.02%)</title><rect x="36.4096%" y="261" width="0.0195%" height="15" fill="rgb(248,123,6)" fg:x="424713" fg:w="227"/><text x="36.6596%" y="271.50"></text></g><g><title>ksys_read (159 samples, 0.01%)</title><rect x="36.4320%" y="197" width="0.0136%" height="15" fill="rgb(206,91,31)" fg:x="424974" fg:w="159"/><text x="36.6820%" y="207.50"></text></g><g><title>vfs_read (130 samples, 0.01%)</title><rect x="36.4344%" y="181" width="0.0111%" height="15" fill="rgb(211,154,13)" fg:x="425003" fg:w="130"/><text x="36.6844%" y="191.50"></text></g><g><title>__x64_sys_read (163 samples, 0.01%)</title><rect x="36.4318%" y="213" width="0.0140%" height="15" fill="rgb(225,148,7)" fg:x="424972" fg:w="163"/><text x="36.6818%" y="223.50"></text></g><g><title>do_syscall_64 (172 samples, 0.01%)</title><rect x="36.4315%" y="229" width="0.0147%" height="15" fill="rgb(220,160,43)" fg:x="424969" fg:w="172"/><text x="36.6815%" y="239.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (181 samples, 0.02%)</title><rect x="36.4308%" y="245" width="0.0155%" height="15" fill="rgb(213,52,39)" fg:x="424961" fg:w="181"/><text x="36.6808%" y="255.50"></text></g><g><title>byteorder::io::ReadBytesExt::read_u32 (204 samples, 0.02%)</title><rect x="36.4290%" y="373" width="0.0175%" height="15" fill="rgb(243,137,7)" fg:x="424940" fg:w="204"/><text x="36.6790%" y="383.50"></text></g><g><title>std::io::Read::read_exact (204 samples, 0.02%)</title><rect x="36.4290%" y="357" width="0.0175%" height="15" fill="rgb(230,79,13)" fg:x="424940" fg:w="204"/><text x="36.6790%" y="367.50"></text></g><g><title>std::io::default_read_exact (204 samples, 0.02%)</title><rect x="36.4290%" y="341" width="0.0175%" height="15" fill="rgb(247,105,23)" fg:x="424940" fg:w="204"/><text x="36.6790%" y="351.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (203 samples, 0.02%)</title><rect x="36.4291%" y="325" width="0.0174%" height="15" fill="rgb(223,179,41)" fg:x="424941" fg:w="203"/><text x="36.6791%" y="335.50"></text></g><g><title>std::sys::unix::fs::File::read (203 samples, 0.02%)</title><rect x="36.4291%" y="309" width="0.0174%" height="15" fill="rgb(218,9,34)" fg:x="424941" fg:w="203"/><text x="36.6791%" y="319.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (203 samples, 0.02%)</title><rect x="36.4291%" y="293" width="0.0174%" height="15" fill="rgb(222,106,8)" fg:x="424941" fg:w="203"/><text x="36.6791%" y="303.50"></text></g><g><title>__GI___libc_read (203 samples, 0.02%)</title><rect x="36.4291%" y="277" width="0.0174%" height="15" fill="rgb(211,220,0)" fg:x="424941" fg:w="203"/><text x="36.6791%" y="287.50"></text></g><g><title>__GI___libc_read (201 samples, 0.02%)</title><rect x="36.4293%" y="261" width="0.0172%" height="15" fill="rgb(229,52,16)" fg:x="424943" fg:w="201"/><text x="36.6793%" y="271.50"></text></g><g><title>zip::read::find_content (654 samples, 0.06%)</title><rect x="36.3918%" y="389" width="0.0561%" height="15" fill="rgb(212,155,18)" fg:x="424506" fg:w="654"/><text x="36.6418%" y="399.50"></text></g><g><title>&lt;sha1::Sha1Core as digest::core_api::UpdateCore&gt;::update_blocks (117 samples, 0.01%)</title><rect x="36.4602%" y="309" width="0.0100%" height="15" fill="rgb(242,21,14)" fg:x="425304" fg:w="117"/><text x="36.7102%" y="319.50"></text></g><g><title>sha1::compress::soft::compress (117 samples, 0.01%)</title><rect x="36.4602%" y="293" width="0.0100%" height="15" fill="rgb(222,19,48)" fg:x="425304" fg:w="117"/><text x="36.7102%" y="303.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as crypto_common::KeyInit&gt;::new_from_slice (140 samples, 0.01%)</title><rect x="36.4590%" y="341" width="0.0120%" height="15" fill="rgb(232,45,27)" fg:x="425290" fg:w="140"/><text x="36.7090%" y="351.50"></text></g><g><title>&lt;hmac::optim::HmacCore&lt;D&gt; as crypto_common::KeyInit&gt;::new_from_slice (140 samples, 0.01%)</title><rect x="36.4590%" y="325" width="0.0120%" height="15" fill="rgb(249,103,42)" fg:x="425290" fg:w="140"/><text x="36.7090%" y="335.50"></text></g><g><title>&lt;block_buffer::BlockBuffer&lt;BlockSize,Kind&gt; as core::clone::Clone&gt;::clone (1,314 samples, 0.11%)</title><rect x="36.6075%" y="309" width="0.1126%" height="15" fill="rgb(246,81,33)" fg:x="427022" fg:w="1314"/><text x="36.8575%" y="319.50"></text></g><g><title>generic_array::impls::&lt;impl core::clone::Clone for generic_array::GenericArray&lt;T,N&gt;&gt;::clone (626 samples, 0.05%)</title><rect x="36.6665%" y="293" width="0.0537%" height="15" fill="rgb(252,33,42)" fg:x="427710" fg:w="626"/><text x="36.9165%" y="303.50"></text></g><g><title>generic_array::functional::FunctionalSequence::map (488 samples, 0.04%)</title><rect x="36.6783%" y="277" width="0.0418%" height="15" fill="rgb(209,212,41)" fg:x="427848" fg:w="488"/><text x="36.9283%" y="287.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (488 samples, 0.04%)</title><rect x="36.6783%" y="261" width="0.0418%" height="15" fill="rgb(207,154,6)" fg:x="427848" fg:w="488"/><text x="36.9283%" y="271.50"></text></g><g><title>generic_array::ArrayBuilder&lt;T,N&gt;::into_inner (488 samples, 0.04%)</title><rect x="36.6783%" y="245" width="0.0418%" height="15" fill="rgb(223,64,47)" fg:x="427848" fg:w="488"/><text x="36.9283%" y="255.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as core::clone::Clone&gt;::clone (3,172 samples, 0.27%)</title><rect x="36.5196%" y="325" width="0.2719%" height="15" fill="rgb(211,161,38)" fg:x="425996" fg:w="3172"/><text x="36.7696%" y="335.50"></text></g><g><title>&lt;hmac::optim::HmacCore&lt;D&gt; as core::clone::Clone&gt;::clone (832 samples, 0.07%)</title><rect x="36.7202%" y="309" width="0.0713%" height="15" fill="rgb(219,138,40)" fg:x="428336" fg:w="832"/><text x="36.9702%" y="319.50"></text></g><g><title>&lt;sha1::Sha1Core as core::clone::Clone&gt;::clone (832 samples, 0.07%)</title><rect x="36.7202%" y="293" width="0.0713%" height="15" fill="rgb(241,228,46)" fg:x="428336" fg:w="832"/><text x="36.9702%" y="303.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::Update&gt;::update (534 samples, 0.05%)</title><rect x="36.7915%" y="325" width="0.0458%" height="15" fill="rgb(223,209,38)" fg:x="429168" fg:w="534"/><text x="37.0415%" y="335.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,Kind&gt;::digest_blocks (534 samples, 0.05%)</title><rect x="36.7915%" y="309" width="0.0458%" height="15" fill="rgb(236,164,45)" fg:x="429168" fg:w="534"/><text x="37.0415%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (302 samples, 0.03%)</title><rect x="36.8114%" y="293" width="0.0259%" height="15" fill="rgb(231,15,5)" fg:x="429400" fg:w="302"/><text x="37.0614%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (302 samples, 0.03%)</title><rect x="36.8114%" y="277" width="0.0259%" height="15" fill="rgb(252,35,15)" fg:x="429400" fg:w="302"/><text x="37.0614%" y="287.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (260 samples, 0.02%)</title><rect x="37.4281%" y="229" width="0.0223%" height="15" fill="rgb(248,181,18)" fg:x="436594" fg:w="260"/><text x="37.6781%" y="239.50"></text></g><g><title>sha1::compress::compress (1,215 samples, 0.10%)</title><rect x="37.4703%" y="213" width="0.1042%" height="15" fill="rgb(233,39,42)" fg:x="437086" fg:w="1215"/><text x="37.7203%" y="223.50"></text></g><g><title>sha1::compress::x86::compress (825 samples, 0.07%)</title><rect x="37.5037%" y="197" width="0.0707%" height="15" fill="rgb(238,110,33)" fg:x="437476" fg:w="825"/><text x="37.7537%" y="207.50"></text></g><g><title>sha1::compress::x86::shani_cpuid::get (330 samples, 0.03%)</title><rect x="37.5462%" y="181" width="0.0283%" height="15" fill="rgb(233,195,10)" fg:x="437971" fg:w="330"/><text x="37.7962%" y="191.50"></text></g><g><title>sha1::compress::x86::shani_cpuid::init_get (330 samples, 0.03%)</title><rect x="37.5462%" y="165" width="0.0283%" height="15" fill="rgb(254,105,3)" fg:x="437971" fg:w="330"/><text x="37.7962%" y="175.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (2,979 samples, 0.26%)</title><rect x="38.2200%" y="197" width="0.2554%" height="15" fill="rgb(221,225,9)" fg:x="445831" fg:w="2979"/><text x="38.4700%" y="207.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (2,979 samples, 0.26%)</title><rect x="38.2200%" y="181" width="0.2554%" height="15" fill="rgb(224,227,45)" fg:x="445831" fg:w="2979"/><text x="38.4700%" y="191.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (2,979 samples, 0.26%)</title><rect x="38.2200%" y="165" width="0.2554%" height="15" fill="rgb(229,198,43)" fg:x="445831" fg:w="2979"/><text x="38.4700%" y="175.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from::{{closure}} (2,979 samples, 0.26%)</title><rect x="38.2200%" y="149" width="0.2554%" height="15" fill="rgb(206,209,35)" fg:x="445831" fg:w="2979"/><text x="38.4700%" y="159.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (767 samples, 0.07%)</title><rect x="38.4754%" y="197" width="0.0658%" height="15" fill="rgb(245,195,53)" fg:x="448810" fg:w="767"/><text x="38.7254%" y="207.50"></text></g><g><title>core::num::&lt;impl u32&gt;::from_be_bytes (5,159 samples, 0.44%)</title><rect x="38.5416%" y="197" width="0.4423%" height="15" fill="rgb(240,92,26)" fg:x="449583" fg:w="5159"/><text x="38.7916%" y="207.50"></text></g><g><title>core::num::&lt;impl u32&gt;::from_be (5,159 samples, 0.44%)</title><rect x="38.5416%" y="181" width="0.4423%" height="15" fill="rgb(207,40,23)" fg:x="449583" fg:w="5159"/><text x="38.7916%" y="191.50"></text></g><g><title>core::num::&lt;impl u32&gt;::swap_bytes (5,159 samples, 0.44%)</title><rect x="38.5416%" y="165" width="0.4423%" height="15" fill="rgb(223,111,35)" fg:x="449583" fg:w="5159"/><text x="38.7916%" y="175.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (1,211 samples, 0.10%)</title><rect x="38.9839%" y="181" width="0.1038%" height="15" fill="rgb(229,147,28)" fg:x="454742" fg:w="1211"/><text x="39.2339%" y="191.50"></text></g><g><title>sha1::compress::soft::add (20,206 samples, 1.73%)</title><rect x="39.0877%" y="165" width="1.7322%" height="15" fill="rgb(211,29,28)" fg:x="455953" fg:w="20206"/><text x="39.3377%" y="175.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (20,206 samples, 1.73%)</title><rect x="39.0877%" y="149" width="1.7322%" height="15" fill="rgb(228,72,33)" fg:x="455953" fg:w="20206"/><text x="39.3377%" y="159.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (6,298 samples, 0.54%)</title><rect x="41.6066%" y="149" width="0.5399%" height="15" fill="rgb(205,214,31)" fg:x="485336" fg:w="6298"/><text x="41.8566%" y="159.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (9,306 samples, 0.80%)</title><rect x="42.1465%" y="149" width="0.7978%" height="15" fill="rgb(224,111,15)" fg:x="491634" fg:w="9306"/><text x="42.3965%" y="159.50"></text></g><g><title>sha1::compress::soft::sha1rnds4c (24,782 samples, 2.12%)</title><rect x="40.8199%" y="165" width="2.1245%" height="15" fill="rgb(253,21,26)" fg:x="476159" fg:w="24782"/><text x="41.0699%" y="175.50">s..</text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (2,449 samples, 0.21%)</title><rect x="43.9494%" y="149" width="0.2099%" height="15" fill="rgb(245,139,43)" fg:x="512664" fg:w="2449"/><text x="44.1994%" y="159.50"></text></g><g><title>sha1::compress::soft::sha1rnds4m (25,064 samples, 2.15%)</title><rect x="42.9444%" y="165" width="2.1487%" height="15" fill="rgb(252,170,7)" fg:x="500941" fg:w="25064"/><text x="43.1944%" y="175.50">s..</text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (10,892 samples, 0.93%)</title><rect x="44.1593%" y="149" width="0.9337%" height="15" fill="rgb(231,118,14)" fg:x="515113" fg:w="10892"/><text x="44.4093%" y="159.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (11,826 samples, 1.01%)</title><rect x="46.3072%" y="149" width="1.0138%" height="15" fill="rgb(238,83,0)" fg:x="540167" fg:w="11826"/><text x="46.5572%" y="159.50"></text></g><g><title>sha1::compress::soft::sha1_digest_round_x4 (116,445 samples, 9.98%)</title><rect x="39.0877%" y="181" width="9.9825%" height="15" fill="rgb(221,39,39)" fg:x="455953" fg:w="116445"/><text x="39.3377%" y="191.50">sha1::compress..</text></g><g><title>sha1::compress::soft::sha1rnds4p (46,393 samples, 3.98%)</title><rect x="45.0931%" y="165" width="3.9772%" height="15" fill="rgb(222,119,46)" fg:x="526005" fg:w="46393"/><text x="45.3431%" y="175.50">sha1..</text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (20,405 samples, 1.75%)</title><rect x="47.3210%" y="149" width="1.7493%" height="15" fill="rgb(222,165,49)" fg:x="551993" fg:w="20405"/><text x="47.5710%" y="159.50"></text></g><g><title>sha1::compress::soft::sha1_first_half (4,056 samples, 0.35%)</title><rect x="49.0708%" y="181" width="0.3477%" height="15" fill="rgb(219,113,52)" fg:x="572405" fg:w="4056"/><text x="49.3208%" y="191.50"></text></g><g><title>sha1::compress::soft::sha1_first_add (4,056 samples, 0.35%)</title><rect x="49.0708%" y="165" width="0.3477%" height="15" fill="rgb(214,7,15)" fg:x="572405" fg:w="4056"/><text x="49.3208%" y="175.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (4,056 samples, 0.35%)</title><rect x="49.0708%" y="149" width="0.3477%" height="15" fill="rgb(235,32,4)" fg:x="572405" fg:w="4056"/><text x="49.3208%" y="159.50"></text></g><g><title>sha1::compress::soft::sha1msg1 (9,006 samples, 0.77%)</title><rect x="49.4186%" y="181" width="0.7721%" height="15" fill="rgb(238,90,54)" fg:x="576461" fg:w="9006"/><text x="49.6686%" y="191.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (33,934 samples, 2.91%)</title><rect x="51.0067%" y="165" width="2.9091%" height="15" fill="rgb(213,208,19)" fg:x="594987" fg:w="33934"/><text x="51.2567%" y="175.50">co..</text></g><g><title>sha1::compress::soft::sha1msg2 (43,455 samples, 3.73%)</title><rect x="50.1906%" y="181" width="3.7253%" height="15" fill="rgb(233,156,4)" fg:x="585467" fg:w="43455"/><text x="50.4406%" y="191.50">sha1..</text></g><g><title>sha1::compress::soft::sha1_digest_block_u32 (184,348 samples, 15.80%)</title><rect x="38.9839%" y="197" width="15.8037%" height="15" fill="rgb(207,194,5)" fg:x="454742" fg:w="184348"/><text x="39.2339%" y="207.50">sha1::compress::soft::sh..</text></g><g><title>sha1::compress::soft::xor (10,168 samples, 0.87%)</title><rect x="53.9159%" y="181" width="0.8717%" height="15" fill="rgb(206,111,30)" fg:x="628922" fg:w="10168"/><text x="54.1659%" y="191.50"></text></g><g><title>&lt;sha1::Sha1Core as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core::{{closure}} (202,237 samples, 17.34%)</title><rect x="37.4504%" y="229" width="17.3373%" height="15" fill="rgb(243,70,54)" fg:x="436854" fg:w="202237"/><text x="37.7004%" y="239.50">&lt;sha1::Sha1Core as digest::..</text></g><g><title>sha1::compress::soft::compress (200,790 samples, 17.21%)</title><rect x="37.5744%" y="213" width="17.2132%" height="15" fill="rgb(242,28,8)" fg:x="438301" fg:w="200790"/><text x="37.8244%" y="223.50">sha1::compress::soft::compr..</text></g><g><title>__memset_avx2_unaligned_erms (681 samples, 0.06%)</title><rect x="54.7877%" y="229" width="0.0584%" height="15" fill="rgb(219,106,18)" fg:x="639091" fg:w="681"/><text x="55.0377%" y="239.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::len64_padding_be (204,138 samples, 17.50%)</title><rect x="37.3636%" y="261" width="17.5002%" height="15" fill="rgb(244,222,10)" fg:x="435841" fg:w="204138"/><text x="37.6136%" y="271.50">block_buffer::BlockBuffer&lt;B..</text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::digest_pad (204,137 samples, 17.50%)</title><rect x="37.3636%" y="245" width="17.5002%" height="15" fill="rgb(236,179,52)" fg:x="435842" fg:w="204137"/><text x="37.6136%" y="255.50">block_buffer::BlockBuffer&lt;B..</text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (206 samples, 0.02%)</title><rect x="54.8461%" y="229" width="0.0177%" height="15" fill="rgb(213,23,39)" fg:x="639773" fg:w="206"/><text x="55.0961%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (206 samples, 0.02%)</title><rect x="54.8461%" y="213" width="0.0177%" height="15" fill="rgb(238,48,10)" fg:x="639773" fg:w="206"/><text x="55.0961%" y="223.50"></text></g><g><title>core::num::&lt;impl u32&gt;::to_be_bytes (10,824 samples, 0.93%)</title><rect x="54.8638%" y="261" width="0.9279%" height="15" fill="rgb(251,196,23)" fg:x="639979" fg:w="10824"/><text x="55.1138%" y="271.50"></text></g><g><title>core::num::&lt;impl u32&gt;::to_be (10,824 samples, 0.93%)</title><rect x="54.8638%" y="245" width="0.9279%" height="15" fill="rgb(250,152,24)" fg:x="639979" fg:w="10824"/><text x="55.1138%" y="255.50"></text></g><g><title>core::num::&lt;impl u32&gt;::swap_bytes (10,824 samples, 0.93%)</title><rect x="54.8638%" y="229" width="0.9279%" height="15" fill="rgb(209,150,17)" fg:x="639979" fg:w="10824"/><text x="55.1138%" y="239.50"></text></g><g><title>&lt;sha1::Sha1Core as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (220,873 samples, 18.93%)</title><rect x="36.8569%" y="277" width="18.9349%" height="15" fill="rgb(234,202,34)" fg:x="429931" fg:w="220873"/><text x="37.1069%" y="287.50">&lt;sha1::Sha1Core as digest::cor..</text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::FixedOutput&gt;::finalize_into (221,112 samples, 18.96%)</title><rect x="36.8569%" y="309" width="18.9554%" height="15" fill="rgb(253,148,53)" fg:x="429931" fg:w="221112"/><text x="37.1069%" y="319.50">&lt;digest::core_api::wrapper::Co..</text></g><g><title>&lt;hmac::optim::HmacCore&lt;D&gt; as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (221,112 samples, 18.96%)</title><rect x="36.8569%" y="293" width="18.9554%" height="15" fill="rgb(218,129,16)" fg:x="429931" fg:w="221112"/><text x="37.1069%" y="303.50">&lt;hmac::optim::HmacCore&lt;D&gt; as d..</text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,Kind&gt;::digest_blocks (239 samples, 0.02%)</title><rect x="55.7918%" y="277" width="0.0205%" height="15" fill="rgb(216,85,19)" fg:x="650804" fg:w="239"/><text x="56.0418%" y="287.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (239 samples, 0.02%)</title><rect x="55.7918%" y="261" width="0.0205%" height="15" fill="rgb(235,228,7)" fg:x="650804" fg:w="239"/><text x="56.0418%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (239 samples, 0.02%)</title><rect x="55.7918%" y="245" width="0.0205%" height="15" fill="rgb(245,175,0)" fg:x="650804" fg:w="239"/><text x="56.0418%" y="255.50"></text></g><g><title>digest::FixedOutput::finalize_fixed (231,899 samples, 19.88%)</title><rect x="36.8477%" y="325" width="19.8801%" height="15" fill="rgb(208,168,36)" fg:x="429824" fg:w="231899"/><text x="37.0977%" y="335.50">digest::FixedOutput::finalize_f..</text></g><g><title>__memcpy_avx_unaligned_erms (10,680 samples, 0.92%)</title><rect x="55.8123%" y="309" width="0.9156%" height="15" fill="rgb(246,171,24)" fg:x="651043" fg:w="10680"/><text x="56.0623%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (975 samples, 0.08%)</title><rect x="56.9683%" y="277" width="0.0836%" height="15" fill="rgb(215,142,24)" fg:x="664528" fg:w="975"/><text x="57.2183%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (975 samples, 0.08%)</title><rect x="56.9683%" y="261" width="0.0836%" height="15" fill="rgb(250,187,7)" fg:x="664528" fg:w="975"/><text x="57.2183%" y="271.50"></text></g><g><title>pbkdf2::pbkdf2 (242,762 samples, 20.81%)</title><rect x="36.4585%" y="357" width="20.8114%" height="15" fill="rgb(228,66,33)" fg:x="425284" fg:w="242762"/><text x="36.7085%" y="367.50">pbkdf2::pbkdf2</text></g><g><title>pbkdf2::pbkdf2_body (242,604 samples, 20.80%)</title><rect x="36.4721%" y="341" width="20.7978%" height="15" fill="rgb(234,215,21)" fg:x="425442" fg:w="242604"/><text x="36.7221%" y="351.50">pbkdf2::pbkdf2_body</text></g><g><title>pbkdf2::xor (6,323 samples, 0.54%)</title><rect x="56.7279%" y="325" width="0.5421%" height="15" fill="rgb(222,191,20)" fg:x="661723" fg:w="6323"/><text x="56.9779%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (6,323 samples, 0.54%)</title><rect x="56.7279%" y="309" width="0.5421%" height="15" fill="rgb(245,79,54)" fg:x="661723" fg:w="6323"/><text x="56.9779%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (6,323 samples, 0.54%)</title><rect x="56.7279%" y="293" width="0.5421%" height="15" fill="rgb(240,10,37)" fg:x="661723" fg:w="6323"/><text x="56.9779%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (2,542 samples, 0.22%)</title><rect x="57.0520%" y="277" width="0.2179%" height="15" fill="rgb(214,192,32)" fg:x="665504" fg:w="2542"/><text x="57.3020%" y="287.50"></text></g><g><title>pbkdf2::xor::{{closure}} (2,542 samples, 0.22%)</title><rect x="57.0520%" y="261" width="0.2179%" height="15" fill="rgb(209,36,54)" fg:x="665504" fg:w="2542"/><text x="57.3020%" y="271.50"></text></g><g><title>&lt;u8 as core::ops::bit::BitXorAssign&lt;&amp;u8&gt;&gt;::bitxor_assign (2,542 samples, 0.22%)</title><rect x="57.0520%" y="245" width="0.2179%" height="15" fill="rgb(220,10,11)" fg:x="665504" fg:w="2542"/><text x="57.3020%" y="255.50"></text></g><g><title>&lt;u8 as core::ops::bit::BitXorAssign&gt;::bitxor_assign (2,542 samples, 0.22%)</title><rect x="57.0520%" y="229" width="0.2179%" height="15" fill="rgb(221,106,17)" fg:x="665504" fg:w="2542"/><text x="57.3020%" y="239.50"></text></g><g><title>__x64_sys_read (174 samples, 0.01%)</title><rect x="57.2732%" y="181" width="0.0149%" height="15" fill="rgb(251,142,44)" fg:x="668084" fg:w="174"/><text x="57.5232%" y="191.50"></text></g><g><title>ksys_read (172 samples, 0.01%)</title><rect x="57.2733%" y="165" width="0.0147%" height="15" fill="rgb(238,13,15)" fg:x="668086" fg:w="172"/><text x="57.5233%" y="175.50"></text></g><g><title>vfs_read (122 samples, 0.01%)</title><rect x="57.2776%" y="149" width="0.0105%" height="15" fill="rgb(208,107,27)" fg:x="668136" fg:w="122"/><text x="57.5276%" y="159.50"></text></g><g><title>do_syscall_64 (183 samples, 0.02%)</title><rect x="57.2730%" y="197" width="0.0157%" height="15" fill="rgb(205,136,37)" fg:x="668082" fg:w="183"/><text x="57.5230%" y="207.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (188 samples, 0.02%)</title><rect x="57.2726%" y="213" width="0.0161%" height="15" fill="rgb(250,205,27)" fg:x="668078" fg:w="188"/><text x="57.5226%" y="223.50"></text></g><g><title>std::panic::catch_unwind (244,414 samples, 20.95%)</title><rect x="36.3359%" y="533" width="20.9530%" height="15" fill="rgb(210,80,43)" fg:x="423854" fg:w="244414"/><text x="36.5859%" y="543.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (244,414 samples, 20.95%)</title><rect x="36.3359%" y="517" width="20.9530%" height="15" fill="rgb(247,160,36)" fg:x="423854" fg:w="244414"/><text x="36.5859%" y="527.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (244,414 samples, 20.95%)</title><rect x="36.3359%" y="501" width="20.9530%" height="15" fill="rgb(234,13,49)" fg:x="423854" fg:w="244414"/><text x="36.5859%" y="511.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (244,414 samples, 20.95%)</title><rect x="36.3359%" y="485" width="20.9530%" height="15" fill="rgb(234,122,0)" fg:x="423854" fg:w="244414"/><text x="36.5859%" y="495.50">&lt;core::panic::unwind_safe::Assert..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (244,414 samples, 20.95%)</title><rect x="36.3359%" y="469" width="20.9530%" height="15" fill="rgb(207,146,38)" fg:x="423854" fg:w="244414"/><text x="36.5859%" y="479.50">std::thread::Builder::spawn_unche..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (244,414 samples, 20.95%)</title><rect x="36.3359%" y="453" width="20.9530%" height="15" fill="rgb(207,177,25)" fg:x="423854" fg:w="244414"/><text x="36.5859%" y="463.50">std::sys_common::backtrace::__rus..</text></g><g><title>zip_password_finder::password_checker::{{closure}} (244,414 samples, 20.95%)</title><rect x="36.3359%" y="437" width="20.9530%" height="15" fill="rgb(211,178,42)" fg:x="423854" fg:w="244414"/><text x="36.5859%" y="447.50">zip_password_finder::password_che..</text></g><g><title>zip::read::&lt;impl zip::read::zip_archive::ZipArchive&lt;R&gt;&gt;::by_index_decrypt (243,772 samples, 20.90%)</title><rect x="36.3910%" y="421" width="20.8980%" height="15" fill="rgb(230,69,54)" fg:x="424496" fg:w="243772"/><text x="36.6410%" y="431.50">zip::read::&lt;impl zip::read::zip_a..</text></g><g><title>zip::read::&lt;impl zip::read::zip_archive::ZipArchive&lt;R&gt;&gt;::by_index_with_optional_password (243,772 samples, 20.90%)</title><rect x="36.3910%" y="405" width="20.8980%" height="15" fill="rgb(214,135,41)" fg:x="424496" fg:w="243772"/><text x="36.6410%" y="415.50">zip::read::&lt;impl zip::read::zip_a..</text></g><g><title>zip::read::make_crypto_reader (243,108 samples, 20.84%)</title><rect x="36.4479%" y="389" width="20.8410%" height="15" fill="rgb(237,67,25)" fg:x="425160" fg:w="243108"/><text x="36.6979%" y="399.50">zip::read::make_crypto_reader</text></g><g><title>zip::aes::AesReader&lt;R&gt;::validate (243,094 samples, 20.84%)</title><rect x="36.4491%" y="373" width="20.8398%" height="15" fill="rgb(222,189,50)" fg:x="425174" fg:w="243094"/><text x="36.6991%" y="383.50">zip::aes::AesReader&lt;R&gt;::validate</text></g><g><title>std::io::Read::read_exact (222 samples, 0.02%)</title><rect x="57.2699%" y="357" width="0.0190%" height="15" fill="rgb(245,148,34)" fg:x="668046" fg:w="222"/><text x="57.5199%" y="367.50"></text></g><g><title>std::io::default_read_exact (222 samples, 0.02%)</title><rect x="57.2699%" y="341" width="0.0190%" height="15" fill="rgb(222,29,6)" fg:x="668046" fg:w="222"/><text x="57.5199%" y="351.50"></text></g><g><title>&lt;std::io::Take&lt;T&gt; as std::io::Read&gt;::read (222 samples, 0.02%)</title><rect x="57.2699%" y="325" width="0.0190%" height="15" fill="rgb(221,189,43)" fg:x="668046" fg:w="222"/><text x="57.5199%" y="335.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read (222 samples, 0.02%)</title><rect x="57.2699%" y="309" width="0.0190%" height="15" fill="rgb(207,36,27)" fg:x="668046" fg:w="222"/><text x="57.5199%" y="319.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (222 samples, 0.02%)</title><rect x="57.2699%" y="293" width="0.0190%" height="15" fill="rgb(217,90,24)" fg:x="668046" fg:w="222"/><text x="57.5199%" y="303.50"></text></g><g><title>std::sys::unix::fs::File::read (222 samples, 0.02%)</title><rect x="57.2699%" y="277" width="0.0190%" height="15" fill="rgb(224,66,35)" fg:x="668046" fg:w="222"/><text x="57.5199%" y="287.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (222 samples, 0.02%)</title><rect x="57.2699%" y="261" width="0.0190%" height="15" fill="rgb(221,13,50)" fg:x="668046" fg:w="222"/><text x="57.5199%" y="271.50"></text></g><g><title>__GI___libc_read (222 samples, 0.02%)</title><rect x="57.2699%" y="245" width="0.0190%" height="15" fill="rgb(236,68,49)" fg:x="668046" fg:w="222"/><text x="57.5199%" y="255.50"></text></g><g><title>__GI___libc_read (222 samples, 0.02%)</title><rect x="57.2699%" y="229" width="0.0190%" height="15" fill="rgb(229,146,28)" fg:x="668046" fg:w="222"/><text x="57.5199%" y="239.50"></text></g><g><title>__clone3 (244,415 samples, 20.95%)</title><rect x="36.3359%" y="645" width="20.9531%" height="15" fill="rgb(225,31,38)" fg:x="423854" fg:w="244415"/><text x="36.5859%" y="655.50">__clone3</text></g><g><title>start_thread (244,415 samples, 20.95%)</title><rect x="36.3359%" y="629" width="20.9531%" height="15" fill="rgb(250,208,3)" fg:x="423854" fg:w="244415"/><text x="36.5859%" y="639.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (244,415 samples, 20.95%)</title><rect x="36.3359%" y="613" width="20.9531%" height="15" fill="rgb(246,54,23)" fg:x="423854" fg:w="244415"/><text x="36.5859%" y="623.50">std::sys::unix::thread::Thread::n..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (244,415 samples, 20.95%)</title><rect x="36.3359%" y="597" width="20.9531%" height="15" fill="rgb(243,76,11)" fg:x="423854" fg:w="244415"/><text x="36.5859%" y="607.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (244,415 samples, 20.95%)</title><rect x="36.3359%" y="581" width="20.9531%" height="15" fill="rgb(245,21,50)" fg:x="423854" fg:w="244415"/><text x="36.5859%" y="591.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (244,415 samples, 20.95%)</title><rect x="36.3359%" y="565" width="20.9531%" height="15" fill="rgb(228,9,43)" fg:x="423854" fg:w="244415"/><text x="36.5859%" y="575.50">core::ops::function::FnOnce::call..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (244,415 samples, 20.95%)</title><rect x="36.3359%" y="549" width="20.9531%" height="15" fill="rgb(208,100,47)" fg:x="423854" fg:w="244415"/><text x="36.5859%" y="559.50">std::thread::Builder::spawn_unche..</text></g><g><title>sha1::compress::compress (246 samples, 0.02%)</title><rect x="57.2937%" y="645" width="0.0211%" height="15" fill="rgb(232,26,8)" fg:x="668324" fg:w="246"/><text x="57.5437%" y="655.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as core::clone::Clone&gt;::clone (119 samples, 0.01%)</title><rect x="57.3157%" y="597" width="0.0102%" height="15" fill="rgb(216,166,38)" fg:x="668580" fg:w="119"/><text x="57.5657%" y="607.50"></text></g><g><title>&lt;block_buffer::BlockBuffer&lt;BlockSize,Kind&gt; as core::clone::Clone&gt;::clone (119 samples, 0.01%)</title><rect x="57.3157%" y="581" width="0.0102%" height="15" fill="rgb(251,202,51)" fg:x="668580" fg:w="119"/><text x="57.5657%" y="591.50"></text></g><g><title>zip::aes::AesReader&lt;R&gt;::validate (646 samples, 0.06%)</title><rect x="57.3153%" y="645" width="0.0554%" height="15" fill="rgb(254,216,34)" fg:x="668575" fg:w="646"/><text x="57.5653%" y="655.50"></text></g><g><title>pbkdf2::pbkdf2 (642 samples, 0.06%)</title><rect x="57.3156%" y="629" width="0.0550%" height="15" fill="rgb(251,32,27)" fg:x="668579" fg:w="642"/><text x="57.5656%" y="639.50"></text></g><g><title>pbkdf2::pbkdf2_body (642 samples, 0.06%)</title><rect x="57.3156%" y="613" width="0.0550%" height="15" fill="rgb(208,127,28)" fg:x="668579" fg:w="642"/><text x="57.5656%" y="623.50"></text></g><g><title>digest::FixedOutput::finalize_fixed (522 samples, 0.04%)</title><rect x="57.3259%" y="597" width="0.0447%" height="15" fill="rgb(224,137,22)" fg:x="668699" fg:w="522"/><text x="57.5759%" y="607.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::FixedOutput&gt;::finalize_into (380 samples, 0.03%)</title><rect x="57.3381%" y="581" width="0.0326%" height="15" fill="rgb(254,70,32)" fg:x="668841" fg:w="380"/><text x="57.5881%" y="591.50"></text></g><g><title>&lt;hmac::optim::HmacCore&lt;D&gt; as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (380 samples, 0.03%)</title><rect x="57.3381%" y="565" width="0.0326%" height="15" fill="rgb(229,75,37)" fg:x="668841" fg:w="380"/><text x="57.5881%" y="575.50"></text></g><g><title>&lt;sha1::Sha1Core as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (380 samples, 0.03%)</title><rect x="57.3381%" y="549" width="0.0326%" height="15" fill="rgb(252,64,23)" fg:x="668841" fg:w="380"/><text x="57.5881%" y="559.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::len64_padding_be (380 samples, 0.03%)</title><rect x="57.3381%" y="533" width="0.0326%" height="15" fill="rgb(232,162,48)" fg:x="668841" fg:w="380"/><text x="57.5881%" y="543.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::digest_pad (380 samples, 0.03%)</title><rect x="57.3381%" y="517" width="0.0326%" height="15" fill="rgb(246,160,12)" fg:x="668841" fg:w="380"/><text x="57.5881%" y="527.50"></text></g><g><title>&lt;sha1::Sha1Core as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core::{{closure}} (380 samples, 0.03%)</title><rect x="57.3381%" y="501" width="0.0326%" height="15" fill="rgb(247,166,0)" fg:x="668841" fg:w="380"/><text x="57.5881%" y="511.50"></text></g><g><title>worker-2 (248,526 samples, 21.31%)</title><rect x="36.0657%" y="661" width="21.3055%" height="15" fill="rgb(249,219,21)" fg:x="420702" fg:w="248526"/><text x="36.3157%" y="671.50">worker-2</text></g><g><title>sha1::compress::compress (289 samples, 0.02%)</title><rect x="57.3749%" y="629" width="0.0248%" height="15" fill="rgb(205,209,3)" fg:x="669271" fg:w="289"/><text x="57.6249%" y="639.50"></text></g><g><title>sha1::compress::soft::compress (254 samples, 0.02%)</title><rect x="57.3997%" y="629" width="0.0218%" height="15" fill="rgb(243,44,1)" fg:x="669560" fg:w="254"/><text x="57.6497%" y="639.50"></text></g><g><title>[anon] (578 samples, 0.05%)</title><rect x="57.3731%" y="645" width="0.0496%" height="15" fill="rgb(206,159,16)" fg:x="669250" fg:w="578"/><text x="57.6231%" y="655.50"></text></g><g><title>__memcpy_avx_unaligned_erms (128 samples, 0.01%)</title><rect x="57.4240%" y="629" width="0.0110%" height="15" fill="rgb(244,77,30)" fg:x="669844" fg:w="128"/><text x="57.6740%" y="639.50"></text></g><g><title>__memset_avx2_unaligned_erms (224 samples, 0.02%)</title><rect x="57.4350%" y="629" width="0.0192%" height="15" fill="rgb(218,69,12)" fg:x="669972" fg:w="224"/><text x="57.6850%" y="639.50"></text></g><g><title>sha1::compress::compress (468 samples, 0.04%)</title><rect x="57.4549%" y="629" width="0.0401%" height="15" fill="rgb(212,87,7)" fg:x="670204" fg:w="468"/><text x="57.7049%" y="639.50"></text></g><g><title>sha1::compress::x86::compress (468 samples, 0.04%)</title><rect x="57.4549%" y="613" width="0.0401%" height="15" fill="rgb(245,114,25)" fg:x="670204" fg:w="468"/><text x="57.7049%" y="623.50"></text></g><g><title>sha1::compress::soft::compress (1,642 samples, 0.14%)</title><rect x="57.4950%" y="629" width="0.1408%" height="15" fill="rgb(210,61,42)" fg:x="670672" fg:w="1642"/><text x="57.7450%" y="639.50"></text></g><g><title>[unknown] (2,490 samples, 0.21%)</title><rect x="57.4227%" y="645" width="0.2135%" height="15" fill="rgb(211,52,33)" fg:x="669828" fg:w="2490"/><text x="57.6727%" y="655.50"></text></g><g><title>enqueue_task (166 samples, 0.01%)</title><rect x="57.6577%" y="101" width="0.0142%" height="15" fill="rgb(234,58,33)" fg:x="672569" fg:w="166"/><text x="57.9077%" y="111.50"></text></g><g><title>ttwu_do_activate (198 samples, 0.02%)</title><rect x="57.6565%" y="117" width="0.0170%" height="15" fill="rgb(220,115,36)" fg:x="672556" fg:w="198"/><text x="57.9065%" y="127.50"></text></g><g><title>futex_wake (327 samples, 0.03%)</title><rect x="57.6473%" y="165" width="0.0280%" height="15" fill="rgb(243,153,54)" fg:x="672448" fg:w="327"/><text x="57.8973%" y="175.50"></text></g><g><title>wake_up_q (278 samples, 0.02%)</title><rect x="57.6515%" y="149" width="0.0238%" height="15" fill="rgb(251,47,18)" fg:x="672497" fg:w="278"/><text x="57.9015%" y="159.50"></text></g><g><title>try_to_wake_up (269 samples, 0.02%)</title><rect x="57.6522%" y="133" width="0.0231%" height="15" fill="rgb(242,102,42)" fg:x="672506" fg:w="269"/><text x="57.9022%" y="143.50"></text></g><g><title>do_futex (345 samples, 0.03%)</title><rect x="57.6462%" y="181" width="0.0296%" height="15" fill="rgb(234,31,38)" fg:x="672435" fg:w="345"/><text x="57.8962%" y="191.50"></text></g><g><title>__x64_sys_futex (352 samples, 0.03%)</title><rect x="57.6456%" y="197" width="0.0302%" height="15" fill="rgb(221,117,51)" fg:x="672429" fg:w="352"/><text x="57.8956%" y="207.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (368 samples, 0.03%)</title><rect x="57.6450%" y="229" width="0.0315%" height="15" fill="rgb(212,20,18)" fg:x="672421" fg:w="368"/><text x="57.8950%" y="239.50"></text></g><g><title>do_syscall_64 (363 samples, 0.03%)</title><rect x="57.6454%" y="213" width="0.0311%" height="15" fill="rgb(245,133,36)" fg:x="672426" fg:w="363"/><text x="57.8954%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (406 samples, 0.03%)</title><rect x="57.6418%" y="341" width="0.0348%" height="15" fill="rgb(212,6,19)" fg:x="672384" fg:w="406"/><text x="57.8918%" y="351.50"></text></g><g><title>crossbeam_channel::waker::Waker::try_select::{{closure}} (406 samples, 0.03%)</title><rect x="57.6418%" y="325" width="0.0348%" height="15" fill="rgb(218,1,36)" fg:x="672384" fg:w="406"/><text x="57.8918%" y="335.50"></text></g><g><title>crossbeam_channel::context::Context::unpark (395 samples, 0.03%)</title><rect x="57.6427%" y="309" width="0.0339%" height="15" fill="rgb(246,84,54)" fg:x="672395" fg:w="395"/><text x="57.8927%" y="319.50"></text></g><g><title>std::thread::Thread::unpark (395 samples, 0.03%)</title><rect x="57.6427%" y="293" width="0.0339%" height="15" fill="rgb(242,110,6)" fg:x="672395" fg:w="395"/><text x="57.8927%" y="303.50"></text></g><g><title>std::sys_common::thread_parker::futex::Parker::unpark (395 samples, 0.03%)</title><rect x="57.6427%" y="277" width="0.0339%" height="15" fill="rgb(214,47,5)" fg:x="672395" fg:w="395"/><text x="57.8927%" y="287.50"></text></g><g><title>std::sys::unix::futex::futex_wake (393 samples, 0.03%)</title><rect x="57.6429%" y="261" width="0.0337%" height="15" fill="rgb(218,159,25)" fg:x="672397" fg:w="393"/><text x="57.8929%" y="271.50"></text></g><g><title>syscall (390 samples, 0.03%)</title><rect x="57.6432%" y="245" width="0.0334%" height="15" fill="rgb(215,211,28)" fg:x="672400" fg:w="390"/><text x="57.8932%" y="255.50"></text></g><g><title>crossbeam_channel::waker::Waker::try_select (409 samples, 0.04%)</title><rect x="57.6418%" y="357" width="0.0351%" height="15" fill="rgb(238,59,32)" fg:x="672384" fg:w="409"/><text x="57.8918%" y="367.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::read (434 samples, 0.04%)</title><rect x="57.6408%" y="389" width="0.0372%" height="15" fill="rgb(226,82,3)" fg:x="672373" fg:w="434"/><text x="57.8908%" y="399.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (434 samples, 0.04%)</title><rect x="57.6408%" y="373" width="0.0372%" height="15" fill="rgb(240,164,32)" fg:x="672373" fg:w="434"/><text x="57.8908%" y="383.50"></text></g><g><title>crossbeam_channel::channel::Receiver&lt;T&gt;::recv (456 samples, 0.04%)</title><rect x="57.6402%" y="421" width="0.0391%" height="15" fill="rgb(232,46,7)" fg:x="672365" fg:w="456"/><text x="57.8902%" y="431.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::recv (452 samples, 0.04%)</title><rect x="57.6405%" y="405" width="0.0387%" height="15" fill="rgb(229,129,53)" fg:x="672369" fg:w="452"/><text x="57.8905%" y="415.50"></text></g><g><title>do_syscall_64 (127 samples, 0.01%)</title><rect x="57.6963%" y="309" width="0.0109%" height="15" fill="rgb(234,188,29)" fg:x="673020" fg:w="127"/><text x="57.9463%" y="319.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (145 samples, 0.01%)</title><rect x="57.6949%" y="325" width="0.0124%" height="15" fill="rgb(246,141,4)" fg:x="673003" fg:w="145"/><text x="57.9449%" y="335.50"></text></g><g><title>&lt;std::fs::File as std::io::Seek&gt;::seek (181 samples, 0.02%)</title><rect x="57.6920%" y="373" width="0.0155%" height="15" fill="rgb(229,23,39)" fg:x="672970" fg:w="181"/><text x="57.9420%" y="383.50"></text></g><g><title>std::sys::unix::fs::File::seek (180 samples, 0.02%)</title><rect x="57.6921%" y="357" width="0.0154%" height="15" fill="rgb(206,12,3)" fg:x="672971" fg:w="180"/><text x="57.9421%" y="367.50"></text></g><g><title>__lseek64 (180 samples, 0.02%)</title><rect x="57.6921%" y="341" width="0.0154%" height="15" fill="rgb(252,226,20)" fg:x="672971" fg:w="180"/><text x="57.9421%" y="351.50"></text></g><g><title>__x64_sys_read (196 samples, 0.02%)</title><rect x="57.7116%" y="213" width="0.0168%" height="15" fill="rgb(216,123,35)" fg:x="673198" fg:w="196"/><text x="57.9616%" y="223.50"></text></g><g><title>ksys_read (195 samples, 0.02%)</title><rect x="57.7117%" y="197" width="0.0167%" height="15" fill="rgb(212,68,40)" fg:x="673199" fg:w="195"/><text x="57.9617%" y="207.50"></text></g><g><title>vfs_read (132 samples, 0.01%)</title><rect x="57.7171%" y="181" width="0.0113%" height="15" fill="rgb(254,125,32)" fg:x="673262" fg:w="132"/><text x="57.9671%" y="191.50"></text></g><g><title>do_syscall_64 (210 samples, 0.02%)</title><rect x="57.7113%" y="229" width="0.0180%" height="15" fill="rgb(253,97,22)" fg:x="673195" fg:w="210"/><text x="57.9613%" y="239.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (219 samples, 0.02%)</title><rect x="57.7106%" y="245" width="0.0188%" height="15" fill="rgb(241,101,14)" fg:x="673187" fg:w="219"/><text x="57.9606%" y="255.50"></text></g><g><title>byteorder::io::ReadBytesExt::read_u16 (258 samples, 0.02%)</title><rect x="57.7075%" y="373" width="0.0221%" height="15" fill="rgb(238,103,29)" fg:x="673151" fg:w="258"/><text x="57.9575%" y="383.50"></text></g><g><title>std::io::Read::read_exact (257 samples, 0.02%)</title><rect x="57.7076%" y="357" width="0.0220%" height="15" fill="rgb(233,195,47)" fg:x="673152" fg:w="257"/><text x="57.9576%" y="367.50"></text></g><g><title>std::io::default_read_exact (257 samples, 0.02%)</title><rect x="57.7076%" y="341" width="0.0220%" height="15" fill="rgb(246,218,30)" fg:x="673152" fg:w="257"/><text x="57.9576%" y="351.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (256 samples, 0.02%)</title><rect x="57.7077%" y="325" width="0.0219%" height="15" fill="rgb(219,145,47)" fg:x="673153" fg:w="256"/><text x="57.9577%" y="335.50"></text></g><g><title>std::sys::unix::fs::File::read (255 samples, 0.02%)</title><rect x="57.7078%" y="309" width="0.0219%" height="15" fill="rgb(243,12,26)" fg:x="673154" fg:w="255"/><text x="57.9578%" y="319.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (255 samples, 0.02%)</title><rect x="57.7078%" y="293" width="0.0219%" height="15" fill="rgb(214,87,16)" fg:x="673154" fg:w="255"/><text x="57.9578%" y="303.50"></text></g><g><title>__GI___libc_read (255 samples, 0.02%)</title><rect x="57.7078%" y="277" width="0.0219%" height="15" fill="rgb(208,99,42)" fg:x="673154" fg:w="255"/><text x="57.9578%" y="287.50"></text></g><g><title>__GI___libc_read (253 samples, 0.02%)</title><rect x="57.7080%" y="261" width="0.0217%" height="15" fill="rgb(253,99,2)" fg:x="673156" fg:w="253"/><text x="57.9580%" y="271.50"></text></g><g><title>__x64_sys_read (175 samples, 0.02%)</title><rect x="57.7319%" y="213" width="0.0150%" height="15" fill="rgb(220,168,23)" fg:x="673435" fg:w="175"/><text x="57.9819%" y="223.50"></text></g><g><title>ksys_read (174 samples, 0.01%)</title><rect x="57.7320%" y="197" width="0.0149%" height="15" fill="rgb(242,38,24)" fg:x="673436" fg:w="174"/><text x="57.9820%" y="207.50"></text></g><g><title>vfs_read (142 samples, 0.01%)</title><rect x="57.7347%" y="181" width="0.0122%" height="15" fill="rgb(225,182,9)" fg:x="673468" fg:w="142"/><text x="57.9847%" y="191.50"></text></g><g><title>do_syscall_64 (181 samples, 0.02%)</title><rect x="57.7317%" y="229" width="0.0155%" height="15" fill="rgb(243,178,37)" fg:x="673433" fg:w="181"/><text x="57.9817%" y="239.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (187 samples, 0.02%)</title><rect x="57.7314%" y="245" width="0.0160%" height="15" fill="rgb(232,139,19)" fg:x="673429" fg:w="187"/><text x="57.9814%" y="255.50"></text></g><g><title>byteorder::io::ReadBytesExt::read_u32 (209 samples, 0.02%)</title><rect x="57.7297%" y="373" width="0.0179%" height="15" fill="rgb(225,201,24)" fg:x="673409" fg:w="209"/><text x="57.9797%" y="383.50"></text></g><g><title>std::io::Read::read_exact (209 samples, 0.02%)</title><rect x="57.7297%" y="357" width="0.0179%" height="15" fill="rgb(221,47,46)" fg:x="673409" fg:w="209"/><text x="57.9797%" y="367.50"></text></g><g><title>std::io::default_read_exact (209 samples, 0.02%)</title><rect x="57.7297%" y="341" width="0.0179%" height="15" fill="rgb(249,23,13)" fg:x="673409" fg:w="209"/><text x="57.9797%" y="351.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (209 samples, 0.02%)</title><rect x="57.7297%" y="325" width="0.0179%" height="15" fill="rgb(219,9,5)" fg:x="673409" fg:w="209"/><text x="57.9797%" y="335.50"></text></g><g><title>std::sys::unix::fs::File::read (209 samples, 0.02%)</title><rect x="57.7297%" y="309" width="0.0179%" height="15" fill="rgb(254,171,16)" fg:x="673409" fg:w="209"/><text x="57.9797%" y="319.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (209 samples, 0.02%)</title><rect x="57.7297%" y="293" width="0.0179%" height="15" fill="rgb(230,171,20)" fg:x="673409" fg:w="209"/><text x="57.9797%" y="303.50"></text></g><g><title>__GI___libc_read (209 samples, 0.02%)</title><rect x="57.7297%" y="277" width="0.0179%" height="15" fill="rgb(210,71,41)" fg:x="673409" fg:w="209"/><text x="57.9797%" y="287.50"></text></g><g><title>__GI___libc_read (206 samples, 0.02%)</title><rect x="57.7299%" y="261" width="0.0177%" height="15" fill="rgb(206,173,20)" fg:x="673412" fg:w="206"/><text x="57.9799%" y="271.50"></text></g><g><title>zip::read::find_content (665 samples, 0.06%)</title><rect x="57.6914%" y="389" width="0.0570%" height="15" fill="rgb(233,88,34)" fg:x="672963" fg:w="665"/><text x="57.9414%" y="399.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as crypto_common::KeyInit&gt;::new_from_slice (125 samples, 0.01%)</title><rect x="57.7587%" y="341" width="0.0107%" height="15" fill="rgb(223,209,46)" fg:x="673748" fg:w="125"/><text x="58.0087%" y="351.50"></text></g><g><title>&lt;hmac::optim::HmacCore&lt;D&gt; as crypto_common::KeyInit&gt;::new_from_slice (125 samples, 0.01%)</title><rect x="57.7587%" y="325" width="0.0107%" height="15" fill="rgb(250,43,18)" fg:x="673748" fg:w="125"/><text x="58.0087%" y="335.50"></text></g><g><title>&lt;block_buffer::BlockBuffer&lt;BlockSize,Kind&gt; as core::clone::Clone&gt;::clone (1,235 samples, 0.11%)</title><rect x="57.9158%" y="309" width="0.1059%" height="15" fill="rgb(208,13,10)" fg:x="675580" fg:w="1235"/><text x="58.1658%" y="319.50"></text></g><g><title>generic_array::impls::&lt;impl core::clone::Clone for generic_array::GenericArray&lt;T,N&gt;&gt;::clone (605 samples, 0.05%)</title><rect x="57.9698%" y="293" width="0.0519%" height="15" fill="rgb(212,200,36)" fg:x="676210" fg:w="605"/><text x="58.2198%" y="303.50"></text></g><g><title>generic_array::functional::FunctionalSequence::map (497 samples, 0.04%)</title><rect x="57.9790%" y="277" width="0.0426%" height="15" fill="rgb(225,90,30)" fg:x="676318" fg:w="497"/><text x="58.2290%" y="287.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (497 samples, 0.04%)</title><rect x="57.9790%" y="261" width="0.0426%" height="15" fill="rgb(236,182,39)" fg:x="676318" fg:w="497"/><text x="58.2290%" y="271.50"></text></g><g><title>generic_array::ArrayBuilder&lt;T,N&gt;::into_inner (497 samples, 0.04%)</title><rect x="57.9790%" y="245" width="0.0426%" height="15" fill="rgb(212,144,35)" fg:x="676318" fg:w="497"/><text x="58.2290%" y="255.50"></text></g><g><title>&lt;hmac::optim::HmacCore&lt;D&gt; as core::clone::Clone&gt;::clone (877 samples, 0.08%)</title><rect x="58.0216%" y="309" width="0.0752%" height="15" fill="rgb(228,63,44)" fg:x="676815" fg:w="877"/><text x="58.2716%" y="319.50"></text></g><g><title>&lt;sha1::Sha1Core as core::clone::Clone&gt;::clone (877 samples, 0.08%)</title><rect x="58.0216%" y="293" width="0.0752%" height="15" fill="rgb(228,109,6)" fg:x="676815" fg:w="877"/><text x="58.2716%" y="303.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as core::clone::Clone&gt;::clone (3,187 samples, 0.27%)</title><rect x="57.8242%" y="325" width="0.2732%" height="15" fill="rgb(238,117,24)" fg:x="674512" fg:w="3187"/><text x="58.0742%" y="335.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::Update&gt;::update (498 samples, 0.04%)</title><rect x="58.0974%" y="325" width="0.0427%" height="15" fill="rgb(242,26,26)" fg:x="677699" fg:w="498"/><text x="58.3474%" y="335.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,Kind&gt;::digest_blocks (498 samples, 0.04%)</title><rect x="58.0974%" y="309" width="0.0427%" height="15" fill="rgb(221,92,48)" fg:x="677699" fg:w="498"/><text x="58.3474%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (268 samples, 0.02%)</title><rect x="58.1172%" y="293" width="0.0230%" height="15" fill="rgb(209,209,32)" fg:x="677929" fg:w="268"/><text x="58.3672%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (268 samples, 0.02%)</title><rect x="58.1172%" y="277" width="0.0230%" height="15" fill="rgb(221,70,22)" fg:x="677929" fg:w="268"/><text x="58.3672%" y="287.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (229 samples, 0.02%)</title><rect x="58.7153%" y="229" width="0.0196%" height="15" fill="rgb(248,145,5)" fg:x="684906" fg:w="229"/><text x="58.9653%" y="239.50"></text></g><g><title>sha1::compress::compress (1,200 samples, 0.10%)</title><rect x="58.7566%" y="213" width="0.1029%" height="15" fill="rgb(226,116,26)" fg:x="685388" fg:w="1200"/><text x="59.0066%" y="223.50"></text></g><g><title>sha1::compress::x86::compress (789 samples, 0.07%)</title><rect x="58.7918%" y="197" width="0.0676%" height="15" fill="rgb(244,5,17)" fg:x="685799" fg:w="789"/><text x="59.0418%" y="207.50"></text></g><g><title>sha1::compress::x86::shani_cpuid::get (316 samples, 0.03%)</title><rect x="58.8324%" y="181" width="0.0271%" height="15" fill="rgb(252,159,33)" fg:x="686272" fg:w="316"/><text x="59.0824%" y="191.50"></text></g><g><title>sha1::compress::x86::shani_cpuid::init_get (316 samples, 0.03%)</title><rect x="58.8324%" y="165" width="0.0271%" height="15" fill="rgb(206,71,0)" fg:x="686272" fg:w="316"/><text x="59.0824%" y="175.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (2,941 samples, 0.25%)</title><rect x="59.5155%" y="197" width="0.2521%" height="15" fill="rgb(233,118,54)" fg:x="694241" fg:w="2941"/><text x="59.7655%" y="207.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (2,941 samples, 0.25%)</title><rect x="59.5155%" y="181" width="0.2521%" height="15" fill="rgb(234,83,48)" fg:x="694241" fg:w="2941"/><text x="59.7655%" y="191.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (2,941 samples, 0.25%)</title><rect x="59.5155%" y="165" width="0.2521%" height="15" fill="rgb(228,3,54)" fg:x="694241" fg:w="2941"/><text x="59.7655%" y="175.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from::{{closure}} (2,941 samples, 0.25%)</title><rect x="59.5155%" y="149" width="0.2521%" height="15" fill="rgb(226,155,13)" fg:x="694241" fg:w="2941"/><text x="59.7655%" y="159.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (740 samples, 0.06%)</title><rect x="59.7677%" y="197" width="0.0634%" height="15" fill="rgb(241,28,37)" fg:x="697182" fg:w="740"/><text x="60.0177%" y="207.50"></text></g><g><title>core::num::&lt;impl u32&gt;::from_be_bytes (5,318 samples, 0.46%)</title><rect x="59.8315%" y="197" width="0.4559%" height="15" fill="rgb(233,93,10)" fg:x="697927" fg:w="5318"/><text x="60.0815%" y="207.50"></text></g><g><title>core::num::&lt;impl u32&gt;::from_be (5,318 samples, 0.46%)</title><rect x="59.8315%" y="181" width="0.4559%" height="15" fill="rgb(225,113,19)" fg:x="697927" fg:w="5318"/><text x="60.0815%" y="191.50"></text></g><g><title>core::num::&lt;impl u32&gt;::swap_bytes (5,318 samples, 0.46%)</title><rect x="59.8315%" y="165" width="0.4559%" height="15" fill="rgb(241,2,18)" fg:x="697927" fg:w="5318"/><text x="60.0815%" y="175.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (1,219 samples, 0.10%)</title><rect x="60.2874%" y="181" width="0.1045%" height="15" fill="rgb(228,207,21)" fg:x="703245" fg:w="1219"/><text x="60.5374%" y="191.50"></text></g><g><title>sha1::compress::soft::add (19,876 samples, 1.70%)</title><rect x="60.3919%" y="165" width="1.7039%" height="15" fill="rgb(213,211,35)" fg:x="704464" fg:w="19876"/><text x="60.6419%" y="175.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (19,876 samples, 1.70%)</title><rect x="60.3919%" y="149" width="1.7039%" height="15" fill="rgb(209,83,10)" fg:x="704464" fg:w="19876"/><text x="60.6419%" y="159.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (6,443 samples, 0.55%)</title><rect x="62.8635%" y="149" width="0.5523%" height="15" fill="rgb(209,164,1)" fg:x="733294" fg:w="6443"/><text x="63.1135%" y="159.50"></text></g><g><title>sha1::compress::soft::sha1rnds4c (24,836 samples, 2.13%)</title><rect x="62.0958%" y="165" width="2.1291%" height="15" fill="rgb(213,184,43)" fg:x="724340" fg:w="24836"/><text x="62.3458%" y="175.50">s..</text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (9,439 samples, 0.81%)</title><rect x="63.4158%" y="149" width="0.8092%" height="15" fill="rgb(231,61,34)" fg:x="739737" fg:w="9439"/><text x="63.6658%" y="159.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (2,457 samples, 0.21%)</title><rect x="65.2349%" y="149" width="0.2106%" height="15" fill="rgb(235,75,3)" fg:x="760957" fg:w="2457"/><text x="65.4849%" y="159.50"></text></g><g><title>sha1::compress::soft::sha1rnds4m (24,997 samples, 2.14%)</title><rect x="64.2250%" y="165" width="2.1429%" height="15" fill="rgb(220,106,47)" fg:x="749176" fg:w="24997"/><text x="64.4750%" y="175.50">s..</text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (10,759 samples, 0.92%)</title><rect x="65.4456%" y="149" width="0.9223%" height="15" fill="rgb(210,196,33)" fg:x="763414" fg:w="10759"/><text x="65.6956%" y="159.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (11,804 samples, 1.01%)</title><rect x="67.5743%" y="149" width="1.0119%" height="15" fill="rgb(229,154,42)" fg:x="788245" fg:w="11804"/><text x="67.8243%" y="159.50"></text></g><g><title>sha1::compress::soft::sha1_digest_round_x4 (116,327 samples, 9.97%)</title><rect x="60.3919%" y="181" width="9.9724%" height="15" fill="rgb(228,114,26)" fg:x="704464" fg:w="116327"/><text x="60.6419%" y="191.50">sha1::compress..</text></g><g><title>sha1::compress::soft::sha1rnds4p (46,618 samples, 4.00%)</title><rect x="66.3679%" y="165" width="3.9964%" height="15" fill="rgb(208,144,1)" fg:x="774173" fg:w="46618"/><text x="66.6179%" y="175.50">sha1..</text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (20,742 samples, 1.78%)</title><rect x="68.5862%" y="149" width="1.7782%" height="15" fill="rgb(239,112,37)" fg:x="800049" fg:w="20742"/><text x="68.8362%" y="159.50">c..</text></g><g><title>sha1::compress::soft::sha1_first_half (4,027 samples, 0.35%)</title><rect x="70.3651%" y="181" width="0.3452%" height="15" fill="rgb(210,96,50)" fg:x="820800" fg:w="4027"/><text x="70.6151%" y="191.50"></text></g><g><title>sha1::compress::soft::sha1_first_add (4,027 samples, 0.35%)</title><rect x="70.3651%" y="165" width="0.3452%" height="15" fill="rgb(222,178,2)" fg:x="820800" fg:w="4027"/><text x="70.6151%" y="175.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (4,027 samples, 0.35%)</title><rect x="70.3651%" y="149" width="0.3452%" height="15" fill="rgb(226,74,18)" fg:x="820800" fg:w="4027"/><text x="70.6151%" y="159.50"></text></g><g><title>sha1::compress::soft::sha1msg1 (8,991 samples, 0.77%)</title><rect x="70.7103%" y="181" width="0.7708%" height="15" fill="rgb(225,67,54)" fg:x="824827" fg:w="8991"/><text x="70.9603%" y="191.50"></text></g><g><title>sha1::compress::soft::sha1msg2 (43,399 samples, 3.72%)</title><rect x="71.4811%" y="181" width="3.7205%" height="15" fill="rgb(251,92,32)" fg:x="833818" fg:w="43399"/><text x="71.7311%" y="191.50">sha1..</text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (33,616 samples, 2.88%)</title><rect x="72.3198%" y="165" width="2.8818%" height="15" fill="rgb(228,149,22)" fg:x="843601" fg:w="33616"/><text x="72.5698%" y="175.50">co..</text></g><g><title>&lt;sha1::Sha1Core as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core::{{closure}} (202,446 samples, 17.36%)</title><rect x="58.7349%" y="229" width="17.3552%" height="15" fill="rgb(243,54,13)" fg:x="685135" fg:w="202446"/><text x="58.9849%" y="239.50">&lt;sha1::Sha1Core as digest::..</text></g><g><title>sha1::compress::soft::compress (200,993 samples, 17.23%)</title><rect x="58.8595%" y="213" width="17.2306%" height="15" fill="rgb(243,180,28)" fg:x="686588" fg:w="200993"/><text x="59.1095%" y="223.50">sha1::compress::soft::compr..</text></g><g><title>sha1::compress::soft::sha1_digest_block_u32 (184,336 samples, 15.80%)</title><rect x="60.2874%" y="197" width="15.8027%" height="15" fill="rgb(208,167,24)" fg:x="703245" fg:w="184336"/><text x="60.5374%" y="207.50">sha1::compress::soft::sh..</text></g><g><title>sha1::compress::soft::xor (10,364 samples, 0.89%)</title><rect x="75.2016%" y="181" width="0.8885%" height="15" fill="rgb(245,73,45)" fg:x="877217" fg:w="10364"/><text x="75.4516%" y="191.50"></text></g><g><title>__memset_avx2_unaligned_erms (735 samples, 0.06%)</title><rect x="76.0901%" y="229" width="0.0630%" height="15" fill="rgb(237,203,48)" fg:x="887581" fg:w="735"/><text x="76.3401%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (250 samples, 0.02%)</title><rect x="76.1531%" y="229" width="0.0214%" height="15" fill="rgb(211,197,16)" fg:x="888316" fg:w="250"/><text x="76.4031%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (250 samples, 0.02%)</title><rect x="76.1531%" y="213" width="0.0214%" height="15" fill="rgb(243,99,51)" fg:x="888316" fg:w="250"/><text x="76.4031%" y="223.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::digest_pad (204,371 samples, 17.52%)</title><rect x="58.6544%" y="245" width="17.5202%" height="15" fill="rgb(215,123,29)" fg:x="684196" fg:w="204371"/><text x="58.9044%" y="255.50">block_buffer::BlockBuffer&lt;B..</text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::len64_padding_be (204,372 samples, 17.52%)</title><rect x="58.6544%" y="261" width="17.5203%" height="15" fill="rgb(239,186,37)" fg:x="684196" fg:w="204372"/><text x="58.9044%" y="271.50">block_buffer::BlockBuffer&lt;B..</text></g><g><title>core::num::&lt;impl u32&gt;::to_be_bytes (10,755 samples, 0.92%)</title><rect x="76.1747%" y="261" width="0.9220%" height="15" fill="rgb(252,136,39)" fg:x="888568" fg:w="10755"/><text x="76.4247%" y="271.50"></text></g><g><title>core::num::&lt;impl u32&gt;::to_be (10,755 samples, 0.92%)</title><rect x="76.1747%" y="245" width="0.9220%" height="15" fill="rgb(223,213,32)" fg:x="888568" fg:w="10755"/><text x="76.4247%" y="255.50"></text></g><g><title>core::num::&lt;impl u32&gt;::swap_bytes (10,755 samples, 0.92%)</title><rect x="76.1747%" y="229" width="0.9220%" height="15" fill="rgb(233,115,5)" fg:x="888568" fg:w="10755"/><text x="76.4247%" y="239.50"></text></g><g><title>&lt;sha1::Sha1Core as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (220,883 samples, 18.94%)</title><rect x="58.1612%" y="277" width="18.9357%" height="15" fill="rgb(207,226,44)" fg:x="678443" fg:w="220883"/><text x="58.4112%" y="287.50">&lt;sha1::Sha1Core as digest::cor..</text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::FixedOutput&gt;::finalize_into (221,137 samples, 18.96%)</title><rect x="58.1611%" y="309" width="18.9575%" height="15" fill="rgb(208,126,0)" fg:x="678442" fg:w="221137"/><text x="58.4111%" y="319.50">&lt;digest::core_api::wrapper::Co..</text></g><g><title>&lt;hmac::optim::HmacCore&lt;D&gt; as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (221,137 samples, 18.96%)</title><rect x="58.1611%" y="293" width="18.9575%" height="15" fill="rgb(244,66,21)" fg:x="678442" fg:w="221137"/><text x="58.4111%" y="303.50">&lt;hmac::optim::HmacCore&lt;D&gt; as d..</text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,Kind&gt;::digest_blocks (253 samples, 0.02%)</title><rect x="77.0970%" y="277" width="0.0217%" height="15" fill="rgb(222,97,12)" fg:x="899326" fg:w="253"/><text x="77.3470%" y="287.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (252 samples, 0.02%)</title><rect x="77.0970%" y="261" width="0.0216%" height="15" fill="rgb(219,213,19)" fg:x="899327" fg:w="252"/><text x="77.3470%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (252 samples, 0.02%)</title><rect x="77.0970%" y="245" width="0.0216%" height="15" fill="rgb(252,169,30)" fg:x="899327" fg:w="252"/><text x="77.3470%" y="255.50"></text></g><g><title>__memcpy_avx_unaligned_erms (10,554 samples, 0.90%)</title><rect x="77.1186%" y="309" width="0.9048%" height="15" fill="rgb(206,32,51)" fg:x="899579" fg:w="10554"/><text x="77.3686%" y="319.50"></text></g><g><title>digest::FixedOutput::finalize_fixed (231,824 samples, 19.87%)</title><rect x="58.1498%" y="325" width="19.8737%" height="15" fill="rgb(250,172,42)" fg:x="678310" fg:w="231824"/><text x="58.3998%" y="335.50">digest::FixedOutput::finalize_f..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (950 samples, 0.08%)</title><rect x="78.2799%" y="277" width="0.0814%" height="15" fill="rgb(209,34,43)" fg:x="913125" fg:w="950"/><text x="78.5299%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (950 samples, 0.08%)</title><rect x="78.2799%" y="261" width="0.0814%" height="15" fill="rgb(223,11,35)" fg:x="913125" fg:w="950"/><text x="78.5299%" y="271.50"></text></g><g><title>pbkdf2::pbkdf2 (242,776 samples, 20.81%)</title><rect x="57.7581%" y="357" width="20.8126%" height="15" fill="rgb(251,219,26)" fg:x="673741" fg:w="242776"/><text x="58.0081%" y="367.50">pbkdf2::pbkdf2</text></g><g><title>pbkdf2::pbkdf2_body (242,638 samples, 20.80%)</title><rect x="57.7700%" y="341" width="20.8007%" height="15" fill="rgb(231,119,3)" fg:x="673879" fg:w="242638"/><text x="58.0200%" y="351.50">pbkdf2::pbkdf2_body</text></g><g><title>pbkdf2::xor (6,383 samples, 0.55%)</title><rect x="78.0235%" y="325" width="0.5472%" height="15" fill="rgb(216,97,11)" fg:x="910134" fg:w="6383"/><text x="78.2735%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (6,383 samples, 0.55%)</title><rect x="78.0235%" y="309" width="0.5472%" height="15" fill="rgb(223,59,9)" fg:x="910134" fg:w="6383"/><text x="78.2735%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (6,383 samples, 0.55%)</title><rect x="78.0235%" y="293" width="0.5472%" height="15" fill="rgb(233,93,31)" fg:x="910134" fg:w="6383"/><text x="78.2735%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (2,442 samples, 0.21%)</title><rect x="78.3614%" y="277" width="0.2093%" height="15" fill="rgb(239,81,33)" fg:x="914075" fg:w="2442"/><text x="78.6114%" y="287.50"></text></g><g><title>pbkdf2::xor::{{closure}} (2,442 samples, 0.21%)</title><rect x="78.3614%" y="261" width="0.2093%" height="15" fill="rgb(213,120,34)" fg:x="914075" fg:w="2442"/><text x="78.6114%" y="271.50"></text></g><g><title>&lt;u8 as core::ops::bit::BitXorAssign&lt;&amp;u8&gt;&gt;::bitxor_assign (2,442 samples, 0.21%)</title><rect x="78.3614%" y="245" width="0.2093%" height="15" fill="rgb(243,49,53)" fg:x="914075" fg:w="2442"/><text x="78.6114%" y="255.50"></text></g><g><title>&lt;u8 as core::ops::bit::BitXorAssign&gt;::bitxor_assign (2,442 samples, 0.21%)</title><rect x="78.3614%" y="229" width="0.2093%" height="15" fill="rgb(247,216,33)" fg:x="914075" fg:w="2442"/><text x="78.6114%" y="239.50"></text></g><g><title>ksys_read (163 samples, 0.01%)</title><rect x="78.5737%" y="165" width="0.0140%" height="15" fill="rgb(226,26,14)" fg:x="916552" fg:w="163"/><text x="78.8237%" y="175.50"></text></g><g><title>vfs_read (120 samples, 0.01%)</title><rect x="78.5774%" y="149" width="0.0103%" height="15" fill="rgb(215,49,53)" fg:x="916595" fg:w="120"/><text x="78.8274%" y="159.50"></text></g><g><title>__x64_sys_read (164 samples, 0.01%)</title><rect x="78.5737%" y="181" width="0.0141%" height="15" fill="rgb(245,162,40)" fg:x="916552" fg:w="164"/><text x="78.8237%" y="191.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (186 samples, 0.02%)</title><rect x="78.5731%" y="213" width="0.0159%" height="15" fill="rgb(229,68,17)" fg:x="916545" fg:w="186"/><text x="78.8231%" y="223.50"></text></g><g><title>do_syscall_64 (182 samples, 0.02%)</title><rect x="78.5734%" y="197" width="0.0156%" height="15" fill="rgb(213,182,10)" fg:x="916549" fg:w="182"/><text x="78.8234%" y="207.50"></text></g><g><title>std::io::Read::read_exact (218 samples, 0.02%)</title><rect x="78.5707%" y="357" width="0.0187%" height="15" fill="rgb(245,125,30)" fg:x="916517" fg:w="218"/><text x="78.8207%" y="367.50"></text></g><g><title>std::io::default_read_exact (218 samples, 0.02%)</title><rect x="78.5707%" y="341" width="0.0187%" height="15" fill="rgb(232,202,2)" fg:x="916517" fg:w="218"/><text x="78.8207%" y="351.50"></text></g><g><title>&lt;std::io::Take&lt;T&gt; as std::io::Read&gt;::read (218 samples, 0.02%)</title><rect x="78.5707%" y="325" width="0.0187%" height="15" fill="rgb(237,140,51)" fg:x="916517" fg:w="218"/><text x="78.8207%" y="335.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read (216 samples, 0.02%)</title><rect x="78.5709%" y="309" width="0.0185%" height="15" fill="rgb(236,157,25)" fg:x="916519" fg:w="216"/><text x="78.8209%" y="319.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (216 samples, 0.02%)</title><rect x="78.5709%" y="293" width="0.0185%" height="15" fill="rgb(219,209,0)" fg:x="916519" fg:w="216"/><text x="78.8209%" y="303.50"></text></g><g><title>std::sys::unix::fs::File::read (216 samples, 0.02%)</title><rect x="78.5709%" y="277" width="0.0185%" height="15" fill="rgb(240,116,54)" fg:x="916519" fg:w="216"/><text x="78.8209%" y="287.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (216 samples, 0.02%)</title><rect x="78.5709%" y="261" width="0.0185%" height="15" fill="rgb(216,10,36)" fg:x="916519" fg:w="216"/><text x="78.8209%" y="271.50"></text></g><g><title>__GI___libc_read (216 samples, 0.02%)</title><rect x="78.5709%" y="245" width="0.0185%" height="15" fill="rgb(222,72,44)" fg:x="916519" fg:w="216"/><text x="78.8209%" y="255.50"></text></g><g><title>__GI___libc_read (215 samples, 0.02%)</title><rect x="78.5710%" y="229" width="0.0184%" height="15" fill="rgb(232,159,9)" fg:x="916520" fg:w="215"/><text x="78.8210%" y="239.50"></text></g><g><title>__clone3 (244,417 samples, 20.95%)</title><rect x="57.6362%" y="645" width="20.9533%" height="15" fill="rgb(210,39,32)" fg:x="672319" fg:w="244417"/><text x="57.8862%" y="655.50">__clone3</text></g><g><title>start_thread (244,417 samples, 20.95%)</title><rect x="57.6362%" y="629" width="20.9533%" height="15" fill="rgb(216,194,45)" fg:x="672319" fg:w="244417"/><text x="57.8862%" y="639.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (244,417 samples, 20.95%)</title><rect x="57.6362%" y="613" width="20.9533%" height="15" fill="rgb(218,18,35)" fg:x="672319" fg:w="244417"/><text x="57.8862%" y="623.50">std::sys::unix::thread::Thread::n..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (244,417 samples, 20.95%)</title><rect x="57.6362%" y="597" width="20.9533%" height="15" fill="rgb(207,83,51)" fg:x="672319" fg:w="244417"/><text x="57.8862%" y="607.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (244,417 samples, 20.95%)</title><rect x="57.6362%" y="581" width="20.9533%" height="15" fill="rgb(225,63,43)" fg:x="672319" fg:w="244417"/><text x="57.8862%" y="591.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (244,417 samples, 20.95%)</title><rect x="57.6362%" y="565" width="20.9533%" height="15" fill="rgb(207,57,36)" fg:x="672319" fg:w="244417"/><text x="57.8862%" y="575.50">core::ops::function::FnOnce::call..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (244,417 samples, 20.95%)</title><rect x="57.6362%" y="549" width="20.9533%" height="15" fill="rgb(216,99,33)" fg:x="672319" fg:w="244417"/><text x="57.8862%" y="559.50">std::thread::Builder::spawn_unche..</text></g><g><title>std::panic::catch_unwind (244,417 samples, 20.95%)</title><rect x="57.6362%" y="533" width="20.9533%" height="15" fill="rgb(225,42,16)" fg:x="672319" fg:w="244417"/><text x="57.8862%" y="543.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (244,417 samples, 20.95%)</title><rect x="57.6362%" y="517" width="20.9533%" height="15" fill="rgb(220,201,45)" fg:x="672319" fg:w="244417"/><text x="57.8862%" y="527.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (244,417 samples, 20.95%)</title><rect x="57.6362%" y="501" width="20.9533%" height="15" fill="rgb(225,33,4)" fg:x="672319" fg:w="244417"/><text x="57.8862%" y="511.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (244,417 samples, 20.95%)</title><rect x="57.6362%" y="485" width="20.9533%" height="15" fill="rgb(224,33,50)" fg:x="672319" fg:w="244417"/><text x="57.8862%" y="495.50">&lt;core::panic::unwind_safe::Assert..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (244,417 samples, 20.95%)</title><rect x="57.6362%" y="469" width="20.9533%" height="15" fill="rgb(246,198,51)" fg:x="672319" fg:w="244417"/><text x="57.8862%" y="479.50">std::thread::Builder::spawn_unche..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (244,417 samples, 20.95%)</title><rect x="57.6362%" y="453" width="20.9533%" height="15" fill="rgb(205,22,4)" fg:x="672319" fg:w="244417"/><text x="57.8862%" y="463.50">std::sys_common::backtrace::__rus..</text></g><g><title>zip_password_finder::password_checker::{{closure}} (244,417 samples, 20.95%)</title><rect x="57.6362%" y="437" width="20.9533%" height="15" fill="rgb(206,3,8)" fg:x="672319" fg:w="244417"/><text x="57.8862%" y="447.50">zip_password_finder::password_che..</text></g><g><title>zip::read::&lt;impl zip::read::zip_archive::ZipArchive&lt;R&gt;&gt;::by_index_decrypt (243,784 samples, 20.90%)</title><rect x="57.6905%" y="421" width="20.8990%" height="15" fill="rgb(251,23,15)" fg:x="672952" fg:w="243784"/><text x="57.9405%" y="431.50">zip::read::&lt;impl zip::read::zip_a..</text></g><g><title>zip::read::&lt;impl zip::read::zip_archive::ZipArchive&lt;R&gt;&gt;::by_index_with_optional_password (243,784 samples, 20.90%)</title><rect x="57.6905%" y="405" width="20.8990%" height="15" fill="rgb(252,88,28)" fg:x="672952" fg:w="243784"/><text x="57.9405%" y="415.50">zip::read::&lt;impl zip::read::zip_a..</text></g><g><title>zip::read::make_crypto_reader (243,108 samples, 20.84%)</title><rect x="57.7484%" y="389" width="20.8410%" height="15" fill="rgb(212,127,14)" fg:x="673628" fg:w="243108"/><text x="57.9984%" y="399.50">zip::read::make_crypto_reader</text></g><g><title>zip::aes::AesReader&lt;R&gt;::validate (243,096 samples, 20.84%)</title><rect x="57.7495%" y="373" width="20.8400%" height="15" fill="rgb(247,145,37)" fg:x="673640" fg:w="243096"/><text x="57.9995%" y="383.50">zip::aes::AesReader&lt;R&gt;::validate</text></g><g><title>sha1::compress::compress (239 samples, 0.02%)</title><rect x="78.5942%" y="645" width="0.0205%" height="15" fill="rgb(209,117,53)" fg:x="916791" fg:w="239"/><text x="78.8442%" y="655.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as core::clone::Clone&gt;::clone (135 samples, 0.01%)</title><rect x="78.6156%" y="597" width="0.0116%" height="15" fill="rgb(212,90,42)" fg:x="917041" fg:w="135"/><text x="78.8656%" y="607.50"></text></g><g><title>&lt;block_buffer::BlockBuffer&lt;BlockSize,Kind&gt; as core::clone::Clone&gt;::clone (135 samples, 0.01%)</title><rect x="78.6156%" y="581" width="0.0116%" height="15" fill="rgb(218,164,37)" fg:x="917041" fg:w="135"/><text x="78.8656%" y="591.50"></text></g><g><title>zip::aes::AesReader&lt;R&gt;::validate (674 samples, 0.06%)</title><rect x="78.6155%" y="645" width="0.0578%" height="15" fill="rgb(246,65,34)" fg:x="917040" fg:w="674"/><text x="78.8655%" y="655.50"></text></g><g><title>pbkdf2::pbkdf2 (673 samples, 0.06%)</title><rect x="78.6156%" y="629" width="0.0577%" height="15" fill="rgb(231,100,33)" fg:x="917041" fg:w="673"/><text x="78.8656%" y="639.50"></text></g><g><title>pbkdf2::pbkdf2_body (673 samples, 0.06%)</title><rect x="78.6156%" y="613" width="0.0577%" height="15" fill="rgb(228,126,14)" fg:x="917041" fg:w="673"/><text x="78.8656%" y="623.50"></text></g><g><title>digest::FixedOutput::finalize_fixed (538 samples, 0.05%)</title><rect x="78.6272%" y="597" width="0.0461%" height="15" fill="rgb(215,173,21)" fg:x="917176" fg:w="538"/><text x="78.8772%" y="607.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::FixedOutput&gt;::finalize_into (419 samples, 0.04%)</title><rect x="78.6374%" y="581" width="0.0359%" height="15" fill="rgb(210,6,40)" fg:x="917295" fg:w="419"/><text x="78.8874%" y="591.50"></text></g><g><title>&lt;hmac::optim::HmacCore&lt;D&gt; as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (419 samples, 0.04%)</title><rect x="78.6374%" y="565" width="0.0359%" height="15" fill="rgb(212,48,18)" fg:x="917295" fg:w="419"/><text x="78.8874%" y="575.50"></text></g><g><title>&lt;sha1::Sha1Core as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (419 samples, 0.04%)</title><rect x="78.6374%" y="549" width="0.0359%" height="15" fill="rgb(230,214,11)" fg:x="917295" fg:w="419"/><text x="78.8874%" y="559.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::len64_padding_be (419 samples, 0.04%)</title><rect x="78.6374%" y="533" width="0.0359%" height="15" fill="rgb(254,105,39)" fg:x="917295" fg:w="419"/><text x="78.8874%" y="543.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::digest_pad (419 samples, 0.04%)</title><rect x="78.6374%" y="517" width="0.0359%" height="15" fill="rgb(245,158,5)" fg:x="917295" fg:w="419"/><text x="78.8874%" y="527.50"></text></g><g><title>&lt;sha1::Sha1Core as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core::{{closure}} (419 samples, 0.04%)</title><rect x="78.6374%" y="501" width="0.0359%" height="15" fill="rgb(249,208,11)" fg:x="917295" fg:w="419"/><text x="78.8874%" y="511.50"></text></g><g><title>worker-3 (248,493 samples, 21.30%)</title><rect x="57.3712%" y="661" width="21.3027%" height="15" fill="rgb(210,39,28)" fg:x="669228" fg:w="248493"/><text x="57.6212%" y="671.50">worker-3</text></g><g><title>sha1::compress::compress (315 samples, 0.03%)</title><rect x="78.6775%" y="629" width="0.0270%" height="15" fill="rgb(211,56,53)" fg:x="917763" fg:w="315"/><text x="78.9275%" y="639.50"></text></g><g><title>sha1::compress::soft::compress (216 samples, 0.02%)</title><rect x="78.7045%" y="629" width="0.0185%" height="15" fill="rgb(226,201,30)" fg:x="918078" fg:w="216"/><text x="78.9545%" y="639.50"></text></g><g><title>[anon] (569 samples, 0.05%)</title><rect x="78.6756%" y="645" width="0.0488%" height="15" fill="rgb(239,101,34)" fg:x="917741" fg:w="569"/><text x="78.9256%" y="655.50"></text></g><g><title>__memcpy_avx_unaligned_erms (136 samples, 0.01%)</title><rect x="78.7263%" y="629" width="0.0117%" height="15" fill="rgb(226,209,5)" fg:x="918332" fg:w="136"/><text x="78.9763%" y="639.50"></text></g><g><title>__memset_avx2_unaligned_erms (230 samples, 0.02%)</title><rect x="78.7380%" y="629" width="0.0197%" height="15" fill="rgb(250,105,47)" fg:x="918468" fg:w="230"/><text x="78.9880%" y="639.50"></text></g><g><title>sha1::compress::compress (483 samples, 0.04%)</title><rect x="78.7582%" y="629" width="0.0414%" height="15" fill="rgb(230,72,3)" fg:x="918704" fg:w="483"/><text x="79.0082%" y="639.50"></text></g><g><title>sha1::compress::x86::compress (483 samples, 0.04%)</title><rect x="78.7582%" y="613" width="0.0414%" height="15" fill="rgb(232,218,39)" fg:x="918704" fg:w="483"/><text x="79.0082%" y="623.50"></text></g><g><title>sha1::compress::soft::compress (1,738 samples, 0.15%)</title><rect x="78.7996%" y="629" width="0.1490%" height="15" fill="rgb(248,166,6)" fg:x="919187" fg:w="1738"/><text x="79.0496%" y="639.50"></text></g><g><title>[unknown] (2,624 samples, 0.22%)</title><rect x="78.7244%" y="645" width="0.2249%" height="15" fill="rgb(247,89,20)" fg:x="918310" fg:w="2624"/><text x="78.9744%" y="655.50"></text></g><g><title>enqueue_task (165 samples, 0.01%)</title><rect x="78.9683%" y="101" width="0.0141%" height="15" fill="rgb(248,130,54)" fg:x="921155" fg:w="165"/><text x="79.2183%" y="111.50"></text></g><g><title>ttwu_do_activate (189 samples, 0.02%)</title><rect x="78.9680%" y="117" width="0.0162%" height="15" fill="rgb(234,196,4)" fg:x="921152" fg:w="189"/><text x="79.2180%" y="127.50"></text></g><g><title>futex_wake (326 samples, 0.03%)</title><rect x="78.9583%" y="165" width="0.0279%" height="15" fill="rgb(250,143,31)" fg:x="921038" fg:w="326"/><text x="79.2083%" y="175.50"></text></g><g><title>wake_up_q (277 samples, 0.02%)</title><rect x="78.9625%" y="149" width="0.0237%" height="15" fill="rgb(211,110,34)" fg:x="921087" fg:w="277"/><text x="79.2125%" y="159.50"></text></g><g><title>try_to_wake_up (264 samples, 0.02%)</title><rect x="78.9636%" y="133" width="0.0226%" height="15" fill="rgb(215,124,48)" fg:x="921100" fg:w="264"/><text x="79.2136%" y="143.50"></text></g><g><title>do_futex (347 samples, 0.03%)</title><rect x="78.9575%" y="181" width="0.0297%" height="15" fill="rgb(216,46,13)" fg:x="921029" fg:w="347"/><text x="79.2075%" y="191.50"></text></g><g><title>__x64_sys_futex (350 samples, 0.03%)</title><rect x="78.9573%" y="197" width="0.0300%" height="15" fill="rgb(205,184,25)" fg:x="921027" fg:w="350"/><text x="79.2073%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (406 samples, 0.03%)</title><rect x="78.9538%" y="341" width="0.0348%" height="15" fill="rgb(228,1,10)" fg:x="920986" fg:w="406"/><text x="79.2038%" y="351.50"></text></g><g><title>crossbeam_channel::waker::Waker::try_select::{{closure}} (406 samples, 0.03%)</title><rect x="78.9538%" y="325" width="0.0348%" height="15" fill="rgb(213,116,27)" fg:x="920986" fg:w="406"/><text x="79.2038%" y="335.50"></text></g><g><title>crossbeam_channel::context::Context::unpark (395 samples, 0.03%)</title><rect x="78.9548%" y="309" width="0.0339%" height="15" fill="rgb(241,95,50)" fg:x="920997" fg:w="395"/><text x="79.2048%" y="319.50"></text></g><g><title>std::thread::Thread::unpark (395 samples, 0.03%)</title><rect x="78.9548%" y="293" width="0.0339%" height="15" fill="rgb(238,48,32)" fg:x="920997" fg:w="395"/><text x="79.2048%" y="303.50"></text></g><g><title>std::sys_common::thread_parker::futex::Parker::unpark (395 samples, 0.03%)</title><rect x="78.9548%" y="277" width="0.0339%" height="15" fill="rgb(235,113,49)" fg:x="920997" fg:w="395"/><text x="79.2048%" y="287.50"></text></g><g><title>std::sys::unix::futex::futex_wake (393 samples, 0.03%)</title><rect x="78.9549%" y="261" width="0.0337%" height="15" fill="rgb(205,127,43)" fg:x="920999" fg:w="393"/><text x="79.2049%" y="271.50"></text></g><g><title>syscall (392 samples, 0.03%)</title><rect x="78.9550%" y="245" width="0.0336%" height="15" fill="rgb(250,162,2)" fg:x="921000" fg:w="392"/><text x="79.2050%" y="255.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (373 samples, 0.03%)</title><rect x="78.9566%" y="229" width="0.0320%" height="15" fill="rgb(220,13,41)" fg:x="921019" fg:w="373"/><text x="79.2066%" y="239.50"></text></g><g><title>do_syscall_64 (367 samples, 0.03%)</title><rect x="78.9572%" y="213" width="0.0315%" height="15" fill="rgb(249,221,25)" fg:x="921025" fg:w="367"/><text x="79.2072%" y="223.50"></text></g><g><title>crossbeam_channel::waker::Waker::try_select (409 samples, 0.04%)</title><rect x="78.9538%" y="357" width="0.0351%" height="15" fill="rgb(215,208,19)" fg:x="920986" fg:w="409"/><text x="79.2038%" y="367.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::read (439 samples, 0.04%)</title><rect x="78.9525%" y="389" width="0.0376%" height="15" fill="rgb(236,175,2)" fg:x="920971" fg:w="439"/><text x="79.2025%" y="399.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (438 samples, 0.04%)</title><rect x="78.9526%" y="373" width="0.0375%" height="15" fill="rgb(241,52,2)" fg:x="920972" fg:w="438"/><text x="79.2026%" y="383.50"></text></g><g><title>crossbeam_channel::channel::Receiver&lt;T&gt;::recv (459 samples, 0.04%)</title><rect x="78.9522%" y="421" width="0.0393%" height="15" fill="rgb(248,140,14)" fg:x="920967" fg:w="459"/><text x="79.2022%" y="431.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::recv (456 samples, 0.04%)</title><rect x="78.9524%" y="405" width="0.0391%" height="15" fill="rgb(253,22,42)" fg:x="920970" fg:w="456"/><text x="79.2024%" y="415.50"></text></g><g><title>do_syscall_64 (129 samples, 0.01%)</title><rect x="79.0086%" y="309" width="0.0111%" height="15" fill="rgb(234,61,47)" fg:x="921625" fg:w="129"/><text x="79.2586%" y="319.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (149 samples, 0.01%)</title><rect x="79.0071%" y="325" width="0.0128%" height="15" fill="rgb(208,226,15)" fg:x="921608" fg:w="149"/><text x="79.2571%" y="335.50"></text></g><g><title>&lt;std::fs::File as std::io::Seek&gt;::seek (197 samples, 0.02%)</title><rect x="79.0038%" y="373" width="0.0169%" height="15" fill="rgb(217,221,4)" fg:x="921569" fg:w="197"/><text x="79.2538%" y="383.50"></text></g><g><title>std::sys::unix::fs::File::seek (197 samples, 0.02%)</title><rect x="79.0038%" y="357" width="0.0169%" height="15" fill="rgb(212,174,34)" fg:x="921569" fg:w="197"/><text x="79.2538%" y="367.50"></text></g><g><title>__lseek64 (193 samples, 0.02%)</title><rect x="79.0041%" y="341" width="0.0165%" height="15" fill="rgb(253,83,4)" fg:x="921573" fg:w="193"/><text x="79.2541%" y="351.50"></text></g><g><title>__x64_sys_read (184 samples, 0.02%)</title><rect x="79.0233%" y="213" width="0.0158%" height="15" fill="rgb(250,195,49)" fg:x="921797" fg:w="184"/><text x="79.2733%" y="223.50"></text></g><g><title>ksys_read (182 samples, 0.02%)</title><rect x="79.0235%" y="197" width="0.0156%" height="15" fill="rgb(241,192,25)" fg:x="921799" fg:w="182"/><text x="79.2735%" y="207.50"></text></g><g><title>vfs_read (139 samples, 0.01%)</title><rect x="79.0272%" y="181" width="0.0119%" height="15" fill="rgb(208,124,10)" fg:x="921842" fg:w="139"/><text x="79.2772%" y="191.50"></text></g><g><title>do_syscall_64 (197 samples, 0.02%)</title><rect x="79.0232%" y="229" width="0.0169%" height="15" fill="rgb(222,33,0)" fg:x="921795" fg:w="197"/><text x="79.2732%" y="239.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (207 samples, 0.02%)</title><rect x="79.0225%" y="245" width="0.0177%" height="15" fill="rgb(234,209,28)" fg:x="921787" fg:w="207"/><text x="79.2725%" y="255.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (231 samples, 0.02%)</title><rect x="79.0207%" y="325" width="0.0198%" height="15" fill="rgb(224,11,23)" fg:x="921766" fg:w="231"/><text x="79.2707%" y="335.50"></text></g><g><title>std::sys::unix::fs::File::read (231 samples, 0.02%)</title><rect x="79.0207%" y="309" width="0.0198%" height="15" fill="rgb(232,99,1)" fg:x="921766" fg:w="231"/><text x="79.2707%" y="319.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (231 samples, 0.02%)</title><rect x="79.0207%" y="293" width="0.0198%" height="15" fill="rgb(237,95,45)" fg:x="921766" fg:w="231"/><text x="79.2707%" y="303.50"></text></g><g><title>__GI___libc_read (230 samples, 0.02%)</title><rect x="79.0208%" y="277" width="0.0197%" height="15" fill="rgb(208,109,11)" fg:x="921767" fg:w="230"/><text x="79.2708%" y="287.50"></text></g><g><title>__GI___libc_read (229 samples, 0.02%)</title><rect x="79.0209%" y="261" width="0.0196%" height="15" fill="rgb(216,190,48)" fg:x="921768" fg:w="229"/><text x="79.2709%" y="271.50"></text></g><g><title>byteorder::io::ReadBytesExt::read_u16 (232 samples, 0.02%)</title><rect x="79.0207%" y="373" width="0.0199%" height="15" fill="rgb(251,171,36)" fg:x="921766" fg:w="232"/><text x="79.2707%" y="383.50"></text></g><g><title>std::io::Read::read_exact (232 samples, 0.02%)</title><rect x="79.0207%" y="357" width="0.0199%" height="15" fill="rgb(230,62,22)" fg:x="921766" fg:w="232"/><text x="79.2707%" y="367.50"></text></g><g><title>std::io::default_read_exact (232 samples, 0.02%)</title><rect x="79.0207%" y="341" width="0.0199%" height="15" fill="rgb(225,114,35)" fg:x="921766" fg:w="232"/><text x="79.2707%" y="351.50"></text></g><g><title>ksys_read (147 samples, 0.01%)</title><rect x="79.0436%" y="197" width="0.0126%" height="15" fill="rgb(215,118,42)" fg:x="922033" fg:w="147"/><text x="79.2936%" y="207.50"></text></g><g><title>vfs_read (124 samples, 0.01%)</title><rect x="79.0455%" y="181" width="0.0106%" height="15" fill="rgb(243,119,21)" fg:x="922056" fg:w="124"/><text x="79.2955%" y="191.50"></text></g><g><title>__x64_sys_read (150 samples, 0.01%)</title><rect x="79.0434%" y="213" width="0.0129%" height="15" fill="rgb(252,177,53)" fg:x="922031" fg:w="150"/><text x="79.2934%" y="223.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (165 samples, 0.01%)</title><rect x="79.0425%" y="245" width="0.0141%" height="15" fill="rgb(237,209,29)" fg:x="922021" fg:w="165"/><text x="79.2925%" y="255.50"></text></g><g><title>do_syscall_64 (157 samples, 0.01%)</title><rect x="79.0432%" y="229" width="0.0135%" height="15" fill="rgb(212,65,23)" fg:x="922029" fg:w="157"/><text x="79.2932%" y="239.50"></text></g><g><title>byteorder::io::ReadBytesExt::read_u32 (189 samples, 0.02%)</title><rect x="79.0406%" y="373" width="0.0162%" height="15" fill="rgb(230,222,46)" fg:x="921998" fg:w="189"/><text x="79.2906%" y="383.50"></text></g><g><title>std::io::Read::read_exact (188 samples, 0.02%)</title><rect x="79.0407%" y="357" width="0.0161%" height="15" fill="rgb(215,135,32)" fg:x="921999" fg:w="188"/><text x="79.2907%" y="367.50"></text></g><g><title>std::io::default_read_exact (188 samples, 0.02%)</title><rect x="79.0407%" y="341" width="0.0161%" height="15" fill="rgb(246,101,22)" fg:x="921999" fg:w="188"/><text x="79.2907%" y="351.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (188 samples, 0.02%)</title><rect x="79.0407%" y="325" width="0.0161%" height="15" fill="rgb(206,107,13)" fg:x="921999" fg:w="188"/><text x="79.2907%" y="335.50"></text></g><g><title>std::sys::unix::fs::File::read (188 samples, 0.02%)</title><rect x="79.0407%" y="309" width="0.0161%" height="15" fill="rgb(250,100,44)" fg:x="921999" fg:w="188"/><text x="79.2907%" y="319.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (188 samples, 0.02%)</title><rect x="79.0407%" y="293" width="0.0161%" height="15" fill="rgb(231,147,38)" fg:x="921999" fg:w="188"/><text x="79.2907%" y="303.50"></text></g><g><title>__GI___libc_read (188 samples, 0.02%)</title><rect x="79.0407%" y="277" width="0.0161%" height="15" fill="rgb(229,8,40)" fg:x="921999" fg:w="188"/><text x="79.2907%" y="287.50"></text></g><g><title>__GI___libc_read (187 samples, 0.02%)</title><rect x="79.0407%" y="261" width="0.0160%" height="15" fill="rgb(221,135,30)" fg:x="922000" fg:w="187"/><text x="79.2907%" y="271.50"></text></g><g><title>zip::read::find_content (638 samples, 0.05%)</title><rect x="79.0030%" y="389" width="0.0547%" height="15" fill="rgb(249,193,18)" fg:x="921560" fg:w="638"/><text x="79.2530%" y="399.50"></text></g><g><title>&lt;sha1::Sha1Core as digest::core_api::UpdateCore&gt;::update_blocks (117 samples, 0.01%)</title><rect x="79.0695%" y="309" width="0.0100%" height="15" fill="rgb(209,133,39)" fg:x="922335" fg:w="117"/><text x="79.3195%" y="319.50"></text></g><g><title>sha1::compress::soft::compress (117 samples, 0.01%)</title><rect x="79.0695%" y="293" width="0.0100%" height="15" fill="rgb(232,100,14)" fg:x="922335" fg:w="117"/><text x="79.3195%" y="303.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as crypto_common::KeyInit&gt;::new_from_slice (141 samples, 0.01%)</title><rect x="79.0683%" y="341" width="0.0121%" height="15" fill="rgb(224,185,1)" fg:x="922321" fg:w="141"/><text x="79.3183%" y="351.50"></text></g><g><title>&lt;hmac::optim::HmacCore&lt;D&gt; as crypto_common::KeyInit&gt;::new_from_slice (141 samples, 0.01%)</title><rect x="79.0683%" y="325" width="0.0121%" height="15" fill="rgb(223,139,8)" fg:x="922321" fg:w="141"/><text x="79.3183%" y="335.50"></text></g><g><title>&lt;block_buffer::BlockBuffer&lt;BlockSize,Kind&gt; as core::clone::Clone&gt;::clone (1,233 samples, 0.11%)</title><rect x="79.2177%" y="309" width="0.1057%" height="15" fill="rgb(232,213,38)" fg:x="924064" fg:w="1233"/><text x="79.4677%" y="319.50"></text></g><g><title>generic_array::impls::&lt;impl core::clone::Clone for generic_array::GenericArray&lt;T,N&gt;&gt;::clone (580 samples, 0.05%)</title><rect x="79.2737%" y="293" width="0.0497%" height="15" fill="rgb(207,94,22)" fg:x="924717" fg:w="580"/><text x="79.5237%" y="303.50"></text></g><g><title>generic_array::functional::FunctionalSequence::map (478 samples, 0.04%)</title><rect x="79.2824%" y="277" width="0.0410%" height="15" fill="rgb(219,183,54)" fg:x="924819" fg:w="478"/><text x="79.5324%" y="287.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (478 samples, 0.04%)</title><rect x="79.2824%" y="261" width="0.0410%" height="15" fill="rgb(216,185,54)" fg:x="924819" fg:w="478"/><text x="79.5324%" y="271.50"></text></g><g><title>generic_array::ArrayBuilder&lt;T,N&gt;::into_inner (478 samples, 0.04%)</title><rect x="79.2824%" y="245" width="0.0410%" height="15" fill="rgb(254,217,39)" fg:x="924819" fg:w="478"/><text x="79.5324%" y="255.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as core::clone::Clone&gt;::clone (3,042 samples, 0.26%)</title><rect x="79.1324%" y="325" width="0.2608%" height="15" fill="rgb(240,178,23)" fg:x="923069" fg:w="3042"/><text x="79.3824%" y="335.50"></text></g><g><title>&lt;hmac::optim::HmacCore&lt;D&gt; as core::clone::Clone&gt;::clone (814 samples, 0.07%)</title><rect x="79.3234%" y="309" width="0.0698%" height="15" fill="rgb(218,11,47)" fg:x="925297" fg:w="814"/><text x="79.5734%" y="319.50"></text></g><g><title>&lt;sha1::Sha1Core as core::clone::Clone&gt;::clone (814 samples, 0.07%)</title><rect x="79.3234%" y="293" width="0.0698%" height="15" fill="rgb(218,51,51)" fg:x="925297" fg:w="814"/><text x="79.5734%" y="303.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::Update&gt;::update (508 samples, 0.04%)</title><rect x="79.3932%" y="325" width="0.0435%" height="15" fill="rgb(238,126,27)" fg:x="926111" fg:w="508"/><text x="79.6432%" y="335.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,Kind&gt;::digest_blocks (508 samples, 0.04%)</title><rect x="79.3932%" y="309" width="0.0435%" height="15" fill="rgb(249,202,22)" fg:x="926111" fg:w="508"/><text x="79.6432%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (260 samples, 0.02%)</title><rect x="79.4144%" y="293" width="0.0223%" height="15" fill="rgb(254,195,49)" fg:x="926359" fg:w="260"/><text x="79.6644%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (260 samples, 0.02%)</title><rect x="79.4144%" y="277" width="0.0223%" height="15" fill="rgb(208,123,14)" fg:x="926359" fg:w="260"/><text x="79.6644%" y="287.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (237 samples, 0.02%)</title><rect x="80.0162%" y="229" width="0.0203%" height="15" fill="rgb(224,200,8)" fg:x="933378" fg:w="237"/><text x="80.2662%" y="239.50"></text></g><g><title>sha1::compress::compress (1,182 samples, 0.10%)</title><rect x="80.0574%" y="213" width="0.1013%" height="15" fill="rgb(217,61,36)" fg:x="933859" fg:w="1182"/><text x="80.3074%" y="223.50"></text></g><g><title>sha1::compress::x86::compress (792 samples, 0.07%)</title><rect x="80.0908%" y="197" width="0.0679%" height="15" fill="rgb(206,35,45)" fg:x="934249" fg:w="792"/><text x="80.3408%" y="207.50"></text></g><g><title>sha1::compress::x86::shani_cpuid::get (317 samples, 0.03%)</title><rect x="80.1315%" y="181" width="0.0272%" height="15" fill="rgb(217,65,33)" fg:x="934724" fg:w="317"/><text x="80.3815%" y="191.50"></text></g><g><title>sha1::compress::x86::shani_cpuid::init_get (317 samples, 0.03%)</title><rect x="80.1315%" y="165" width="0.0272%" height="15" fill="rgb(222,158,48)" fg:x="934724" fg:w="317"/><text x="80.3815%" y="175.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (3,015 samples, 0.26%)</title><rect x="80.8117%" y="197" width="0.2585%" height="15" fill="rgb(254,2,54)" fg:x="942658" fg:w="3015"/><text x="81.0617%" y="207.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (3,015 samples, 0.26%)</title><rect x="80.8117%" y="181" width="0.2585%" height="15" fill="rgb(250,143,38)" fg:x="942658" fg:w="3015"/><text x="81.0617%" y="191.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (3,015 samples, 0.26%)</title><rect x="80.8117%" y="165" width="0.2585%" height="15" fill="rgb(248,25,0)" fg:x="942658" fg:w="3015"/><text x="81.0617%" y="175.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from::{{closure}} (3,015 samples, 0.26%)</title><rect x="80.8117%" y="149" width="0.2585%" height="15" fill="rgb(206,152,27)" fg:x="942658" fg:w="3015"/><text x="81.0617%" y="159.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (763 samples, 0.07%)</title><rect x="81.0702%" y="197" width="0.0654%" height="15" fill="rgb(240,77,30)" fg:x="945673" fg:w="763"/><text x="81.3202%" y="207.50"></text></g><g><title>core::num::&lt;impl u32&gt;::from_be_bytes (5,284 samples, 0.45%)</title><rect x="81.1366%" y="197" width="0.4530%" height="15" fill="rgb(231,5,3)" fg:x="946448" fg:w="5284"/><text x="81.3866%" y="207.50"></text></g><g><title>core::num::&lt;impl u32&gt;::from_be (5,284 samples, 0.45%)</title><rect x="81.1366%" y="181" width="0.4530%" height="15" fill="rgb(207,226,32)" fg:x="946448" fg:w="5284"/><text x="81.3866%" y="191.50"></text></g><g><title>core::num::&lt;impl u32&gt;::swap_bytes (5,284 samples, 0.45%)</title><rect x="81.1366%" y="165" width="0.4530%" height="15" fill="rgb(222,207,47)" fg:x="946448" fg:w="5284"/><text x="81.3866%" y="175.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (1,203 samples, 0.10%)</title><rect x="81.5896%" y="181" width="0.1031%" height="15" fill="rgb(229,115,45)" fg:x="951732" fg:w="1203"/><text x="81.8396%" y="191.50"></text></g><g><title>sha1::compress::soft::add (19,803 samples, 1.70%)</title><rect x="81.6927%" y="165" width="1.6977%" height="15" fill="rgb(224,191,6)" fg:x="952935" fg:w="19803"/><text x="81.9427%" y="175.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (19,803 samples, 1.70%)</title><rect x="81.6927%" y="149" width="1.6977%" height="15" fill="rgb(230,227,24)" fg:x="952935" fg:w="19803"/><text x="81.9427%" y="159.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (6,587 samples, 0.56%)</title><rect x="84.1574%" y="149" width="0.5647%" height="15" fill="rgb(228,80,19)" fg:x="981685" fg:w="6587"/><text x="84.4074%" y="159.50"></text></g><g><title>sha1::compress::soft::sha1rnds4c (24,828 samples, 2.13%)</title><rect x="83.3904%" y="165" width="2.1284%" height="15" fill="rgb(247,229,0)" fg:x="972738" fg:w="24828"/><text x="83.6404%" y="175.50">s..</text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (9,294 samples, 0.80%)</title><rect x="84.7221%" y="149" width="0.7968%" height="15" fill="rgb(237,194,15)" fg:x="988272" fg:w="9294"/><text x="84.9721%" y="159.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (2,441 samples, 0.21%)</title><rect x="86.5089%" y="149" width="0.2093%" height="15" fill="rgb(219,203,20)" fg:x="1009115" fg:w="2441"/><text x="86.7589%" y="159.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (10,686 samples, 0.92%)</title><rect x="86.7182%" y="149" width="0.9161%" height="15" fill="rgb(234,128,8)" fg:x="1011556" fg:w="10686"/><text x="86.9682%" y="159.50"></text></g><g><title>sha1::compress::soft::sha1rnds4m (24,678 samples, 2.12%)</title><rect x="85.5188%" y="165" width="2.1156%" height="15" fill="rgb(248,202,8)" fg:x="997566" fg:w="24678"/><text x="85.7688%" y="175.50">s..</text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (11,777 samples, 1.01%)</title><rect x="88.8380%" y="149" width="1.0096%" height="15" fill="rgb(206,104,37)" fg:x="1036284" fg:w="11777"/><text x="89.0880%" y="159.50"></text></g><g><title>sha1::compress::soft::sha1_digest_round_x4 (115,796 samples, 9.93%)</title><rect x="81.6927%" y="181" width="9.9269%" height="15" fill="rgb(223,8,27)" fg:x="952935" fg:w="115796"/><text x="81.9427%" y="191.50">sha1::compress..</text></g><g><title>sha1::compress::soft::sha1rnds4p (46,487 samples, 3.99%)</title><rect x="87.6344%" y="165" width="3.9852%" height="15" fill="rgb(216,217,28)" fg:x="1022244" fg:w="46487"/><text x="87.8844%" y="175.50">sha1..</text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (20,670 samples, 1.77%)</title><rect x="89.8476%" y="149" width="1.7720%" height="15" fill="rgb(249,199,1)" fg:x="1048061" fg:w="20670"/><text x="90.0976%" y="159.50">c..</text></g><g><title>sha1::compress::soft::sha1_first_half (4,145 samples, 0.36%)</title><rect x="91.6204%" y="181" width="0.3553%" height="15" fill="rgb(240,85,17)" fg:x="1068740" fg:w="4145"/><text x="91.8704%" y="191.50"></text></g><g><title>sha1::compress::soft::sha1_first_add (4,145 samples, 0.36%)</title><rect x="91.6204%" y="165" width="0.3553%" height="15" fill="rgb(206,108,45)" fg:x="1068740" fg:w="4145"/><text x="91.8704%" y="175.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (4,145 samples, 0.36%)</title><rect x="91.6204%" y="149" width="0.3553%" height="15" fill="rgb(245,210,41)" fg:x="1068740" fg:w="4145"/><text x="91.8704%" y="159.50"></text></g><g><title>sha1::compress::soft::sha1msg1 (8,995 samples, 0.77%)</title><rect x="91.9757%" y="181" width="0.7711%" height="15" fill="rgb(206,13,37)" fg:x="1072885" fg:w="8995"/><text x="92.2257%" y="191.50"></text></g><g><title>sha1::compress::soft::sha1msg2 (43,857 samples, 3.76%)</title><rect x="92.7469%" y="181" width="3.7598%" height="15" fill="rgb(250,61,18)" fg:x="1081880" fg:w="43857"/><text x="92.9969%" y="191.50">sha1..</text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (34,182 samples, 2.93%)</title><rect x="93.5763%" y="165" width="2.9303%" height="15" fill="rgb(235,172,48)" fg:x="1091555" fg:w="34182"/><text x="93.8263%" y="175.50">co..</text></g><g><title>&lt;sha1::Sha1Core as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core::{{closure}} (202,488 samples, 17.36%)</title><rect x="80.0365%" y="229" width="17.3588%" height="15" fill="rgb(249,201,17)" fg:x="933615" fg:w="202488"/><text x="80.2865%" y="239.50">&lt;sha1::Sha1Core as digest::..</text></g><g><title>sha1::compress::soft::compress (201,062 samples, 17.24%)</title><rect x="80.1587%" y="213" width="17.2365%" height="15" fill="rgb(219,208,6)" fg:x="935041" fg:w="201062"/><text x="80.4087%" y="223.50">sha1::compress::soft::compr..</text></g><g><title>sha1::compress::soft::sha1_digest_block_u32 (184,371 samples, 15.81%)</title><rect x="81.5896%" y="197" width="15.8057%" height="15" fill="rgb(248,31,23)" fg:x="951732" fg:w="184371"/><text x="81.8396%" y="207.50">sha1::compress::soft::sh..</text></g><g><title>sha1::compress::soft::xor (10,366 samples, 0.89%)</title><rect x="96.5066%" y="181" width="0.8887%" height="15" fill="rgb(245,15,42)" fg:x="1125737" fg:w="10366"/><text x="96.7566%" y="191.50"></text></g><g><title>__memset_avx2_unaligned_erms (670 samples, 0.06%)</title><rect x="97.3953%" y="229" width="0.0574%" height="15" fill="rgb(222,217,39)" fg:x="1136103" fg:w="670"/><text x="97.6453%" y="239.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::digest_pad (204,328 samples, 17.52%)</title><rect x="79.9576%" y="245" width="17.5165%" height="15" fill="rgb(210,219,27)" fg:x="932695" fg:w="204328"/><text x="80.2076%" y="255.50">block_buffer::BlockBuffer&lt;B..</text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (248 samples, 0.02%)</title><rect x="97.4529%" y="229" width="0.0213%" height="15" fill="rgb(252,166,36)" fg:x="1136775" fg:w="248"/><text x="97.7029%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (248 samples, 0.02%)</title><rect x="97.4529%" y="213" width="0.0213%" height="15" fill="rgb(245,132,34)" fg:x="1136775" fg:w="248"/><text x="97.7029%" y="223.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::len64_padding_be (204,329 samples, 17.52%)</title><rect x="79.9576%" y="261" width="17.5166%" height="15" fill="rgb(236,54,3)" fg:x="932695" fg:w="204329"/><text x="80.2076%" y="271.50">block_buffer::BlockBuffer&lt;B..</text></g><g><title>&lt;sha1::Sha1Core as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (221,141 samples, 18.96%)</title><rect x="79.4567%" y="277" width="18.9579%" height="15" fill="rgb(241,173,43)" fg:x="926852" fg:w="221141"/><text x="79.7067%" y="287.50">&lt;sha1::Sha1Core as digest::cor..</text></g><g><title>core::num::&lt;impl u32&gt;::to_be_bytes (10,969 samples, 0.94%)</title><rect x="97.4742%" y="261" width="0.9403%" height="15" fill="rgb(215,190,9)" fg:x="1137024" fg:w="10969"/><text x="97.7242%" y="271.50"></text></g><g><title>core::num::&lt;impl u32&gt;::to_be (10,969 samples, 0.94%)</title><rect x="97.4742%" y="245" width="0.9403%" height="15" fill="rgb(242,101,16)" fg:x="1137024" fg:w="10969"/><text x="97.7242%" y="255.50"></text></g><g><title>core::num::&lt;impl u32&gt;::swap_bytes (10,969 samples, 0.94%)</title><rect x="97.4742%" y="229" width="0.9403%" height="15" fill="rgb(223,190,21)" fg:x="1137024" fg:w="10969"/><text x="97.7242%" y="239.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::FixedOutput&gt;::finalize_into (221,361 samples, 18.98%)</title><rect x="79.4567%" y="309" width="18.9767%" height="15" fill="rgb(215,228,25)" fg:x="926852" fg:w="221361"/><text x="79.7067%" y="319.50">&lt;digest::core_api::wrapper::Co..</text></g><g><title>&lt;hmac::optim::HmacCore&lt;D&gt; as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (221,361 samples, 18.98%)</title><rect x="79.4567%" y="293" width="18.9767%" height="15" fill="rgb(225,36,22)" fg:x="926852" fg:w="221361"/><text x="79.7067%" y="303.50">&lt;hmac::optim::HmacCore&lt;D&gt; as d..</text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,Kind&gt;::digest_blocks (220 samples, 0.02%)</title><rect x="98.4146%" y="277" width="0.0189%" height="15" fill="rgb(251,106,46)" fg:x="1147993" fg:w="220"/><text x="98.6646%" y="287.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (220 samples, 0.02%)</title><rect x="98.4146%" y="261" width="0.0189%" height="15" fill="rgb(208,90,1)" fg:x="1147993" fg:w="220"/><text x="98.6646%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (220 samples, 0.02%)</title><rect x="98.4146%" y="245" width="0.0189%" height="15" fill="rgb(243,10,4)" fg:x="1147993" fg:w="220"/><text x="98.6646%" y="255.50"></text></g><g><title>digest::FixedOutput::finalize_fixed (232,043 samples, 19.89%)</title><rect x="79.4467%" y="325" width="19.8925%" height="15" fill="rgb(212,137,27)" fg:x="926736" fg:w="232043"/><text x="79.6967%" y="335.50">digest::FixedOutput::finalize_f..</text></g><g><title>__memcpy_avx_unaligned_erms (10,566 samples, 0.91%)</title><rect x="98.4334%" y="309" width="0.9058%" height="15" fill="rgb(231,220,49)" fg:x="1148213" fg:w="10566"/><text x="98.6834%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (959 samples, 0.08%)</title><rect x="99.5831%" y="277" width="0.0822%" height="15" fill="rgb(237,96,20)" fg:x="1161624" fg:w="959"/><text x="99.8331%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (959 samples, 0.08%)</title><rect x="99.5831%" y="261" width="0.0822%" height="15" fill="rgb(239,229,30)" fg:x="1161624" fg:w="959"/><text x="99.8331%" y="271.50"></text></g><g><title>pbkdf2::pbkdf2 (242,701 samples, 20.81%)</title><rect x="79.0679%" y="357" width="20.8061%" height="15" fill="rgb(219,65,33)" fg:x="922317" fg:w="242701"/><text x="79.3179%" y="367.50">pbkdf2::pbkdf2</text></g><g><title>pbkdf2::pbkdf2_body (242,547 samples, 20.79%)</title><rect x="79.0811%" y="341" width="20.7929%" height="15" fill="rgb(243,134,7)" fg:x="922471" fg:w="242547"/><text x="79.3311%" y="351.50">pbkdf2::pbkdf2_body</text></g><g><title>pbkdf2::xor (6,239 samples, 0.53%)</title><rect x="99.3392%" y="325" width="0.5349%" height="15" fill="rgb(216,177,54)" fg:x="1158779" fg:w="6239"/><text x="99.5892%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (6,239 samples, 0.53%)</title><rect x="99.3392%" y="309" width="0.5349%" height="15" fill="rgb(211,160,20)" fg:x="1158779" fg:w="6239"/><text x="99.5892%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (6,239 samples, 0.53%)</title><rect x="99.3392%" y="293" width="0.5349%" height="15" fill="rgb(239,85,39)" fg:x="1158779" fg:w="6239"/><text x="99.5892%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (2,434 samples, 0.21%)</title><rect x="99.6654%" y="277" width="0.2087%" height="15" fill="rgb(232,125,22)" fg:x="1162584" fg:w="2434"/><text x="99.9154%" y="287.50"></text></g><g><title>pbkdf2::xor::{{closure}} (2,434 samples, 0.21%)</title><rect x="99.6654%" y="261" width="0.2087%" height="15" fill="rgb(244,57,34)" fg:x="1162584" fg:w="2434"/><text x="99.9154%" y="271.50"></text></g><g><title>&lt;u8 as core::ops::bit::BitXorAssign&lt;&amp;u8&gt;&gt;::bitxor_assign (2,434 samples, 0.21%)</title><rect x="99.6654%" y="245" width="0.2087%" height="15" fill="rgb(214,203,32)" fg:x="1162584" fg:w="2434"/><text x="99.9154%" y="255.50"></text></g><g><title>&lt;u8 as core::ops::bit::BitXorAssign&gt;::bitxor_assign (2,434 samples, 0.21%)</title><rect x="99.6654%" y="229" width="0.2087%" height="15" fill="rgb(207,58,43)" fg:x="1162584" fg:w="2434"/><text x="99.9154%" y="239.50"></text></g><g><title>__x64_sys_read (188 samples, 0.02%)</title><rect x="99.8770%" y="181" width="0.0161%" height="15" fill="rgb(215,193,15)" fg:x="1165052" fg:w="188"/><text x="100.1270%" y="191.50"></text></g><g><title>ksys_read (188 samples, 0.02%)</title><rect x="99.8770%" y="165" width="0.0161%" height="15" fill="rgb(232,15,44)" fg:x="1165052" fg:w="188"/><text x="100.1270%" y="175.50"></text></g><g><title>vfs_read (139 samples, 0.01%)</title><rect x="99.8812%" y="149" width="0.0119%" height="15" fill="rgb(212,3,48)" fg:x="1165101" fg:w="139"/><text x="100.1312%" y="159.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (205 samples, 0.02%)</title><rect x="99.8763%" y="213" width="0.0176%" height="15" fill="rgb(218,128,7)" fg:x="1165044" fg:w="205"/><text x="100.1263%" y="223.50"></text></g><g><title>do_syscall_64 (200 samples, 0.02%)</title><rect x="99.8767%" y="197" width="0.0171%" height="15" fill="rgb(226,216,39)" fg:x="1165049" fg:w="200"/><text x="100.1267%" y="207.50"></text></g><g><title>std::io::Read::read_exact (237 samples, 0.02%)</title><rect x="99.8741%" y="357" width="0.0203%" height="15" fill="rgb(243,47,51)" fg:x="1165018" fg:w="237"/><text x="100.1241%" y="367.50"></text></g><g><title>std::io::default_read_exact (237 samples, 0.02%)</title><rect x="99.8741%" y="341" width="0.0203%" height="15" fill="rgb(241,183,40)" fg:x="1165018" fg:w="237"/><text x="100.1241%" y="351.50"></text></g><g><title>&lt;std::io::Take&lt;T&gt; as std::io::Read&gt;::read (237 samples, 0.02%)</title><rect x="99.8741%" y="325" width="0.0203%" height="15" fill="rgb(231,217,32)" fg:x="1165018" fg:w="237"/><text x="100.1241%" y="335.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read (237 samples, 0.02%)</title><rect x="99.8741%" y="309" width="0.0203%" height="15" fill="rgb(229,61,38)" fg:x="1165018" fg:w="237"/><text x="100.1241%" y="319.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (237 samples, 0.02%)</title><rect x="99.8741%" y="293" width="0.0203%" height="15" fill="rgb(225,210,5)" fg:x="1165018" fg:w="237"/><text x="100.1241%" y="303.50"></text></g><g><title>std::sys::unix::fs::File::read (237 samples, 0.02%)</title><rect x="99.8741%" y="277" width="0.0203%" height="15" fill="rgb(231,79,45)" fg:x="1165018" fg:w="237"/><text x="100.1241%" y="287.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (237 samples, 0.02%)</title><rect x="99.8741%" y="261" width="0.0203%" height="15" fill="rgb(224,100,7)" fg:x="1165018" fg:w="237"/><text x="100.1241%" y="271.50"></text></g><g><title>__GI___libc_read (236 samples, 0.02%)</title><rect x="99.8742%" y="245" width="0.0202%" height="15" fill="rgb(241,198,18)" fg:x="1165019" fg:w="236"/><text x="100.1242%" y="255.50"></text></g><g><title>__GI___libc_read (235 samples, 0.02%)</title><rect x="99.8742%" y="229" width="0.0201%" height="15" fill="rgb(252,97,53)" fg:x="1165020" fg:w="235"/><text x="100.1242%" y="239.50"></text></g><g><title>__clone3 (244,320 samples, 20.94%)</title><rect x="78.9495%" y="645" width="20.9449%" height="15" fill="rgb(220,88,7)" fg:x="920936" fg:w="244320"/><text x="79.1995%" y="655.50">__clone3</text></g><g><title>start_thread (244,320 samples, 20.94%)</title><rect x="78.9495%" y="629" width="20.9449%" height="15" fill="rgb(213,176,14)" fg:x="920936" fg:w="244320"/><text x="79.1995%" y="639.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (244,320 samples, 20.94%)</title><rect x="78.9495%" y="613" width="20.9449%" height="15" fill="rgb(246,73,7)" fg:x="920936" fg:w="244320"/><text x="79.1995%" y="623.50">std::sys::unix::thread::Thread::n..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (244,320 samples, 20.94%)</title><rect x="78.9495%" y="597" width="20.9449%" height="15" fill="rgb(245,64,36)" fg:x="920936" fg:w="244320"/><text x="79.1995%" y="607.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (244,320 samples, 20.94%)</title><rect x="78.9495%" y="581" width="20.9449%" height="15" fill="rgb(245,80,10)" fg:x="920936" fg:w="244320"/><text x="79.1995%" y="591.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (244,320 samples, 20.94%)</title><rect x="78.9495%" y="565" width="20.9449%" height="15" fill="rgb(232,107,50)" fg:x="920936" fg:w="244320"/><text x="79.1995%" y="575.50">core::ops::function::FnOnce::call..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (244,320 samples, 20.94%)</title><rect x="78.9495%" y="549" width="20.9449%" height="15" fill="rgb(253,3,0)" fg:x="920936" fg:w="244320"/><text x="79.1995%" y="559.50">std::thread::Builder::spawn_unche..</text></g><g><title>std::panic::catch_unwind (244,320 samples, 20.94%)</title><rect x="78.9495%" y="533" width="20.9449%" height="15" fill="rgb(212,99,53)" fg:x="920936" fg:w="244320"/><text x="79.1995%" y="543.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (244,320 samples, 20.94%)</title><rect x="78.9495%" y="517" width="20.9449%" height="15" fill="rgb(249,111,54)" fg:x="920936" fg:w="244320"/><text x="79.1995%" y="527.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (244,320 samples, 20.94%)</title><rect x="78.9495%" y="501" width="20.9449%" height="15" fill="rgb(249,55,30)" fg:x="920936" fg:w="244320"/><text x="79.1995%" y="511.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (244,320 samples, 20.94%)</title><rect x="78.9495%" y="485" width="20.9449%" height="15" fill="rgb(237,47,42)" fg:x="920936" fg:w="244320"/><text x="79.1995%" y="495.50">&lt;core::panic::unwind_safe::Assert..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (244,320 samples, 20.94%)</title><rect x="78.9495%" y="469" width="20.9449%" height="15" fill="rgb(211,20,18)" fg:x="920936" fg:w="244320"/><text x="79.1995%" y="479.50">std::thread::Builder::spawn_unche..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (244,320 samples, 20.94%)</title><rect x="78.9495%" y="453" width="20.9449%" height="15" fill="rgb(231,203,46)" fg:x="920936" fg:w="244320"/><text x="79.1995%" y="463.50">std::sys_common::backtrace::__rus..</text></g><g><title>zip_password_finder::password_checker::{{closure}} (244,320 samples, 20.94%)</title><rect x="78.9495%" y="437" width="20.9449%" height="15" fill="rgb(237,142,3)" fg:x="920936" fg:w="244320"/><text x="79.1995%" y="447.50">zip_password_finder::password_che..</text></g><g><title>zip::read::&lt;impl zip::read::zip_archive::ZipArchive&lt;R&gt;&gt;::by_index_decrypt (243,707 samples, 20.89%)</title><rect x="79.0021%" y="421" width="20.8924%" height="15" fill="rgb(241,107,1)" fg:x="921549" fg:w="243707"/><text x="79.2521%" y="431.50">zip::read::&lt;impl zip::read::zip_a..</text></g><g><title>zip::read::&lt;impl zip::read::zip_archive::ZipArchive&lt;R&gt;&gt;::by_index_with_optional_password (243,707 samples, 20.89%)</title><rect x="79.0021%" y="405" width="20.8924%" height="15" fill="rgb(229,83,13)" fg:x="921549" fg:w="243707"/><text x="79.2521%" y="415.50">zip::read::&lt;impl zip::read::zip_a..</text></g><g><title>zip::read::make_crypto_reader (243,058 samples, 20.84%)</title><rect x="79.0577%" y="389" width="20.8368%" height="15" fill="rgb(241,91,40)" fg:x="922198" fg:w="243058"/><text x="79.3077%" y="399.50">zip::read::make_crypto_reader</text></g><g><title>zip::aes::AesReader&lt;R&gt;::validate (243,046 samples, 20.84%)</title><rect x="79.0587%" y="373" width="20.8357%" height="15" fill="rgb(225,3,45)" fg:x="922210" fg:w="243046"/><text x="79.3087%" y="383.50">zip::aes::AesReader&lt;R&gt;::validate</text></g><g><title>sha1::compress::compress (262 samples, 0.02%)</title><rect x="99.8986%" y="645" width="0.0225%" height="15" fill="rgb(244,223,14)" fg:x="1165304" fg:w="262"/><text x="100.1486%" y="655.50"></text></g><g><title>zip::aes::AesReader&lt;R&gt;::validate (657 samples, 0.06%)</title><rect x="99.9218%" y="645" width="0.0563%" height="15" fill="rgb(224,124,37)" fg:x="1165575" fg:w="657"/><text x="100.1718%" y="655.50"></text></g><g><title>pbkdf2::pbkdf2 (653 samples, 0.06%)</title><rect x="99.9222%" y="629" width="0.0560%" height="15" fill="rgb(251,171,30)" fg:x="1165579" fg:w="653"/><text x="100.1722%" y="639.50"></text></g><g><title>pbkdf2::pbkdf2_body (652 samples, 0.06%)</title><rect x="99.9222%" y="613" width="0.0559%" height="15" fill="rgb(236,46,54)" fg:x="1165580" fg:w="652"/><text x="100.1722%" y="623.50"></text></g><g><title>digest::FixedOutput::finalize_fixed (550 samples, 0.05%)</title><rect x="99.9310%" y="597" width="0.0472%" height="15" fill="rgb(245,213,5)" fg:x="1165682" fg:w="550"/><text x="100.1810%" y="607.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::FixedOutput&gt;::finalize_into (419 samples, 0.04%)</title><rect x="99.9422%" y="581" width="0.0359%" height="15" fill="rgb(230,144,27)" fg:x="1165813" fg:w="419"/><text x="100.1922%" y="591.50"></text></g><g><title>&lt;hmac::optim::HmacCore&lt;D&gt; as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (419 samples, 0.04%)</title><rect x="99.9422%" y="565" width="0.0359%" height="15" fill="rgb(220,86,6)" fg:x="1165813" fg:w="419"/><text x="100.1922%" y="575.50"></text></g><g><title>&lt;sha1::Sha1Core as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (419 samples, 0.04%)</title><rect x="99.9422%" y="549" width="0.0359%" height="15" fill="rgb(240,20,13)" fg:x="1165813" fg:w="419"/><text x="100.1922%" y="559.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::len64_padding_be (419 samples, 0.04%)</title><rect x="99.9422%" y="533" width="0.0359%" height="15" fill="rgb(217,89,34)" fg:x="1165813" fg:w="419"/><text x="100.1922%" y="543.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::digest_pad (419 samples, 0.04%)</title><rect x="99.9422%" y="517" width="0.0359%" height="15" fill="rgb(229,13,5)" fg:x="1165813" fg:w="419"/><text x="100.1922%" y="527.50"></text></g><g><title>&lt;sha1::Sha1Core as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core::{{closure}} (419 samples, 0.04%)</title><rect x="99.9422%" y="501" width="0.0359%" height="15" fill="rgb(244,67,35)" fg:x="1165813" fg:w="419"/><text x="100.1922%" y="511.50"></text></g><g><title>worker-4 (248,515 samples, 21.30%)</title><rect x="78.6739%" y="661" width="21.3046%" height="15" fill="rgb(221,40,2)" fg:x="917721" fg:w="248515"/><text x="78.9239%" y="671.50">worker-4</text></g><g><title>&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (129 samples, 0.01%)</title><rect x="99.9827%" y="325" width="0.0111%" height="15" fill="rgb(237,157,21)" fg:x="1166285" fg:w="129"/><text x="100.2327%" y="335.50"></text></g><g><title>std::io::BufRead::read_line (117 samples, 0.01%)</title><rect x="99.9837%" y="309" width="0.0100%" height="15" fill="rgb(222,94,11)" fg:x="1166297" fg:w="117"/><text x="100.2337%" y="319.50"></text></g><g><title>std::io::append_to_string (117 samples, 0.01%)</title><rect x="99.9837%" y="293" width="0.0100%" height="15" fill="rgb(249,113,6)" fg:x="1166297" fg:w="117"/><text x="100.2337%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (175 samples, 0.02%)</title><rect x="99.9813%" y="357" width="0.0150%" height="15" fill="rgb(238,137,36)" fg:x="1166269" fg:w="175"/><text x="100.2313%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (175 samples, 0.02%)</title><rect x="99.9813%" y="341" width="0.0150%" height="15" fill="rgb(210,102,26)" fg:x="1166269" fg:w="175"/><text x="100.2313%" y="351.50"></text></g><g><title>_start (191 samples, 0.02%)</title><rect x="99.9813%" y="645" width="0.0164%" height="15" fill="rgb(218,30,30)" fg:x="1166269" fg:w="191"/><text x="100.2313%" y="655.50"></text></g><g><title>__libc_start_main_impl (191 samples, 0.02%)</title><rect x="99.9813%" y="629" width="0.0164%" height="15" fill="rgb(214,67,26)" fg:x="1166269" fg:w="191"/><text x="100.2313%" y="639.50"></text></g><g><title>__libc_start_call_main (191 samples, 0.02%)</title><rect x="99.9813%" y="613" width="0.0164%" height="15" fill="rgb(251,9,53)" fg:x="1166269" fg:w="191"/><text x="100.2313%" y="623.50"></text></g><g><title>main (191 samples, 0.02%)</title><rect x="99.9813%" y="597" width="0.0164%" height="15" fill="rgb(228,204,25)" fg:x="1166269" fg:w="191"/><text x="100.2313%" y="607.50"></text></g><g><title>std::rt::lang_start_internal (191 samples, 0.02%)</title><rect x="99.9813%" y="581" width="0.0164%" height="15" fill="rgb(207,153,8)" fg:x="1166269" fg:w="191"/><text x="100.2313%" y="591.50"></text></g><g><title>std::panic::catch_unwind (191 samples, 0.02%)</title><rect x="99.9813%" y="565" width="0.0164%" height="15" fill="rgb(242,9,16)" fg:x="1166269" fg:w="191"/><text x="100.2313%" y="575.50"></text></g><g><title>std::panicking::try (191 samples, 0.02%)</title><rect x="99.9813%" y="549" width="0.0164%" height="15" fill="rgb(217,211,10)" fg:x="1166269" fg:w="191"/><text x="100.2313%" y="559.50"></text></g><g><title>std::panicking::try::do_call (191 samples, 0.02%)</title><rect x="99.9813%" y="533" width="0.0164%" height="15" fill="rgb(219,228,52)" fg:x="1166269" fg:w="191"/><text x="100.2313%" y="543.50"></text></g><g><title>std::rt::lang_start_internal::{{closure}} (191 samples, 0.02%)</title><rect x="99.9813%" y="517" width="0.0164%" height="15" fill="rgb(231,92,29)" fg:x="1166269" fg:w="191"/><text x="100.2313%" y="527.50"></text></g><g><title>std::panic::catch_unwind (191 samples, 0.02%)</title><rect x="99.9813%" y="501" width="0.0164%" height="15" fill="rgb(232,8,23)" fg:x="1166269" fg:w="191"/><text x="100.2313%" y="511.50"></text></g><g><title>std::panicking::try (191 samples, 0.02%)</title><rect x="99.9813%" y="485" width="0.0164%" height="15" fill="rgb(216,211,34)" fg:x="1166269" fg:w="191"/><text x="100.2313%" y="495.50"></text></g><g><title>std::panicking::try::do_call (191 samples, 0.02%)</title><rect x="99.9813%" y="469" width="0.0164%" height="15" fill="rgb(236,151,0)" fg:x="1166269" fg:w="191"/><text x="100.2313%" y="479.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (191 samples, 0.02%)</title><rect x="99.9813%" y="453" width="0.0164%" height="15" fill="rgb(209,168,3)" fg:x="1166269" fg:w="191"/><text x="100.2313%" y="463.50"></text></g><g><title>std::rt::lang_start::{{closure}} (191 samples, 0.02%)</title><rect x="99.9813%" y="437" width="0.0164%" height="15" fill="rgb(208,129,28)" fg:x="1166269" fg:w="191"/><text x="100.2313%" y="447.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (191 samples, 0.02%)</title><rect x="99.9813%" y="421" width="0.0164%" height="15" fill="rgb(229,78,22)" fg:x="1166269" fg:w="191"/><text x="100.2313%" y="431.50"></text></g><g><title>core::ops::function::FnOnce::call_once (191 samples, 0.02%)</title><rect x="99.9813%" y="405" width="0.0164%" height="15" fill="rgb(228,187,13)" fg:x="1166269" fg:w="191"/><text x="100.2313%" y="415.50"></text></g><g><title>zip_password_finder::main (191 samples, 0.02%)</title><rect x="99.9813%" y="389" width="0.0164%" height="15" fill="rgb(240,119,24)" fg:x="1166269" fg:w="191"/><text x="100.2313%" y="399.50"></text></g><g><title>zip_password_finder::password_finder (191 samples, 0.02%)</title><rect x="99.9813%" y="373" width="0.0164%" height="15" fill="rgb(209,194,42)" fg:x="1166269" fg:w="191"/><text x="100.2313%" y="383.50"></text></g><g><title>all (1,166,487 samples, 100%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(247,200,46)" fg:x="0" fg:w="1166487"/><text x="0.2500%" y="687.50"></text></g><g><title>zip-password-fi (251 samples, 0.02%)</title><rect x="99.9785%" y="661" width="0.0215%" height="15" fill="rgb(218,76,16)" fg:x="1166236" fg:w="251"/><text x="100.2285%" y="671.50"></text></g></svg></svg>